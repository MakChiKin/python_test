#python for maya
##########################################################################
#																		 #
#						   	    - maxTools -							 #
#								 V2014.09.05	 						 #
#																		 #
#							   by ChiKin Mak							 #
#						   241978389.blog.163.com						 #
#						    chikinmak@foxmail.com						 #
#																		 #
##########################################################################
############################################f#############################

import maya.cmds as max
import maya.mel as mel
import random
import os
import sys
import time
import pymel.core as pm
import mtoa.aovs as aovs
from pymel import core as pm

if max.window('maxTools',ex=True):
   max.deleteUI('maxTools',wnd=True)
   window = max.window( title='maxTools',w=250,mnb=1,mxb=1,sizeable=False)

#UV
def PDL(*arg):
    value=max.intSliderGrp('input01',q=True,v=1)
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)  
    for mysel in mysel: 
        max.setAttr (mysel+".smoothLevel",int(value))
    print('Preview Division Levels is %s' %value),  
   
def RDL(*arg):
    value=max.intSliderGrp('input02',q=True,v=1)
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)  
    for mysel in mysel:
        max.setAttr (mysel+".renderSmoothLevel",int(value))
    print('Rander Division Levels is %s' %value),

def UPLFR(*arg):
    raobjsel=max.ls(sl=True)
    for i in raobjsel:
        if max.checkBox('UPLFR',q=True,v=True):
            max.setAttr(i+".useSmoothPreviewForRender",1)
        else:
            max.setAttr(i+".useSmoothPreviewForRender",0)
       
def Donotsmooth(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepMapBorders",2)    
    print("Don't tsmooth is complete"),
       
def Smoothinternal(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepMapBorders",1)
    print('Smoothinternal is complete'),
       
def Smoothall(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepMapBorders",0)
    print('Smoothall is complete'),
       
def SmoothUVs(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".smoothUVs",1)
    print('smoothUVs is complete'),
   
def notSmoothUVs(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".smoothUVs",0)
    print('notSmoothUVs is complete'),
       
def genmetryBorders(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepBorder",1)
    print('genmetryBorders is complete'),
       
def notgenmetryBorders(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepBorder",0)
    print("genmetryBorders is remove"),
       
def hardedges(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepHardEdge",1)
    print('hardedges is complete'),
       
def nothardedges(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".keepHardEdge",0)
    print('hardedges is remove'),
       
def propagateEdgeHardness(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".propagateEdgeHardness",1)
    print('Edge Hardnes is complete'),
       
def notpropagateEdgeHardness(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+".propagateEdgeHardness",0)
    print('Edge Hardnes is remove'),
             
def noteA(*arg):
    mysel=max.ls(sl=True)
    if len(mysel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        PDL(*arg)
                     
def noteB(*arg):
    mysel=max.ls(sl=True)
    if len(mysel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")        
    else:
        Donotsmooth(*arg)        
       
def noteC(*arg):
    mysel=max.ls(sl=True)
    if len(mysel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        Smoothinternal(*arg)
       
def noteD(*arg):
    mysel=max.ls(sl=True)
    if len(mysel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        Smoothall(*arg)        
                     
#primaryVisibility      
def objhide(*arg):
    max.pickWalk(d="down")
    mysel=max.ls(sl=True)
    for mysel in mysel:
        max.setAttr (mysel+'.primaryVisibility',0)
    print('geometry is hide'),
       
def objdisplay(*arg):
    objsel=max.ls(sl=True)
    shapesel=max.listRelatives(objsel)
    print objsel
    print shapesel
    for objsel in objsel:
        max.setAttr (objsel+".primaryVisibility",1)
    print('geometry is display'),    
       
#constrain
def geometry(*arg):
    objSel=max.ls(sl=True)  
    shapeSel=max.listRelatives(objSel)
    count=len(objSel)


    geoconsobj=objSel[count-1]
    for i in range(count-1):
        max.geometryConstraint(geoconsobj,objSel[i],w=1)

    print('Geometry Constrain is complete'),    
   
def noteE(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        geometry(*arg)
       
def normal(*arg):
    objSel=max.ls(sl=True)  
    count=len(objSel)
    geoconsobj=objSel[count-1]
    for i in range(count-1):
        max.normalConstraint(geoconsobj,objSel[i],w=1,aim=[0,1,0],u=[0,1,0],wut="Vector",wu=[0,1,0])
        print ('Normal Constrain is complete'),
       
def noteF(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        normal(*arg)      
   
def delconstrainB(*arg):
    objSel=max.ls(sl=True) 
    print objSel 
    count=len(objSel)
    print count
    geoconsobj=objSel[count-1]
    print geoconsobj 
    
    max.pickWalk (d = 'down')
    objA = max.pickWalk (d = 'right')
    print objA
    
    gC = max.ls(objA,type = "geometryConstraint")
    print gC
    nC = max.ls(objA,type = "normalConstraint")
    print nC
    
    max.select(objSel)
    
    if len(gC)>=1:
        for i in range(count-1):
            max.geometryConstraint(geoconsobj,objSel[i],rm=1)
        print "geometryConstraint had delete!",
        
    if len(nC)>=1:
        for i in range(count-1):
            max.normalConstraint(geoconsobj,objSel[i],rm=1)  
        print "normalConstraint had delete!", 
    
    if len(gC)==0 and len(nC)==0:        
        print ('These is not constraint!'), 
        max.confirmDialog(t="Prompt",m="These is not constraint!",b="OK")     
       
def noteG(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        delconstrainB(*arg)

def Batch_transferUV(*arg):
    objSel=max.ls(sl=True)  
    count=len(objSel)
    targetObj=objSel[count-1]
    for i in range(count-1):
        max.transferAttributes(targetObj,objSel[i],transferPositions=0 ,transferNormals= 0, transferUVs= 2, transferColors= 2 ,sampleSpace= 4 ,sourceUvSpace= "map1" ,targetUvSpace= "map1" ,searchMethod= 3,flipUVs= 0 ,colorBorders= 1)
    max.select(objSel)    
    max.DeleteHistory()    
    print('Batch transferUV is complete'),  

def delconstrainC(*arg):        
    selObj=max.ls(sl=True)
    geoConst=[]
    normalConst=[]
    for i in range(len(selObj)):
        childOfObj=max.listRelatives(selObj[i],ad=1)
        print childOfObj
        print len(childOfObj)
        for a in range(len(childOfObj)):
            
            what1 =max.nodeType(childOfObj[a],api=1)
            print what1
            what2 = max.nodeType(childOfObj[a],api=1)
            print what2
            
            if max.nodeType(childOfObj[a],api=1)=="kGeometryConstraint":
                geoConst.append(childOfObj[a])
            elif max.nodeType(childOfObj[a],api=1)=="kNormalConstraint":
                normalConst.append(childOfObj[a])
    max.select(cl=1)
    if len(geoConst)>=1:
        max.select(geoConst)
        max.delete()
    if len(normalConst)>=1:    
        max.select(normalConst)
        max.delete()
    if  len(geoConst+normalConst)==0:   
        print ('These is not constraint!'), 
        max.confirmDialog(t="Prompt",m="These is not constraint!",b="OK") 
    print ('All constrain is delete'),
       
def noteI(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        delconstrainC(*arg)
                 
       
def settoface(*arg):
    objSel=max.ls(sl=True)  
    shapeSel=max.listRelatives(objSel)
    count=len(objSel)
    for i in shapeSel:
        max.polySoftEdge(a=180,ch=1,e=1,q=1)
        max.polySetToFaceNormal(su=1)
    print('Set to face is complete'),
   
def noteH(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        settoface(*arg)
def DelEG(*arg):  
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()
    DelEmptyGroup()    
    print('DelEmptyGroup is OK'),
             
def DelEmptyGroup(*arg):
    transforms =  max.ls(type='transform')
    deleteList = []
    for tran in transforms:
        if max.nodeType(tran) == 'transform':
            children = max.listRelatives(tran, c=True)
            if children == None:
                print '%s, has no childred' %(tran)
                deleteList.append(tran)
   
    if len(deleteList) > 0:            
       max.delete(deleteList)

def create_noSmooth_set(*arg):
    objSel = max.ls(sl=1,type='transform')
    if len(objSel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        nnsObj = max.ls('Auto_noSmooth',type = 'objectSet')
        print nnsObj
        ssObj = max.ls('Auto_smooth',type = 'objectSet')
        print ssObj
        
        max.select(cl=1)
        if len(nnsObj)==0:
            ns = max.sets(n="Auto_noSmooth")
        if len(ssObj)==0:
            s = max.sets(n="Auto_smooth") 
        
        print objSel
        for i in objSel:
            print i
            max.setAttr(i+".displaySmoothMesh",2)
            num = max.getAttr(i+".smoothLevel")    
            print num
            
            if int(num)==0:
                mel.eval('sets -edit -forceElement  Auto_noSmooth %s ;'%i)
                print 'Auto_noSmooth is OK'
            else:
                mel.eval('sets -edit -forceElement  Auto_smooth %s ;'%i)
                print 'Auto_smooth is OK' 
            max.setAttr(i+".displaySmoothMesh",0) 

def Auto_Transparency(*arg):
    matSel = max.ls(sl=True,mat=True)
    print matSel
    if len(matSel)==0:
        max.confirmDialog(t="Prompt",m="Please select a material",b="OK")
    else:
        AT = max.ls('Auto_Transparency_Obj',type = 'objectSet')
        print AT
        MT = max.ls('Auto_Transparency_Mat',type = 'objectSet')
        print AT
        OMT = max.ls('Auto_noTransparency_Mat',type = 'objectSet')
        print OMT
        
        max.select(cl=1)
        if len(AT)==0:
            autoTranspy = max.sets(n="Auto_Transparency_Obj")    
        if len(MT)==0:
            autoTranspyM = max.sets(n="Auto_Transparency_Mat")
        if len(OMT)==0:
            autoTranspyOM = max.sets(n="Auto_noTransparency_Mat")    
            
        for x in matSel:
            print x
            if max.nodeType(x)=='anisotropic':
               transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
            if max.nodeType(x)=='lambert':
               transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
            if max.nodeType(x)=='phong':
               transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)      
            if max.nodeType(x)=='blinn':
               transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
            if max.nodeType(x)=='surfaceShader':
               transparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)
            
            print transparencyPath
            if len(transparencyPath)>0:
                max.hyperShade(objects=x)        
                xObj = max.pickWalk(d="up")
                print xObj        
                for i in xObj:
                    print i
                    mel.eval('sets -edit -forceElement  Auto_Transparency_Obj %s ;'%i)                    
                    print 'Auto_Transparency_Obj is OK'
                    
            if len(transparencyPath)>0:      
                mel.eval('sets -edit -forceElement  Auto_Transparency_Mat %s ;'%x) 
                max.sets("lambert1","particleCloud1","shaderGlow1",e=1,rm="Auto_Transparency_Mat" )               
                print 'Auto_Transparency_Mat is OK'        
            
            if len(transparencyPath)==0:      
                mel.eval('sets -edit -forceElement  Auto_noTransparency_Mat %s ;'%x)
                max.sets("lambert1","particleCloud1","shaderGlow1",e=1,rm="Auto_noTransparency_Mat" )
                print 'Auto_Transparency_Mat is OK'         
            max.select(cl=1) 

#boundaryRules
def boundaryRules(item):
    brObj=max.ls(sl=True)
    for brObj in brObj:
        if item=="Legacy":
            max.setAttr (brObj+".boundaryRule",0)
        elif item=="Crease All":
            max.setAttr (brObj+".boundaryRule",1)
        elif item=="Crease Edges":
            max.setAttr (brObj+".boundaryRule",2)


#RenderStats_______________________________________________________________________________________
def castsShadows(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('cs',q=True,v=True):      
            max.setAttr(scobjsel+".castsShadows",1)
        else:
            max.setAttr(scobjsel+".castsShadows",0)  
         
def receiveShadows(*arg):
    rsobjsel=max.ls(sl=True)
    for rsobjsel in rsobjsel:  
        if max.checkBox('rs',q=True,v=True):
            max.setAttr(rsobjsel+".receiveShadows",1)
        else:
            max.setAttr(rsobjsel+".receiveShadows",0)
       
def motionBlur(*arg):
    mbobjsel=max.ls(sl=True)
    for mbobjsel in mbobjsel:
        if max.checkBox('mb',q=True,v=True):
            max.setAttr(mbobjsel+".motionBlur",1)
        else:
            max.setAttr(mbobjsel+".motionBlur",0)  
         
def primaryVisibility(*arg):
    pvobjsel=max.ls(sl=True)
    for pvobjsel in pvobjsel:
        if max.checkBox('pv',q=True,v=True):
            max.setAttr(pvobjsel+".primaryVisibility",1)
        else:
            max.setAttr(pvobjsel+".primaryVisibility",0)    
       
   
def smoothShading(*arg):
    ssobjsel=max.ls(sl=True)
    for ssobjsel in ssobjsel:
        if max.checkBox('ss',q=True,v=True):
            max.setAttr(ssobjsel+".smoothShading",1)
        else:
            max.setAttr(ssobjsel+".smoothShading",0)
       
def visibleInReflections(*arg):
    leobjsel=max.ls(sl=True)
    for leobjsel in leobjsel:
        if max.checkBox('vile',q=True,v=True):
            max.setAttr(leobjsel+".visibleInReflections",1)
        else:
            max.setAttr(leobjsel+".visibleInReflections",0)                  
   
def visibleInRefractions(*arg):
    raobjsel=max.ls(sl=True)
    for raobjsel in raobjsel:
        if max.checkBox('vira',q=True,v=True):
            max.setAttr(raobjsel+".visibleInRefractions",1)
        else:
            max.setAttr(raobjsel+".visibleInRefractions",0)    
   
def doubleSided(*arg):
    dsobjsel=max.ls(sl=True)
    for dsobjsel in dsobjsel:
        if max.checkBox('ds',q=True,v=True):
            max.setAttr(dsobjsel+".doubleSided",1)
        else:
            max.setAttr(dsobjsel+".doubleSided",0)      

def AISS(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aiss',q=True,v=True):      
            max.setAttr(scobjsel+".aiSelfShadows",1)
        else:
            max.setAttr(scobjsel+".aiSelfShadows",0)  

def AIO(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aio',q=True,v=True):      
            max.setAttr(scobjsel+".aiOpaque",1)
        else:
            max.setAttr(scobjsel+".aiOpaque",0)  
            
def AIVID(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aivid',q=True,v=True):      
            max.setAttr(scobjsel+".aiVisibleInDiffuse",1)
        else:
            max.setAttr(scobjsel+".aiVisibleInDiffuse",0)              
            
def AIVIG(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aivig',q=True,v=True):      
            max.setAttr(scobjsel+".aiVisibleInGlossy",1)
        else:
            max.setAttr(scobjsel+".aiVisibleInGlossy",0)              
            
def AIET(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aiet',q=True,v=True):      
            max.setAttr(scobjsel+".aiExportTangents",1)
        else:
            max.setAttr(scobjsel+".aiExportTangents",0)  
            
def AIEVC(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aievc',q=True,v=True):      
            max.setAttr(scobjsel+".aiExportColors",1)
        else:
            max.setAttr(scobjsel+".aiExportColors",0)              
            
def AIERP(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aierp',q=True,v=True):      
            max.setAttr(scobjsel+".aiExportRefPoints",1)
        else:
            max.setAttr(scobjsel+".aiExportRefPoints",0)                         
            
def AIERN(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aiern',q=True,v=True):      
            max.setAttr(scobjsel+".aiExportRefNormals",1)
        else:
            max.setAttr(scobjsel+".aiExportRefNormals",0)              
            
def AIERT(*arg):
    scobjsel=max.ls(sl=True)
    for scobjsel in scobjsel:    
        if max.checkBox('aiert',q=True,v=True):      
            max.setAttr(scobjsel+".aiExportRefTangents",1)
        else:
            max.setAttr(scobjsel+".aiExportRefTangents",0)   
   
         
#connect        
#____________________________________________________________________________________________________________________________
def cam(*arg):
    objSel=max.ls(sl=True)  
    shapeSel=max.listRelatives(objSel)
    count=len(objSel)
    camobj=objSel[count-1]
    for i in range(count-1):
        max.connectAttr(camobj+'.rotate',objSel[i]+'.rotate',f=1)

    print('ConnectAttr is complete'),    

def noteM(*arg):
    objsel=max.ls(sl=True)
    if len(objsel)==0:
        max.confirmDialog(t="Prompt",m="Please select an object",b="OK")
    else:
        cam(*arg)

#UV translate
#____________________________________________________________________________________________________________________________
def UVtranslate(*arg):
    #max.ls(sl=1)
    #obj = max.pickWalk(d="down")
    #print obj
    U = max.textField('input_U_T',q=True,tx=True)
    V = max.textField('input_V_T',q=True,tx=True)
    print U
    print V
    UunmA = int(U)
    VnumA = int(V)
    #print VnumA
    #UunmB = int(U)+0.5
    #VnumB = int(V)+0.5      
    #max.setAttr(obj+".uvPivot", UunmB ,VnumB,type= "double2")
    max.polyEditUV (u=UunmA ,v=VnumA )



#____________________________________________________________________________________________________________________________        
#transalte
def randomTranslate(*arg):
    translateX()
    translateY()
    translateZ()
   
def translateX(*arg):
    if max.checkBox('txcb',q=True,v=True):
        value_Min=max.textField('input_Min_T',q=True,tx=True)
        value_Max=max.textField('input_Max_T',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".translateX",random.uniform(float(value_Min),float(value_Max)))  
       
def translateY(*arg):
    if max.checkBox('tycb',q=True,v=True):
        value_Min=max.textField('input_Min_T',q=True,tx=True)
        value_Max=max.textField('input_Max_T',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".translateY",random.uniform(float(value_Min),float(value_Max)))
       
def translateZ(*arg):
    if max.checkBox('tzcb',q=True,v=True):
        value_Min=max.textField('input_Min_T',q=True,tx=True)
        value_Max=max.textField('input_Max_T',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".translateZ",random.uniform(float(value_Min),float(value_Max)))

#rotate
def randomRotate(*arg):
    rotateX()
    rotateY()
    rotateZ()
    rotate90()
   
def rotateX(*arg):
    if max.checkBox('rxcb',q=True,v=True):
        value_Min=max.textField('input_Min_R',q=True,tx=True)
        value_Max=max.textField('input_Max_R',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".rotateX",random.uniform(float(value_Min),float(value_Max)))
             
def rotateY(*arg):
    if max.checkBox('rycb',q=True,v=True):
        value_Min=max.textField('input_Min_R',q=True,tx=True)
        value_Max=max.textField('input_Max_R',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".rotateY",random.uniform(float(value_Min),float(value_Max)))
           
def rotateZ(*arg):
    if max.checkBox('rzcb',q=True,v=True):
        value_Min=max.textField('input_Min_R',q=True,tx=True)
        value_Max=max.textField('input_Max_R',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            max.setAttr(ball[i]+".rotateZ",random.uniform(float(value_Min),float(value_Max)))
           
def rotate90(*arg):
    if max.checkBox('r90cb',q=True,v=True):
        ball=max.ls(sl=True)
        #ji=[90,18,270]        
        for i in ball:            
            R=max.getAttr(i+".rotateY")  
            if R==270:  
               max.setAttr(i+".rotateY",0)
            else:        
                rint = R+90          
                max.setAttr(i+".rotateY",int(rint))
         
#scale
def randomScale(*arg):
    scaleX()
    scaleY()
    scaleZ()
    scaleXYZ()
   
def scaleX(*arg):
    if max.checkBox('sxcb',q=True,v=True):
        value_Min=max.textField('input_Min_S',q=True,tx=True)
        value_Max=max.textField('input_Max_S',q=True,tx=True)
        ball=max.ls(sl=True)        
        for i in range(len(ball)):
            randomScale=random.uniform(float(value_Min),float(value_Max))
            max.setAttr(ball[i]+".scaleX",randomScale)
           
def scaleY(*arg):
    if max.checkBox('sycb',q=True,v=True):
        value_Min=max.textField('input_Min_S',q=True,tx=True)
        value_Max=max.textField('input_Max_S',q=True,tx=True)
        ball=max.ls(sl=True)        
        for i in range(len(ball)):
            randomScale=random.uniform(float(value_Min),float(value_Max))
            max.setAttr(ball[i]+".scaleY",randomScale)

def scaleZ(*arg):
    if max.checkBox('szcb',q=True,v=True):
        value_Min=max.textField('input_Min_S',q=True,tx=True)
        value_Max=max.textField('input_Max_S',q=True,tx=True)
        ball=max.ls(sl=True)        
        for i in range(len(ball)):
            randomScale=random.uniform(float(value_Min),float(value_Max))
            max.setAttr(ball[i]+".scaleZ",randomScale)
           
def scaleXYZ(*arg):
    if max.checkBox('sxyzcb',q=True,v=True):
        value_Min=max.textField('input_Min_S',q=True,tx=True)
        value_Max=max.textField('input_Max_S',q=True,tx=True)
        ball=max.ls(sl=True)
        for i in range(len(ball)):
            randomScale=random.uniform(float(value_Min),float(value_Max))
            max.setAttr(ball[i]+".scaleX",randomScale)
            max.setAttr(ball[i]+".scaleY",randomScale)
            max.setAttr(ball[i]+".scaleZ",randomScale)
           
#2to1
def CFH(*arg):
    objSel=max.ls(sl=True)  
    shapeSel=max.listRelatives(objSel)
    count=len(objSel)    
    for i in shapeSel:
        max.CenterPivot()
        max.makeIdentity(a=1,t=1,r=1,s=1,n=1)
        max.DeleteHistory()
       
def back(*arg):
    ball=max.ls(sl=True)  
    shapeSel=max.listRelatives(ball)
    count=len(ball)    
    for i in range(len(ball)):
        max.setAttr(ball[i]+".translateX",0)
        max.setAttr(ball[i]+".translateY",0)
        max.setAttr(ball[i]+".translateZ",0)
        max.setAttr(ball[i]+".rotateX",0)
        max.setAttr(ball[i]+".rotateY",0)
        max.setAttr(ball[i]+".rotateZ",0)
        max.setAttr(ball[i]+".scaleX",1)
        max.setAttr(ball[i]+".scaleY",1)
        max.setAttr(ball[i]+".scaleZ",1)
    print('TRS is back!'),

#renamer    
def __init__(*arg):
    current_index = -1
    matches = []
    search_string = ""


def _get_matches(*arg):
    find_string = max.textFieldButtonGrp('input_A', q=True, text=True)
    print find_string
    #abc=str(find_string)
    matches = max.ls("*" + find_string + "*", type="transform")
    print matches
    return matches
   
def replace(*arg):
    find_string = max.textFieldButtonGrp('input_A', q=True, text=True)
    replace_string = max.textFieldButtonGrp('input_B', q=True, text=True)
    matches = max.ls(sl=True)
   
    for match in matches:
        new_name = match.split("|")[-1].replace(find_string, replace_string)
        print "Renamed", match, ">", new_name
        max.rename(match, new_name)
       
def add_prefix(*arg):
    prefix = max.textFieldButtonGrp('input_C', q=True, text=True)
    matches = max.ls(sl=True)
   
    for match in matches:
        new_name = prefix +  match.split("|")[-1]
        print "Renamed", match, ">", new_name
        max.rename(match, new_name)                        
       
def add_suffix(*arg):
    suffix = max.textFieldButtonGrp('input_D', q=True, text=True)
    matches = max.ls(sl=True)
   
    for match in matches:
        new_name = match.split("|")[-1] + suffix
        print "Renamed", match, ">", new_name
        max.rename(match, new_name)                        
       
def find(*arg):
    matches = _get_matches(arg)
    print matches
    max.select(matches, r=True)  

def blendShapeRename(*arg):
    find_blendshape()
    replace_blendshape()
    prefix_blendshape()
    suffix_blendshape()

def find_blendshape(*arg):
    find_string = max.textFieldButtonGrp('input_A', q=True, text=True)    
    BP = max.ls("*" + find_string + "*",typ="blendShape")
    print BP
    max.select(BP, r=True)
   
def replace_blendshape(*arg):
    find_string = max.textFieldButtonGrp('input_A', q=True, text=True)
    replace_string = max.textFieldButtonGrp('input_B', q=True, text=True)
    BP = max.ls(typ="blendShape")
    print BP
    for i in BP:
        newName = i.split("|")[-1].replace(find_string, replace_string)
        N = max.rename(i,newName)
        print N        

def prefix_blendshape(*arg):
    prefix = max.textFieldButtonGrp('input_C', q=True, text=True)
    BP = max.ls(typ="blendShape")
    print BP
    for i in BP:
        newName = prefix +  i.split("|")[-1]
        N = max.rename(i,newName)
        print N

def suffix_blendshape(*arg):
    suffix = max.textFieldButtonGrp('input_D', q=True, text=True)
    BP = max.ls(typ="blendShape")
    print BP
    for i in BP:
        newName = i.split("|")[-1] + suffix
        N = max.rename(i,newName)
        print N



#referecce Some Flie__________________________________________________________________________________________________________________________________
def referenceSomeFile(*arg):
    selectObjs=[]
    refFiles = max.fileDialog2 (fm=4,cap="Select Files to Reference")
    if len(refFiles) == 0:
        max.warning (l="No File to Refrence")
    else:
        result =max.promptDialog(
                        title='Reference repeats',
                		message='Enter number:',
                		button=['OK', 'Cancel'],
                		defaultButton='OK',
                		cancelButton='Cancel',
                		dismissString='Cancel')
        print refFiles
   
        if result == "OK":
            nx = max.promptDialog (q=1 ,tx=1)
            n = int(nx)                      
            for refFiles in refFiles:                    
                secensName1=refFiles.split("/")
                print secensName1[-1]
                secensName2=secensName1[-1].split(".")
                print secensName2[0]
                selectObjs.append(secensName1[-1])
                print selectObjs*n
                nObjs = selectObjs*n
                path2=refFiles.split("/")
                print path2[-2]          
                path1=refFiles.split(path2[-2]+"/")
                print path1[0]    
               
        for i in range(len(nObjs)):
            print nObjs[i]            
            max.file(path1[0]+path2[-2]+"/"+nObjs[i],r = True,mnr=1,uns=1)
            print 'maxTools have finished %d repeats the reference files.' %n,  
 
#conversionType__________________________________________________________________________________________________________            
def transText(*arg):
    pahtA = max.textFieldGrp (filePathA,q=1,tx=1)
    print pahtA
    pahtB = max.textFieldGrp (filePathB,q=1,tx=1)
    print pahtB
    max.textFieldGrp ('FileAPath',e=1,l ="FileA Path:" ,tx= pahtB ,cw2=[55,190],en= 1,ann='Please enter path')
    max.textFieldGrp ('FileBPath',e=1,l ="FileB Path:" ,tx= pahtA ,cw2=[55,190],en= 1,ann='Please enter path')

def getName(*arg):
    selobj = max.ls(sl=1)
    print selobj
    for i in selobj:
        print i
        referNode = max.referenceQuery(i,rfn=1)
        print referNode
        referPath = max.referenceQuery(referNode,f=1)
        print referPath
        buffer1 = referPath.split("/")
        print buffer1[-1]
        buffer2 = buffer1[-1].split(".")
        print (buffer2[0]),

def conversionType(*arg):
    #comp = "D:/works/mov6/scenes/complicated/";
    #simp = "D:/works/mov6/scenes/simple/";    
    selobj = max.ls(sl=1)
    print selobj
    for i in selobj:
        print i
        referNode = max.referenceQuery(i,rfn=1)
        print referNode
        referPath = max.referenceQuery(referNode,f=1)
        print referPath
        buffer1 = referPath.split("/")
        print buffer1[-1]
        buffer2 = buffer1[-1].split(".")
        print buffer2[0]
        PathA = max.textFieldGrp ('FileAPath',q=1,tx=1)
        PathB = max.textField ('replacePath',q=1,tx=1)
        print PathA
        print PathB        
        if buffer2[0]==PathA:        
            max.file (PathB, lr = referNode)        
        #if buffer2[0]=="s_building_02_low":        
            #max.file ("D:\works\mov6\scenes\complicated\s_building_01_low.mb", lr = referNode)  
        print ("maxTools have put the file conversion complete."),

def conversionFile(*arg):
    low = "low"
    high = "high"
    selobj = max.ls(sl=1)
    print selobj
    for i in selobj:
        print i
        referNode = max.referenceQuery(i,rfn=1)
        print referNode
        referPath = max.referenceQuery(referNode,f=1)
        print referPath
        buffer1 = referPath.split(".")
        print buffer1
        print buffer1[0]
        print buffer1[1]
        buffer2 = buffer1[0].split("_")
        print buffer2
        print buffer2[-1]
        prefix = buffer2[0].split("/")
        print prefix
        print prefix[-1]
        #print referNode+" "+prefix[-1] +"_"+ high + "." +buffer1[1]
        pathA = prefix[-1] + "_" + buffer2[1] + "_" + buffer2[2] + "_" + high + "." +buffer1[1]
        pathB = prefix[-1] + "_" + buffer2[1] + "_" + buffer2[2] + "_" + low + "." +buffer1[1]
        if buffer2[-1]==low:        
            max.file (pathA, lr = referNode)        
        if buffer2[-1]==high:        
            max.file (pathB, lr = referNode)  
        print ("maxTools have put the file conversion complete."),            
           
                 
#___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________    
#___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________    
#renderLayerSetting_________________________________________________________________________________________________________________________________________________________________________________________________________________________________
def gl(*arg):
    global objSelRender
    global shapeSelRender
    global Date
    objSelRender=max.ls(sl=True)
    if max.objExists('miDefaultFramebuffer.contourEnable')==0:
        max.confirmDialog (t ="Prompt", m= "Please open render settings and \nchange renderUsing for Mentalray!" ,b='OK')
        print ('Set render to Mentalray!'),        
    else:    
        if len(objSelRender)==0:
           max.confirmDialog (t ="Prompt", m= "Please select geometry!" ,b='OK')
           print ('Please select geometry!'),              
        else :  
            customLayer()          
            tNum = max.textFieldGrp("tNum",q=1,text=True)
            prefix = max.textFieldGrp("txtField",q=1,text=True)            
            if  len(tNum)==0:  
                 max.confirmDialog (t ="Prompt", m= "Nothing track number!" ,b='OK')
            elif len(prefix)==0:
                 max.confirmDialog (t ="Prompt", m= "Nothing prefix name!" ,b='OK')                
            else :
                if tNum=="Track_000":
                   max.confirmDialog (t ="Prompt", m= "Please change track number!" ,b='OK')
 
                elif prefix=="shot_000":
                    max.confirmDialog (t ="Prompt", m= "Please change prefix name!" ,b='OK')
                else :  
                    pan = max.getPanel(wf=1)
                    print pan
                    panName = max.modelPanel(pan,q=1,camera=1)
                    print panName
                    camShape=max.listRelatives(panName)
                    print camShape[0]
                    cameraName = panName.split("_")
                    print cameraName
                    if panName=="persp":
                       max.confirmDialog(t="Prompt",m="Can not use persp camera!",b="OK")
                    elif panName=="top":
                        max.confirmDialog(t="Prompt",m="Can not use top camera!",b="OK")
                    elif panName=="front":
                        max.confirmDialog(t="Prompt",m="Can not use front camera!",b="OK")    
                    elif panName=="side":
                        max.confirmDialog(t="Prompt",m="Can not use side camera!",b="OK")      
                    else:
                        if cameraName[0]=="shot" or cameraName[0]=="main":                            
                            max.select(objSelRender)                            
                            renderLayerSetGlobals()
                            #setCamera()                            
                            preSet()
                            autoGetCam()
                            autoGetTime()
                                 
                            colorCreateRenderLayer()                            
                            specularCreateRenderLayer()
                            refletedCreateRenderLayer()
                            refractionCreateRenderLayer()
                            aoCreateRenderLayer()                    
                            fgaoCreateRenderLayer()
                            facingCreateRenderLayer()
                            incidenceCreateRenderLayer()
                            lineCreateRenderLayer()
                            zlineCreateRenderLayer()
                            zDepthCreateRenderLayer()
                            shadowCreateRenderLayer()                            
                            normalCreateRenderLayer()                                   
                            maskCreateRenderLayer()        
                            threeColorCreateRenderLayer()                              
                            motionVectorCreateRenderLayer()
                            hdrCreateRenderLayer()                            
                            toonlCreateRenderLayer()                            
                       
                            arnoldAOCreateRenderLayer()
                            rsAORenderLayer()
                            
                            #specularCreateRenderLayerPass()
                            #InormalCreateRenderLayer() 
                            #aozCreateRenderLayer()
                             
                            mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "0";')
                            mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')                                                          
                            print 'Done!'
                         
                        else:
                            max.confirmDialog(t="Prompt",m='Please cheak the name of camera! \nFor example:" shot_001 \nFor example:" main_camera"',b="OK")

def txtFieldChange(*arg):
    prefix = max.textFieldGrp("txtField",q=1,text=True)
    if len(prefix)==0:
        max.textFieldGrp("txtField",e=1,tx='shot_000')
       
def tNumChange(*arg):
    trackNumber = max.textFieldGrp("tNum",q=1,text=True)
    if len(trackNumber)==0:
        max.textFieldGrp("tNum",e=1,tx='Track_000')
               
def batchRendergo(*arg):
    max.BatchRenderOptions()      
   
def cancelBatchRender(*arg):
    max.CancelBatchRender()      
   
def batchRenderCommand(*arg):
    #cameraNmae=max.camera(n='Sc*')
    #sccam=max.ls(type=cameraNmae)
    #if sccam==0:
       #max.confirmDialog (t ="eorre", m= "Please cheak Camera Name" ,b='OK')
    imagesWidth = max.textFieldGrp('wh',q=1,text=True)      
    imagesHight = max.textFieldGrp('hh',q=1,text=True)
    imagesSF = max.textFieldGrp('sf',q=1,text=True)      
    imagesEF = max.textFieldGrp('ef',q=1,text=True)    
    scpath = max.file(sn=True,q=True)
    print scpath
    sctmp = scpath.split('scenes/')    
    print sctmp
    pan = max.getPanel(wf=1)
    print pan
    panName = max.modelPanel(pan,q=1,camera=1)
    print panName
    if len(scpath)==0:
       max.confirmDialog (t ="eorre", m= "Please cheak the project path of file!\nFor example:\nD:/works/TV/scenes/car/car.mb" ,b='OK')
      # if len(sctmp)==0:
          #max.confirmDialog (t ="eorre", m= "Please cheak the project path of file!\nFor example:\nD:/works/TV/scenes/car/car.mb" ,b='OK')
         # if len(panName)==0:
            # max.confirmDialog (t ="eorre", m= "Please cheak the current camera!\nFor example:\camera1" ,b='OK')    
    else:
         print("Render -proj "+ '"'+sctmp[0]+'"'+" -r mr -fnc 7 -pad 3 -x "+ imagesWidth + ' -y '+ imagesHight +' -s ' + imagesSF + ' -e '+ imagesEF + ' -cam '+panName +' scenes/'+ sctmp[-1]),
   
    #cameras = max.ls(sl=True)  #,type='camera'
    #if len(cameras)==0:
       #max.confirmDialog (t ="eorre", m= "Please select camera" ,b='OK')
       #print ('Please select camera'),
    #else:  
        #print("render13 -proj "+ '"'+sctmp[0]+'"'+" -r mr -fnc 7 -pad 3 -x " + imagesWidth + '-y '+ imagesHight +' -s ' + imagesSF + ' -e '+ imagesEF+ ' -cam '+cameras[0]+ ' ' + sctmp[1]),

def imageWHSE(*arg):    
    imagesWidth =int(max.textFieldGrp('wh',q=1,text=True))      
    imagesHight =int(max.textFieldGrp('hh',q=1,text=True))
    imagesSF =int(max.textFieldGrp('sf',q=1,text=True))      
    imagesEF =int(max.textFieldGrp('ef',q=1,text=True))
    max.setAttr('defaultResolution.width',imagesWidth)
    max.setAttr('defaultResolution.height',imagesHight)
    max.setAttr('defaultRenderGlobals.startFrame',imagesSF)
    max.setAttr('defaultRenderGlobals.endFrame',imagesEF)

def imageWidth(*arg):    
    imagesWidth =int(max.textFieldGrp('wh',q=1,text=True))
    max.setAttr('defaultResolution.width',imagesWidth)

def imageHight(*arg):    
    imagesHight =int(max.textFieldGrp('hh',q=1,text=True))
    max.setAttr('defaultResolution.height',imagesHight)

def SF(*arg):
    imagesSF =int(max.textFieldGrp('sf',q=1,text=True))
    max.setAttr('defaultRenderGlobals.startFrame',imagesSF)
   
def EF(*arg):
    imagesEF =int(max.textFieldGrp('ef',q=1,text=True))
    max.setAttr('defaultRenderGlobals.endFrame',imagesEF)
       
def loadMentalRayPlugin(*arg):
    mel.eval("unifiedRenderGlobalsWindow;")  
    name='Mayatomr'
    if not max.pluginInfo(name,q=1,loaded=1):
        max.loadPlugin(name)
        max.pluginInfo(name,edit=1,autoload=1)
        max.setAttr('defaultRenderGlobals.currentRenderer')
    max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')        
    print('loaded MentalRay Plugin!'),  
   
def loadArnoldPlugin(*arg): 
    mel.eval("unifiedRenderGlobalsWindow;")   
    name='mtoa'
    if not max.pluginInfo(name,q=1,loaded=1):
        max.loadPlugin(name)
        max.pluginInfo(name,edit=1,autoload=1)
        max.setAttr('defaultRenderGlobals.currentRenderer')
    max.setAttr('defaultRenderGlobals.ren','arnold',type='string')          
    print('loaded Arnold Plugin!'), 
    
def loadsrPlugin(*arg):
    mel.eval("unifiedRenderGlobalsWindow;")   
    name='redshift4maya'
    if not max.pluginInfo(name,q=1,loaded=1):
        max.loadPlugin(name)
        max.pluginInfo(name,edit=1,autoload=1)
        max.setAttr('defaultRenderGlobals.currentRenderer')
    max.setAttr('defaultRenderGlobals.ren','redshift',type='string')        
    print('loaded redshift Plugin!'),       

def Frender(*arg):
    #path = max.textFieldGrp ('RP',q=1,tx=True)
    start = int(max.textFieldGrp('sf',q=1,tx=True))
    end = int(max.textFieldGrp('ef',q=1,tx=True))
    formatA = max.optionMenuGrp('pFormat',q=1,v=1)
    #camList = max.optionMenuGrp('camlist',q=1,v=1)
    
    if formatA=="PNG":
        formatB="png"  
    if formatA=="JEPG":
        formatB="jepg"        
    if formatA=="Tiff":
        formatB="tiff"  
    if formatA=="Targa":
        formatB="tga"     
    if formatA=="OpenEXR":
        formatB="exr"   
        
    Frender = max.fileDialog2(fm=4,cap="Select some file",dialogStyle=2,okc="Open")
    print Frender
    if len(Frender) == 0:
        max.confirmDialog (t ="Prompt", m= "Please select a file!" ,b='OK')
    else:     
        path = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
        print path
        if len(path) == 0:
            max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')
    
        for x in Frender:
            print x
            filePath = str(x)
            print filePath
            max.file(filePath,f=1,open=True)
            print "file is open!"
            #workPass
            mel.eval("displayStyle -wireframe;")
            locator = max.ls(type = "locator")
            print locator
            for k in locator:
                max.setAttr (k+".visibility" ,0)              
           
            objtransform = max.ls(type = "mesh")
            for k in objtransform:
                print k
                max.setAttr(k+".displaySmoothMesh",2)
           
            max.select(cl=1)
            cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
            print cam
            camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
            print camB
            camC = camB[0].split(":")
            camA = camC[-1]
            print camA
                                 
            if camA == 0:
               max.confirmDialog (t ="Prompt", m= "Please cheak camera!" ,b='OK') 
            else:               
                LR = max.ls(type="renderLayer")  
                for x in LR:
                    name = x  
                    print name                        
                    numA = max.getAttr(x+".renderable")
                    if numA==1: 
                        for i in range(start,end+1):
                            print i
                            mel.eval("displayStyle -wireframe;")                                    
                             
                            #Get file Name
                            fileNameA = max.file(q=1,sceneName=1)
                            print fileNameA
                            fileNameB = fileNameA.split(".")
                            print fileNameB
                            fileNameC = fileNameB[0].split("/")
                            print fileNameC[-1]
                            fileName = fileNameC[-1]
                            print fileName
                            #Get images save path
                            newPath = os.path.join(path[0],fileName,name)
                            print newPath
                            s = int(max.currentTime(i)) 
                            
                            if not os.path.isdir(newPath):    
                                os.makedirs(newPath)
                            pathB = '"%s/%s/%s/%s_%s.%s"'%(path[0],fileName,name,name,s,formatB)
                            print pathB    
                            File = mel.eval('file -q -ex %s;'%pathB)
                            print File
                            if File==True:
                                mel.eval('sysFile -del %s;'%pathB)                          
                            #select renderlayer 
                            layer = max.editRenderLayerGlobals( currentRenderLayer=name )                                                                                                                                                                                                    
                                    
                            max.setAttr("miDefaultOptions.miRenderUsing",2)         
                            mel.eval('setTestResolutionVar(1);')         
                            mel.eval("displayStyle -wireframe;")      
                            max.RenderViewWindow()                                
                            mel.eval('renderWindowRenderCamera("render","renderView","%s");'%(camA))
                            #print ("%s/%s/%s_%s" "%s"%(path[0],fileName,name,s,formatB)),
                            allPath = "%s/%s/%s/%s_%s"%(path[0],fileName,name,name,s)
                            #print allPath
                            mel.eval('renderWindowSaveImageCallback "renderView" "%s/%s/%s/%s_%s" "%s";'%(path[0],fileName,name,name,s,formatA))
                            print ('Complete: %d/%d , Save path:"%s/%s/%s/%s_%s.%s"\n'%(i,end,path[0],fileName,name,name,s,formatB)),
                            mel.eval("displayStyle -wireframe;") 
  
            max.file (force=True, new=True )                        
            print ('Batch render view is complete!'),                

def CMD_Batch_Render(*arg):
    refFiles = max.fileDialog2 (fm=4,cap="Select Files to import")
    if len(refFiles) == 0:
        max.warning (l="No File to Import")
    else:
        result =max.promptDialog(
                            title='Suffix Name',
                    		message='Enter number:',
                    		button=['OK', 'Cancel'],
                    		defaultButton='OK',
                    		cancelButton='Cancel',
                    		dismissString='Cancel')
        #print refFiles
        #print result
    
    nx = max.promptDialog (q=1 ,tx=1)
    #print nx
    NPF = r'D:\Batch_render_file_%s.bat'%nx
    #print NPF
    os.system(r"touch %s"%NPF)
    f = open(NPF,'w')##w coverage /r read only /a additional
    f.write('')
    
    for i in refFiles:
        #print i
        #secensName1 = i.split("scenes/")
        #print secensName1
        #headPath = str(secensName1[0])    
        #print headPath
        complatePath = str(i)
        #print complatePath
        #path =  'Render -proj "%s" %s'%(headPath,complatePath)
        path =  'Render %s'%(complatePath)
        #print path
        f = open(NPF,'a')##w coverage /r read only /a additional
        f.write('%s\r\n'%path)
        f.close()   
    print "File of bat is complate! Please go to run the file! " 
    
    os.system('start %s'%NPF) 
    TimeOffWindows()
   
def renderLayerSetGlobals(*arg):
    #mel.eval("unifiedRenderGlobalsWindow;")
    max.RenderGlobalsWindow()
    max.currentUnit(time='pal')
    imagesWidth =int(max.textFieldGrp('wh',q=1,text=True))      
    imagesHight =int(max.textFieldGrp('hh',q=1,text=True))
    imagesSF =int(max.textFieldGrp('sf',q=1,text=True))      
    imagesEF =int(max.textFieldGrp('ef',q=1,text=True))
    max.select(cl=True)      
    max.setAttr('defaultResolution.width',imagesWidth)
    max.setAttr('defaultResolution.height',imagesHight)
    max.setAttr('defaultRenderGlobals.startFrame',imagesSF)
    max.setAttr('defaultRenderGlobals.endFrame',imagesEF)
    max.setAttr('defaultResolution.deviceAspectRatio',1.777)
    max.setAttr('defaultResolution.pixelAspect',1)
    #max.setAttr("miDefaultFramebuffer.datatype",2)
    max.setAttr("defaultRenderLayer.renderable", 0)
    max.setAttr("frontShape.renderable",0)
    max.setAttr("perspShape.renderable",0)
    max.setAttr("sideShape.renderable",0)
    max.setAttr("topShape.renderable",0)
    max.setAttr("defaultRenderGlobals.modifyExtension",0)
    mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "0";')
    mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')   
   
def renderLayerSetGlobals_arnold(*arg):
    max.currentUnit(time='pal')
    imagesWidth =int(max.textFieldGrp('wh',q=1,text=True))      
    imagesHight =int(max.textFieldGrp('hh',q=1,text=True))
    imagesSF =int(max.textFieldGrp('sf',q=1,text=True))      
    imagesEF =int(max.textFieldGrp('ef',q=1,text=True))
    max.select(cl=True)      
    max.setAttr('defaultResolution.width',imagesWidth)
    max.setAttr('defaultResolution.height',imagesHight)
    max.setAttr('defaultRenderGlobals.startFrame',imagesSF)
    max.setAttr('defaultRenderGlobals.endFrame',imagesEF)
    max.setAttr('defaultResolution.deviceAspectRatio',1.777)
    max.setAttr('defaultResolution.pixelAspect',1)
    max.setAttr("defaultRenderLayer.renderable", 0)
    max.setAttr("frontShape.renderable",0)
    max.setAttr("perspShape.renderable",0)
    max.setAttr("sideShape.renderable",0)
    max.setAttr("topShape.renderable",0)
    max.setAttr("defaultRenderGlobals.modifyExtension",0)
   
def setCamera(*arg):  
    max.select(cl=1)
    pan = max.getPanel(wf=1)
    print pan
    panName = max.modelPanel(pan,q=1,camera=1)
    print panName
    camShape=max.listRelatives(panName)
    print camShape[0]
    max.setAttr(camShape[0]+".renderable",1)    
    max.setAttr(camShape[0]+".backgroundColor",0,0,0,type='double3')
    max.setAttr(panName+".tx",lock=True)
    max.setAttr(panName+".ty",lock=True)
    max.setAttr(panName+".tz",lock=True)
    max.setAttr(panName+".rx",lock=True)
    max.setAttr(panName+".ry",lock=True)
    max.setAttr(panName+".rz",lock=True)
    max.setAttr(panName+".sx",lock=True)
    max.setAttr(panName+".sy",lock=True)
    max.setAttr(panName+".sz",lock=True)
    max.setAttr(panName+".v",lock=True)
 
def sRGB(*arg):
    max.setAttr ("defaultRenderGlobals.colorProfileEnabled", 1)
    max.setAttr ("defaultRenderGlobals.inputColorProfile", 3)
    max.setAttr ("defaultRenderGlobals.outputColorProfile", 3)    
    #mel.eval("setAttr defaultRenderGlobals.colorProfileEnabled 1")
    #mel.eval("setAttr defaultRenderGlobals.inputColorProfile 3")
    #mel.eval("setAttr defaultRenderGlobals.outputColorProfile 3")
    mel.eval("updateCommonColorProfile();")   
    #linear
    #max.setAttr("defaultRenderGlobals.colorProfileEnabled",1)
    #max.setAttr("defaultRenderGlobals.inputColorProfile",2)
    #max.setAttr("defaultRenderGlobals.outputColorProfile",2)

def preSet(*arg):       
    mel.eval("displayStyle -wireframe;")
    locator = max.ls(type = "locator")
    print locator
    for k in locator:
        max.setAttr (k+".visibility" ,0)              
   
    objtransform = max.ls(type = "mesh")
    for k in objtransform:
        print k
        max.setAttr(k+".displaySmoothMesh",2)
   
      

def autoGetCam(*arg):    
    cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
    print cam 
    camP = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
    print camP             
    max.setAttr(cam[0]+".renderable",1)
    max.setAttr("perspShape.renderable",0)
    max.setAttr("frontShape.renderable",0)
    max.setAttr("sideShape.renderable",0)
    max.setAttr("topShape.renderable",0)
    max.setAttr(cam[0]+".backgroundColor",0,0,0,type='double3')
    #max.setAttr(camP[0]+".tx",lock=True)
    #max.setAttr(camP[0]+".ty",lock=True)
    #max.setAttr(camP[0]+".tz",lock=True)
    #max.setAttr(camP[0]+".rx",lock=True)
    #max.setAttr(camP[0]+".ry",lock=True)
    #max.setAttr(camP[0]+".rz",lock=True)
    #max.setAttr(camP[0]+".sx",lock=True)
    #max.setAttr(camP[0]+".sy",lock=True)
    #max.setAttr(camP[0]+".sz",lock=True)
    #max.setAttr(camP[0]+".v",lock=True)

def autoGetTime(*arg):  
    #set time
    timeNow = max.currentTime(q=1)
    print timeNow
    minTime = max.playbackOptions (q=1,minTime=1)
    print int(minTime)
    maxTime = max.playbackOptions (q=1,maxTime=1)
    print int(maxTime)
    max.setAttr ("defaultRenderGlobals.startFrame", int(minTime))
    max.setAttr ("defaultRenderGlobals.endFrame", int(maxTime))
   
   
def removeSky(*arg):   
    skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
    print skySel  
    if len(skySel)==1:             
        max.select(skySel[0])
        whatLocator = max.pickWalk (d = "up")
        print whatLocator
        #if whatLocator[0] == "sky":
        #    pass
        #else :  
        #    max.select(skySel[0])  
        #    max.parent(w=1)                             
       
        if len(skySel)==1:
            max.select(skySel[0])                             
            max.setAttr(skySel[0]+".visibility", 0)
            max.select(cl=True) 


def colorCreateRenderLayerA(*arg): #\\\\____________________________________________________________________________________________________________________________________________________________                                        
    if max.iconTextCheckBox('colorcx',q=True,v=True):
        Date=max.date(f='MMDD')
        #create Color RenderPass Of RenderLayer___________________________________________________________________________
        max.select(objSelRender)                
        Prefix=max.textFieldGrp("txtField",q=1,text=True)
        colorLayer = max.createRenderLayer(name=Prefix+"_Color_01",mc=True,nr=True)
        #setRenderLayer
       
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=colorLayer)              
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>\<RenderPass>',type='string')
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\Track_01\<Camera>\<RenderLayer>\<RenderLayer>\<RenderPass>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFormat",layer=colorLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miRenderQualityMenu',edit=1,sl=11)  
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)        
       
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=colorLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=colorLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=colorLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=colorLayer)    
        #max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=colorLayer)
        max.setAttr('miDefaultOptions.minSamples',0)
       
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=colorLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
       
        max.createNode('renderPass',n='diffNoSd')
        max.setRenderPassType('diffNoSd',t='DIFFNS')
        max.setAttr('diffNoSd.numChannels',4)
        max.connectAttr (colorLayer+'.renderPass','diffNoSd.owner',nextAvailable=True)
               
        max.createNode('renderPass',n='diffMat')
        max.setRenderPassType('diffMat',t='DIFRAW')
        max.setAttr('diffMat.numChannels',4)
        max.setAttr('diffMat.useTransparency',1)
        max.setAttr('diffMat.transparentAttenuation',1)
        max.connectAttr (colorLayer+'.renderPass','diffMat.owner',nextAvailable=True)
       
        max.createNode('renderPass',n='Shadow')
        max.setRenderPassType('Shadow',t='SHD')
        max.setAttr('Shadow.numChannels',4)
        max.connectAttr (colorLayer+'.renderPass','Shadow.owner',nextAvailable=True)                        
        max.select(cl=True)
       
        #createLight
        colorLightName ="color_Light_"+ Prefix +"_01"
        max.editRenderLayerGlobals(crl=colorLayer)
        max.CreateAmbientLight()
        max.ambientLight( e=True, intensity=1,sc=[0,0,0],rs=0,rgb=[1,1,1],n=colorLightName,ambientShade=0)
        ambientLights02 = max.ls(type='ambientLight')
        max.select(cl=True)
        max.select(ambientLights02)        
        max.editRenderLayerMembers(colorLayer, nr=True)
        max.select(cl=True)

def colorCreateRenderLayer(*arg): #____________________________________________________________________________________________________________________________________________________________        
    if max.iconTextCheckBox('colorcx',q=True,v=True):
        Date=max.date(f='MMDD')
        #create DiffMat RenderLayer_________________________________________________________
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        #Prefix=max.textFieldGrp("txtField",q=1,text=True)
        #Prefix=max.optionMenuGrp("txtField",q=1,)
        global diffmatLayer
        diffmatLayer = max.createRenderLayer(name=Prefix+"_DiffMat_01",mc=True,nr=True)
        #setRenderLayer
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
        max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')
        #max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFilePrefix",layer=diffmatLayer)                
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')        
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=diffmatLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)       
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=diffmatLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.setAttr("miDefaultOptions.miRenderUsing",2)                
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=diffmatLayer)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=diffmatLayer)         
        max.setAttr('miDefaultOptions.maxSamples',2) 
        max.setAttr('miDefaultOptions.minSamples',0)      
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=diffmatLayer)
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=diffmatLayer)
        #max.setAttr("miDefaultOptions.miRenderUsing",2)
        ##max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=diffmatLayer)
        ##max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)        
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=diffmatLayer) 
        max.setAttr('miDefaultOptions.minSamples',0)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=diffmatLayer)  
        #max.setAttr('miDefaultOptions.maxSamples',2) 
               
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=diffmatLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=diffmatLayer)
        max.setAttr('miDefaultOptions.rayTracing',0)        
        max.setAttr("miDefaultFramebuffer.datatype",2)
                
        EGeyeX = []
        EGeyes = max.ls("*Leye_G*","*Reye_G*","*:*Leye_G*","*:*Reye_G*","*LEye_G*","*REye_G*","*:*LEye_G*","*:*REye_G*","*:*LEye*","*:*REye*","*LEye*","*REye*",type="transform") #s=1,o=1,dag=1,
        #print EGeyes
        for r in EGeyes:
            mat = max.ls(r,s=1,o=1,dag=1)
            shadingGrps = max.listConnections(mat,type="shadingEngine")
            #print shadingGrps
            sdg = max.listConnections(shadingGrps[0])
            shadersMask = max.ls(sdg,materials=1)
            EGeyeX.append(shadersMask[0])
            #print EGeyeX
            
            shaderA = max.ls(EGeyeX)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type = "phong" and "lambert" )
            #print selShader
            
            for w in selShader:
                print w
                NshadingGrps = max.listConnections(w,type="file")
                print NshadingGrps
                if NshadingGrps > 0:
                    max.editRenderLayerAdjustment (NshadingGrps[0]+".alphaIsLuminance")
                    max.setAttr(NshadingGrps[0]+".alphaIsLuminance",0)   
        print ('alphaIsLuminance is 0'),
        
        DF_add_shadows()

        #createLight
        #diffmatLightName ="DF_Light_"+ Prefix +"_01"
        #max.editRenderLayerGlobals(crl=diffmatLayer)
        #max.CreateAmbientLight()
        #max.ambientLight( e=True, intensity=1,sc=[0,0,0],rs=0,rgb=[1,1,1],n=diffmatLightName,ambientShade=0)
        #ambientLights = max.ls(type='ambientLight')
        #max.select(cl=True)
        #max.select(ambientLights)        
        #max.editRenderLayerMembers(diffmatLayer, nr=True)
        #max.select(cl=True)  
        
        #if max.iconTextCheckBox('zdcx',q=True,v=True):     RENDERPASS NEED MAYA PROJECT!
        #    max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFilePrefix",layer=diffmatLayer)  
        #    max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>',type='string')
        #    max.createNode('renderPass',n='ZDepth')
        #    max.setRenderPassType('ZDepth',t='CAMZ')
        #    max.setAttr('ZDepth.numChannels',4)
        #    max.connectAttr (diffmatLayer+'.renderPass','ZDepth.owner',nextAvailable=True)
           
        #if max.iconTextCheckBox('mvcx',query=True,value=True):
        #    max.createNode('renderPass',n='MotionVector2D')
        #    max.setRenderPassType('MotionVector2D',t='MV2E')
        #    max.setAttr('MotionVector2D.numChannels',4)                      
        #    max.connectAttr ( diffmatLayer+'.renderPass','MotionVector2D.owner',nextAvailable=True)
       
        #if max.iconTextCheckBox('normalcx',q=True,v=True):
        #    max.createNode('renderPass',n='Normal')
        #    max.setRenderPassType('Normal',t='NORMAL')
        #    max.setAttr('Normal.numChannels',4)
        #    max.connectAttr (diffmatLayer+'.renderPass','Normal.owner',nextAvailable=True)
                
       #///////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        #if max.iconTextCheckBox('colorcx',q=True,v=0):     
        #    if max.iconTextCheckBox('zdcx',q=True,v=True):
        #        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFilePrefix",layer=diffmatLayer)  
        #       max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>',type='string')
        #        max.createNode('renderPass',n='ZDepth')
        #        max.setRenderPassType('ZDepth',t='CAMZ')
        #        max.setAttr('ZDepth.numChannels',4)
        #        max.connectAttr ('defaultRenderLayer.renderPass','ZDepth.owner',nextAvailable=True)
        #        mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
        #        mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')
               
        #    if max.iconTextCheckBox('mvcx',query=True,value=True):
        #        max.createNode('renderPass',n='MotionVector2D')
        #        max.setRenderPassType('MotionVector2D',t='MV2E')
        #        max.setAttr('MotionVector2D.numChannels',4)                      
        #        max.connectAttr ( 'defaultRenderLayer.renderPass','MotionVector2D.owner',nextAvailable=True)
        #        mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
        #        mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')
           
        #    if max.iconTextCheckBox('normalcx',q=True,v=True):
        #        max.createNode('renderPass',n='Normal')
        #        max.setRenderPassType('Normal',t='NORMAL')
        #        max.setAttr('Normal.numChannels',4)
        #        max.connectAttr ('defaultRenderLayer.renderPass','Normal.owner',nextAvailable=True) 
        #        mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
        #        mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')      
       
def aoCreateRenderLayer(*arg): #________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('aocx',query=True,value=True):
        Date=max.date(f='MMDD')        
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        global aoLayer
        aoLayer = max.createRenderLayer(name=Prefix+"_AO_01",mc=True,nr=True)
        #setRenderLayer
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=aoLayer)      
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=aoLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=aoLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=aoLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=aoLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=aoLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=aoLayer)          
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=aoLayer)
        max.setAttr('miDefaultOptions.minSamples',0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=aoLayer)
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=aoLayer)
        max.setAttr('miDefaultOptions.rayTracing',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=aoLayer)
        max.setAttr('miDefaultOptions.maxReflectionRays',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=aoLayer)
        max.setAttr('miDefaultOptions.maxRefractionRays',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=aoLayer)
        max.setAttr('miDefaultOptions.maxRayDepth',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=aoLayer)
        max.setAttr('miDefaultOptions.maxShadowRayDepth',1)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #aoMat
        max.select(objSelRender)
        aoMatName = 'AO_'+Prefix+'_01'
        aoMatSG = Prefix+'AOmatSG_01'
        occName = Prefix+'_AOnode_01'
        myAoMat = max.shadingNode('lambert',asShader=True, n = aoMatName)
        myAoMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=aoMatSG)
        max.connectAttr(myAoMat+'.outColor',myAoMatSG+'.surfaceShader')
        max.setAttr(myAoMat+'.color',0,0,0, type="double3")
        max.setAttr(myAoMat+'.diffuse',0)
        max.setAttr(myAoMat+'.ambientColor',1,1,1,type="double3")
        mibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n=occName)
        max.setAttr(mibOcclusion+'.samples',32)#128
        max.setAttr(mibOcclusion+'.max_distance',20)#128
        gammaName = "gammaCorrect_01"
        myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
        max.setAttr (myGamma+".gammaX" ,0.45)
        max.setAttr (myGamma+".gammaY" ,0.45)
        max.setAttr (myGamma+".gammaZ" ,0.45)
        max.connectAttr(mibOcclusion+'.outValue',myGamma+'.value')
        max.connectAttr(myGamma+'.outValue',myAoMat+'.color')
         
        #filter obj
        allShader_mrAO =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_mrAO.append(shadersMask[0])              
            
        #print allShader_mrAO 
        shaderA = max.ls(allShader_mrAO)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader            
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                aoMatName = 'AO_'+Prefix+'_01'
                aoMatSG = Prefix+'AOmatSG_01'
                occName = Prefix+'_AOnode_01'
                myAo_A_Mat = max.shadingNode('lambert',asShader=True, n = aoMatName)
                myAo_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=aoMatSG)
                max.connectAttr(myAo_A_Mat+'.outColor',myAo_A_MatSG+'.surfaceShader')
                max.setAttr(myAo_A_Mat+'.color',0,0,0, type="double3")
                max.setAttr(myAo_A_Mat+'.diffuse',0)
                max.setAttr(myAo_A_Mat+'.ambientColor',1,1,1,type="double3")
                mibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n=occName)
                max.setAttr(mibOcclusion+'.samples',32)#128
                max.setAttr(mibOcclusion+'.max_distance',20)#128
                gammaName = "gammaCorrect_01"
                myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
                max.setAttr (myGamma+".gammaX" ,0.45)
                max.setAttr (myGamma+".gammaY" ,0.45)
                max.setAttr (myGamma+".gammaZ" ,0.45)
                max.connectAttr(mibOcclusion+'.outValue',myGamma+'.value')
                max.connectAttr(myGamma+'.outValue',myAo_A_Mat+'.color')  
                
                aoLayerI = max.shadingNode('layeredShader',asShader=True, n = 'mrAO_alpha_01')
                aoLayerISG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='mrAO_alpha_SG_01')
                max.connectAttr(aoLayerI+'.outColor',aoLayerISG+'.surfaceShader',f=1)
                max.setAttr (aoLayerI+".compositingFlag", 1)
                max.connectAttr( myAo_A_Mat+'.outColor', aoLayerI+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, aoLayerI+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=aoLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = aoLayerISG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=aoLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myAoMatSG)
                max.select(cl=True) 
                
        removeSky()
        MRAo_add_shadows()               

def lineCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________  
    if max.iconTextCheckBox('linecx',query=True,value=True):  
        Date=max.date(f='MMDD')        
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        lineLayer = max.createRenderLayer(name=Prefix+"_Line_01",mc=True,nr=True)
        #setRenderLayer  
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=lineLayer)      
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=lineLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=lineLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('miDefaultFramebuffer.contourSamples',12)
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=lineLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)        
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=lineLayer)          
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=lineLayer)
        max.setAttr('miDefaultOptions.minSamples',0)      
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
       
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=lineLayer)
        max.setAttr("miDefaultOptions.rayTracing",0)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=lineLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",1)
        max.setAttr("miDefaultFramebuffer.contourClearImage",1)
        max.setAttr("miDefaultFramebuffer.contourSamples",12)
        max.setAttr("miDefaultFramebuffer.contourFilter",2)
        max.setAttr("miDefaultOptions.contourBackground",1)
        max.setAttr("miDefaultOptions.contourInstance",1)
        max.setAttr("miDefaultOptions.contourMaterial",1)
        max.setAttr("miDefaultOptions.contourInvNormal",0)
        max.setAttr("miDefaultOptions.enableContourNormal",1)
        max.setAttr("miDefaultOptions.contourNormal",15)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)

        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
        
        #lineMat
        max.select(objSelRender)
        lineMatName = 'Line_'+Prefix+'_01'
        lineMatSG = Prefix+'_lineSG_01'
        lineName = Prefix+'_linenode_01'
        myLineMat = max.shadingNode('lambert',asShader=True, n = lineMatName)
        myLineMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=lineMatSG)
        max.connectAttr(myLineMat+'.outColor',myLineMatSG+'.surfaceShader',f=1)
        max.setAttr(myLineMat+'.color',0,0,0, type="double3")
        max.setAttr(myLineMat+'.diffuse',0)
        max.setAttr(myLineMatSG+'.miContourEnable',1)
        max.setAttr(myLineMatSG+'.miContourColor',0,0,0, type="double3")
        max.setAttr(myLineMatSG+'.miContourWidth',0.6)           
        
         
        #filter obj
        allShader_Line =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_Line.append(shadersMask[0])              
            
        #print allShader_Line 
        shaderA = max.ls(allShader_Line)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=lineLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myLineMatSG)
            max.select(cl=True)             
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects=u)
                SelG = max.ls(sl=1)
                #print SelG
                for l in SelG:
                    max.setAttr(l+".primaryVisibility",0)               
            else:               
                #getMat
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myLineMatSG)
                max.select(cl=True)  

        removeSky()
        line_eye_show()

def zlineCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________  
    if max.iconTextCheckBox('zlinecx',query=True,value=True):  
        Date=max.date(f='MMDD')        
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        lineLayer = max.createRenderLayer(name=Prefix+"_Line_01",mc=True,nr=True)
        #setRenderLayer  
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=lineLayer)      
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=lineLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=lineLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('miDefaultFramebuffer.contourSamples',12)
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=lineLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)        
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=lineLayer)          
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=lineLayer)
        max.setAttr('miDefaultOptions.minSamples',0)      
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
       
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=lineLayer)
        max.setAttr("miDefaultOptions.rayTracing",0)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=lineLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",1)
        max.setAttr("miDefaultFramebuffer.contourClearImage",1)
        max.setAttr("miDefaultFramebuffer.contourSamples",12)
        max.setAttr("miDefaultFramebuffer.contourFilter",2)
        max.setAttr("miDefaultOptions.contourBackground",1)
        max.setAttr("miDefaultOptions.contourInstance",1)
        max.setAttr("miDefaultOptions.contourMaterial",1)
        max.setAttr("miDefaultOptions.contourInvNormal",0)
        max.setAttr("miDefaultOptions.enableContourNormal",1)
        max.setAttr("miDefaultOptions.contourNormal",15)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        
        #line_Depth
        csfName = "contour_store_function_01"
        ccfName = "contour_contrast_function_levels_01"
        csf = max.shadingNode("contour_store_function",asUtility=True,n=csfName)        
        ccf = max.shadingNode("contour_contrast_function_levels",asUtility=True,n=ccfName)
        max.setAttr(ccf+".zdelta",2)
        max.setAttr(ccf+".ndelta",15)
        max.setAttr(ccf+".diff_index",0)
        max.setAttr(ccf+".contrast",1)
        max.defaultNavigation(connectToExisting=True, source = csf, destination='miDefaultOptions.contourStore')
        max.defaultNavigation(connectToExisting=True, source = ccf, destination='miDefaultOptions.contourContrast')

        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
        
        #lineMat
        max.select(objSelRender)
        lineMatName = 'Line_'+Prefix+'_01'
        lineMatSG = Prefix+'_lineSG_01'
        lineName = Prefix+'_linenode_01'
        myLineMat = max.shadingNode('lambert',asShader=True, n = lineMatName)
        myLineMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=lineMatSG)
        max.connectAttr(myLineMat+'.outColor',myLineMatSG+'.surfaceShader',f=1)
        max.setAttr(myLineMat+'.color',0,0,0, type="double3")
        max.setAttr(myLineMat+'.diffuse',0)
        max.setAttr(myLineMatSG+'.miContourEnable',1)
        max.setAttr(myLineMatSG+'.miContourColor',0,0,0, type="double3")
        max.setAttr(myLineMatSG+'.miContourWidth',0.6)
        
        #line_Depth        
        csdName = "contour_shader_depthfade_01"
        csd = max.shadingNode("contour_shader_depthfade",asUtility=True,n=csfName)
        max.setAttr(csd+".near_color",0,0,0,type = "double3")
        max.setAttr(csd+".far_color",0,0,0,type = "double3")
        max.setAttr(csd+".far_z",-500)
        max.setAttr(csd+".near_width",0.045)
        max.setAttr(csd+".far_width",0.025) 
        max.connectAttr (csd+".outValue", myLineMatSG+".miContourShader",f=1)              
        
        #getMat
        max.editRenderLayerGlobals(crl=lineLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myLineMatSG)
        max.hyperShade(assign=myLineMatSG)
        max.select(cl=True)
        removeSky()
               
def facingCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('facingcx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        facingLayer = max.createRenderLayer(name=Prefix+"_Facing_01",mc=True,nr=True)
        #setRenderLayer
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=facingLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')                
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=facingLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=facingLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=facingLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
          
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=facingLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=facingLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)        
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=facingLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=facingLayer)  
        max.setAttr('miDefaultOptions.minSamples',0)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=facingLayer)
        max.setAttr('miDefaultOptions.rayTracing',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #facingMat
        max.select(objSelRender)
        facingMatName = 'Facing_'+Prefix+'_01'
        facingMatSG = Prefix+'_FacingSG_01'
        facingName = Prefix+'_facingnode_01'
        myFacingMat = max.shadingNode('lambert',asShader=True, n = facingMatName)
        myFacingMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=facingMatSG)
        max.connectAttr(myFacingMat+'.outColor',myFacingMatSG+'.surfaceShader',f=1)
        max.setAttr(myFacingMat+'.diffuse',0)
        max.setAttr(myFacingMat+'.ambientColor',1,1,1,type="double3")
        fc_sp = max.shadingNode('samplerInfo',au=1,n='fc_sp_01')
        fc_P2dt = max.shadingNode('place2dTexture',au=1,n='fc_P2dt_01')
        fc_Ramp = max.shadingNode('ramp',at=1,n='fc_Ramp_01')
        max.connectAttr( fc_sp+'.facingRatio', fc_Ramp+'.vCoord',f=1)
        max.connectAttr( fc_P2dt+'.outUV', fc_Ramp+'.uvCoord',f=1)
        max.connectAttr( fc_P2dt+'.outUvFilterSize', fc_Ramp+'.uvFilterSize',f=1)
        max.removeMultiInstance(fc_Ramp+'.colorEntryList[2]',b=True)
        max.setAttr(fc_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
        max.setAttr(fc_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
        max.setAttr(fc_Ramp+'.interpolation',1)
        max.setAttr(fc_Ramp+'.colorEntryList[1].position',0)
        max.setAttr(fc_Ramp+'.colorEntryList[0].position',1)
        max.connectAttr(fc_Ramp+'.outColor', myFacingMat+'.color',f=1)
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)            
        
        #filter obj
        allShader_FC =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_FC.append(shadersMask[0])              
            
        #print allShader_FC 
        shaderA = max.ls(allShader_FC)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader  
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=facingLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myFacingMatSG)
            max.select(cl=True)           
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                facingMatName = 'Facing_'+Prefix+'_01'
                facingMatSG = Prefix+'_FacingSG_01'
                facingName = Prefix+'_facingnode_01'
                myFacing_A_Mat = max.shadingNode('lambert',asShader=True, n = facingMatName)
                myFacing_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=facingMatSG)
                max.connectAttr(myFacing_A_Mat+'.outColor',myFacing_A_MatSG+'.surfaceShader',f=1)
                max.setAttr(myFacing_A_Mat+'.diffuse',0)
                max.setAttr(myFacing_A_Mat+'.ambientColor',1,1,1,type="double3")
                fc_sp = max.shadingNode('samplerInfo',au=1,n='fc_sp_01')
                fc_P2dt = max.shadingNode('place2dTexture',au=1,n='fc_P2dt_01')
                fc_Ramp = max.shadingNode('ramp',at=1,n='fc_Ramp_01')
                max.connectAttr( fc_sp+'.facingRatio', fc_Ramp+'.vCoord',f=1)
                max.connectAttr( fc_P2dt+'.outUV', fc_Ramp+'.uvCoord',f=1)
                max.connectAttr( fc_P2dt+'.outUvFilterSize', fc_Ramp+'.uvFilterSize',f=1)
                max.removeMultiInstance(fc_Ramp+'.colorEntryList[2]',b=True)
                max.setAttr(fc_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(fc_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(fc_Ramp+'.interpolation',1)
                max.setAttr(fc_Ramp+'.colorEntryList[1].position',0)
                max.setAttr(fc_Ramp+'.colorEntryList[0].position',1)
                max.connectAttr(fc_Ramp+'.outColor', myFacing_A_Mat+'.color',f=1) 
                
                layeredShaderG = max.shadingNode('layeredShader',asShader=True, n = 'Facing_alpha_01')
                layeredShaderGSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Facing_alpha_SG_01')
                max.connectAttr(layeredShaderG+'.outColor',layeredShaderGSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderG+".compositingFlag", 1)
                max.connectAttr( myFacing_A_Mat+'.outColor', layeredShaderG+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderG+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=facingLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderGSG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=facingLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myFacingMatSG)
                max.select(cl=True)
        
        removeSky()
        
def incidenceCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('incidencecx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        incidenceLayer = max.createRenderLayer(name=Prefix+"_incidence_01",mc=True,nr=True)
        #setRenderLayer
        
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=incidenceLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')                
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=incidenceLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFormat",layer=incidenceLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=incidenceLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
         
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=incidenceLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=incidenceLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)         
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=incidenceLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=incidenceLayer)  
        max.setAttr('miDefaultOptions.minSamples',0)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=incidenceLayer)
        max.setAttr('miDefaultOptions.rayTracing',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #incidenceMat
        max.select(objSelRender)
        incidenceMatName = 'incidence_'+Prefix+'_01'
        incidenceMatSG = Prefix+'_incidenceSG_01'
        incidenceName = Prefix+'_incidencenode_01'
        myincidenceMat = max.shadingNode('rampShader',asShader=True, n = incidenceMatName)
        myincidenceMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=incidenceMatSG)
        max.connectAttr(myincidenceMat+'.outColor',myincidenceMatSG+'.surfaceShader',f=1)
        
        max.setAttr(myincidenceMat+'.color[0].color_Color',0,0,0,type="double3")
        max.setAttr (myincidenceMat+'.incandescence[1].incandescence_Color',1 ,1 ,1,type='double3')
        max.setAttr (myincidenceMat+'.incandescence[1].incandescence_Position', 1)
        max.setAttr (myincidenceMat+'.incandescence[1].incandescence_Interp', 1)
        max.setAttr (myincidenceMat+'.reflectivity[0].reflectivity_Position', 0)
        max.setAttr (myincidenceMat+'.reflectivity[0].reflectivity_FloatValue', 0)
        max.setAttr (myincidenceMat+'.incandescence[0].incandescence_Position', 0.30)
        max.setAttr (myincidenceMat+'.colorInput', 1)                       
         
        #filter obj
        allShader_inFC =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_inFC.append(shadersMask[0])              
            
        #print allShader_inFC 
        shaderA = max.ls(allShader_inFC)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader            
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                incidenceMatName = 'incidence_'+Prefix+'_01'
                incidenceMatSG = Prefix+'_incidenceSG_01'
                incidenceName = Prefix+'_incidencenode_01'
                myincidence_A_Mat = max.shadingNode('rampShader',asShader=True, n = incidenceMatName)
                myincidence_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=incidenceMatSG)
                max.connectAttr(myincidence_A_Mat+'.outColor',myincidence_A_MatSG+'.surfaceShader',f=1)        
                max.setAttr(myincidence_A_Mat+'.color[0].color_Color',0,0,0,type="double3")
                max.setAttr (myincidence_A_Mat+'.incandescence[1].incandescence_Color',1 ,1 ,1,type='double3')
                max.setAttr (myincidence_A_Mat+'.incandescence[1].incandescence_Position', 1)
                max.setAttr (myincidence_A_Mat+'.incandescence[1].incandescence_Interp', 1)
                max.setAttr (myincidence_A_Mat+'.reflectivity[0].reflectivity_Position', 0)
                max.setAttr (myincidence_A_Mat+'.reflectivity[0].reflectivity_FloatValue', 0)
                max.setAttr (myincidence_A_Mat+'.incandescence[0].incandescence_Position', 0.30)
                max.setAttr (myincidence_A_Mat+'.colorInput', 1)   
                
                incidenceLayerI = max.shadingNode('layeredShader',asShader=True, n = 'incidence_alpha_01')
                incidenceLayerISG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='incidence_alpha_SG_01')
                max.connectAttr(incidenceLayerI+'.outColor',incidenceLayerISG+'.surfaceShader',f=1)
                max.setAttr (incidenceLayerI+".compositingFlag", 1)
                max.connectAttr( myincidence_A_Mat+'.outColor', incidenceLayerI+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, incidenceLayerI+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=incidenceLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = incidenceLayerISG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=incidenceLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myincidenceMatSG)
                max.select(cl=True) 
        removeSky()  
       
def toonlCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________            
    if max.iconTextCheckBox('toonlcx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        global toonlLayer
        toonlLayer = max.createRenderLayer(name=Prefix+"_ToonL_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=toonlLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer              
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=toonlLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=toonlLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=toonlLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=toonlLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)        
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=toonlLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=toonlLayer)          
        max.setAttr('miDefaultOptions.minSamples',0)
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=toonlLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=toonlLayer)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=toonlLayer)
        max.setAttr('miDefaultOptions.rayTracing',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=toonlLayer)
        max.setAttr('miDefaultOptions.maxReflectionRays',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=toonlLayer)
        max.setAttr('miDefaultOptions.maxRefractionRays',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=toonlLayer)
        max.setAttr('miDefaultOptions.maxRayDepth',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=toonlLayer)
        max.setAttr('miDefaultOptions.maxShadowRayDepth',1)
        max.setAttr("miDefaultFramebuffer.datatype",2) 
                   
        #toonlMat
        max.select(objSelRender)
        toonlMatName = 'ToonL_'+Prefix+'_01'
        toonlMatSG = Prefix+'_ToonLSG_01'
        toonlName = Prefix+'_toonlnode_01'
        myToonlMat = max.shadingNode('lambert',asShader=True, n = toonlMatName)
        myToonlMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=toonlMatSG)
        max.connectAttr(myToonlMat+'.outColor',myToonlMatSG+'.surfaceShader',f=1)
        max.setAttr(myToonlMat+'.diffuse',0)
        max.setAttr(myToonlMat+'.ambientColor',1,1,1,type="double3")
        ToonLsurflm = max.shadingNode('surfaceLuminance',au=1,n='ToonLsurflm')
        ToonLP2dt = max.shadingNode('place2dTexture',au=1,n='ToonLP2dt')
        ToonLRamp = max.shadingNode('ramp',at=1,n='ToonLRamp')
        max.connectAttr( ToonLP2dt+'.outUV', ToonLRamp+'.uv',f=1)
        max.connectAttr( ToonLP2dt+'.outUvFilterSize', ToonLRamp+'.uvFilterSize',f=1)
        TLClamp = max.shadingNode('clamp',au=1,n='TLClamp')
        max.setAttr(TLClamp+'.maxR',1)
        max.connectAttr(ToonLsurflm+'.outValue', TLClamp+'.inputR',f=1)
        max.connectAttr( TLClamp+'.outputR', ToonLRamp+'.vCoord',f=1)
        max.removeMultiInstance(ToonLRamp+'.colorEntryList[2]',b=True)      
        max.setAttr(ToonLRamp+'.colorEntryList[1].color',1,1,1, type="double3")
        max.setAttr(ToonLRamp+'.colorEntryList[0].color',0,0,0, type="double3")      
        max.setAttr(ToonLRamp+'.interpolation',0)
        max.setAttr(ToonLRamp+'.colorEntryList[1].position',0.2)
        max.connectAttr( ToonLRamp+'.outColor', myToonlMat+'.color',f=1)

        #filter obj
        allShader_TL =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_TL.append(shadersMask[0])              
            
        #print allShader_TL 
        shaderA = max.ls(allShader_TL)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=toonlLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myToonlMatSG)
            max.select(cl=True)             
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                toonlMatName_A = 'ToonL_A_'+Prefix+'_01'
                toonlMat_A_SG = Prefix+'_ToonLSG_A_01'
                toonlName_A = Prefix+'_toonlnode_A_01'
                myToonlMat_A = max.shadingNode('lambert',asShader=True, n = toonlMatName_A)
                myToonlMat_A_SG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=toonlMat_A_SG)
                max.connectAttr(myToonlMat_A+'.outColor',myToonlMat_A_SG+'.surfaceShader',f=1)
                max.setAttr(myToonlMat_A+'.diffuse',0)
                max.setAttr(myToonlMat_A+'.ambientColor',1,1,1,type="double3")
                ToonLsurflm_A = max.shadingNode('surfaceLuminance',au=1,n='ToonLsurflm_A')
                ToonLP2dt_A = max.shadingNode('place2dTexture',au=1,n='ToonLP2dt_A')
                ToonLRamp_A = max.shadingNode('ramp',at=1,n='ToonLRamp_A')
                max.connectAttr( ToonLP2dt_A+'.outUV', ToonLRamp_A+'.uv',f=1)
                max.connectAttr( ToonLP2dt_A+'.outUvFilterSize', ToonLRamp_A+'.uvFilterSize',f=1)
                TLClamp_A = max.shadingNode('clamp',au=1,n='TLClamp_A')
                max.setAttr(TLClamp_A+'.maxR',1)
                max.connectAttr(ToonLsurflm_A+'.outValue', TLClamp_A+'.inputR',f=1)
                max.connectAttr( TLClamp_A+'.outputR', ToonLRamp_A+'.vCoord',f=1)
                max.removeMultiInstance(ToonLRamp_A+'.colorEntryList[2]',b=True)      
                max.setAttr(ToonLRamp_A+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(ToonLRamp_A+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(ToonLRamp_A+'.interpolation',0)
                max.setAttr(ToonLRamp_A+'.colorEntryList[1].position',0.2)
                max.connectAttr( ToonLRamp_A+'.outColor', myToonlMat_A+'.color',f=1)
                
                layeredShaderA = max.shadingNode('layeredShader',asShader=True, n = 'arnoldAO_alpha_01')
                layeredShaderASG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='arnoldAO_alpha_SG_01')
                max.connectAttr(layeredShaderA+'.outColor',layeredShaderASG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderA+".compositingFlag", 1)
                max.connectAttr( myToonlMat_A+'.outColor', layeredShaderA+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.select(u)       
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print transparencyPath
                if transparencyPath!='':
                    max.connectAttr( transparencyPath, layeredShaderA+'.inputs[0].transparency',f=1)
                #give material
                max.editRenderLayerGlobals(crl=toonlLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderASG) 
                SelC = max.pickWalk(d="up")
                #print SelC      
                for obj in SelC:
                    max.setAttr(obj+".aiOpaque",0)
                     
                max.select(cl=True)                              
                print "arnold AO Done!",
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=toonlLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myToonlMatSG)
                max.select(cl=True)             
                print "arnold AO Done!"
                
        mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
        max.select(cl=1)        
        
               
        #createLight
        toonlLightName ="ToonL_light_"+ Prefix +"_01"
        max.editRenderLayerGlobals(crl=toonlLayer)
        max.CreateDirectionalLight()
        toonlLightSet = max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=toonlLightName,rs=1)    

        #max.setAttr (toonlLightSet+".dmapResolution" ,4096)
        #max.setAttr (toonlLightSet+".dmapFilterSize" ,3)        
        ##max.setAttr (toonlLightSet+".rotateX" ,-125)
        ##max.setAttr (toonlLightSet+".scaleX", 3)
        ##max.setAttr (toonlLightSet+".scaleY", 3)
        ##max.setAttr (toonlLightSet+".scaleZ", 3)
        
        directionalLights = max.ls(type='directionalLight')
        max.select(cl=True)
        max.select(directionalLights)        
        max.editRenderLayerMembers(toonlLayer, nr=True)
        max.select(cl=True)          
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
            
        ToonL_remove_shadows()    
        removeSky()
        windowsTLtab()

def ToonL_remove_shadows(*arg):
    LReye = max.ls('*Reye*','*Leye*','*REye*','*LEye*','*:*Reye*','*:*Leye*','*:*REye*','*:*LEye*','*:*:*Reye*','*:*:*Leye*','*:*:*REye*','*:*:*LEye*',type="mesh")
    print len(LReye)
    for r in LReye:
        print r
    
    TLeye = max.ls('ToonL_Eye',type='lambert')
    if len(TLeye)==0: 
        toonlEyeName = 'ToonL_Eye'
        toonlEyeSG = 'ToonL_Eye_SG'
        myToonlEye = max.shadingNode('lambert',asShader=True, n = toonlEyeName)
        myToonlEyeSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=toonlEyeSG)
        max.connectAttr(myToonlEye+'.outColor',myToonlEyeSG+'.surfaceShader',f=1)
        max.setAttr(myToonlEye+'.diffuse',0)
        max.setAttr(myToonlEye+'.color',1,1,1,type="double3")
        max.setAttr(myToonlEye+'.incandescence',1,1,1,type="double3")            
    
    if len(LReye)>=1:    
        max.editRenderLayerGlobals(crl=toonlLayer)
        max.select(cl=True)
        eyes = max.select(LReye)
        max.hyperShade(assign='ToonL_Eye_SG')
        max.select(cl=True) 

        for g in LReye:
            print g  
            max.editRenderLayerAdjustment(g+".receiveShadows",layer=toonlLayer) 
            max.editRenderLayerAdjustment(g+".castsShadows",layer=toonlLayer)  
            max.setAttr (g+".receiveShadows", 1)
            max.setAttr (g+".castsShadows", 1)

def ToonLOrientation(*arg):        
    orientation = max.floatFieldGrp( "orientationN",q=1,v=1)
    print orientation
    max.deleteUI(windowsTL,window=True)
    if orientation[1]>=3.5 and orientation[1]<=8.5:
        max.confirmDialog (t ="Prompt", m= "The Y's value cannot in the range of 3.5-8.5." ,b='OK')
    elif  orientation[1]>=12.1: 
        max.confirmDialog (t ="Prompt", m= "The Y's value cannot more than 12." ,b='OK')
        pass
    else:          
        cam=max.ls("shot"+"*",type="transform")
        if len(cam)==0:
            max.confirmDialog (t ="Prompt", m= "Please cheak the camera and camera's name!" ,b='OK')
        else:    
            print cam[0]    
                      
            Tx = max.getAttr(cam[0]+".translateX") 
            Ty = max.getAttr(cam[0]+".translateY") 
            Tz = max.getAttr(cam[0]+".translateZ") 
            
            Rx = max.getAttr(cam[0]+".rotateX") 
            Ry = max.getAttr(cam[0]+".rotateY") 
            Rz = max.getAttr(cam[0]+".rotateZ") 
            
            #ToonL = max.CreateDirectionalLight()
            #TL = max.directionalLight( e=True, intensity=1,rgb=[1,0,0],n="toonL")
            
            #createLight
            TL = max.ls("ToonL_light_"+"*",type='transform')
            print TL
            if len(TL)==0:
                toonlLightName ="ToonL_light_Custom_01"
                #max.editRenderLayerGlobals(crl=toonlLayer)
                max.CreateDirectionalLight()
                toonlLightSet = max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=toonlLightName,rs=1)                 
            
            TL = max.ls("ToonL_light_"+"*",type='transform')    
            TLC = max.ls("ToonLight"+"*",type='transform')
            print len(TLC)
            x = len(TLC)+1
            max.select(TL[-1])
            TLB = max.rename("ToonLight"+str(x))
            print TLB
            max.setAttr (TLB + ".rotateOrder" ,2)
            #max.setAttr (TL[0]+".translateX",Tx)
            #max.setAttr (TL[0]+".translateY",Ty)
            #max.setAttr (TL[0]+".translateZ",Tz)
            #max.setAttr (TL+".rotateX",Rx)
            max.setAttr (TLB+".rotateY",Ry)
            #max.setAttr (TL+".rotateZ",Rz)
            max.setAttr (TLB+".scaleX",30)
            max.setAttr (TLB+".scaleY",30)
            max.setAttr (TLB+".scaleZ",30)
            
            max.setAttr (TLB+".useRayTraceShadows",1) 
            max.select(TLB)
            max.CenterPivot()
            LG = max.group(n="autoToonL_G_01")
            print LG
            
            max.CenterPivot()    
            
            Ny = float( orientation[0]*(-30)+180)
            if orientation[1]<=3:
                Nx = float(-1*(90-(orientation[1]*(30))))
            if orientation[1]>=9: 
                Nx = float( 360-(90-(orientation[1]*(-30))))
                 
            max.setAttr (LG+".rotateY",Ny) 
            max.setAttr (TLB+".rotateX",Nx)
            
            max.setAttr (LG+".tx",lock=True)
            max.setAttr (LG+".ty",lock=True)
            max.setAttr (LG+".tz",lock=True)
            max.setAttr (LG+".rx",lock=True)
            max.setAttr (LG+".ry",lock=True)
            max.setAttr (LG+".rz",lock=True)
            max.setAttr (LG+".sx",lock=True)
            max.setAttr (LG+".sy",lock=True)
            max.setAttr (LG+".sz",lock=True)
            max.setAttr (LG+".v",lock=True)
            max.setAttr (TLB+".tx",lock=True)
            max.setAttr (TLB+".ty",lock=True)
            max.setAttr (TLB+".tz",lock=True)
            max.setAttr (TLB+".rx",lock=True)
            max.setAttr (TLB+".ry",lock=True)
            max.setAttr (TLB+".rz",lock=True)
            max.setAttr (TLB+".sx",lock=True)
            max.setAttr (TLB+".sy",lock=True)
            max.setAttr (TLB+".sz",lock=True)
            max.setAttr (TLB+".v",lock=True) 
            max.editRenderLayerMembers(toonlLayer,TLB) 

            if  arnoldAOLayer >= 1:  
                max.editRenderLayerMembers(arnoldAOLayer ,LG,remove=True)
    
def windowsTLtab(*arg):
    global windowsTL
    windowsTL = max.window(t='ToonL orientation',mnb =False ,mxb = False,sizeable =0)
    mainLayout=max.columnLayout(w=350,h=300)
    max.text(l='Please enter value of orientation: ',fn='fixedWidthFont')
    max.separator(h=5)
    max.columnLayout(cat=["left",-70])
    n = max.floatFieldGrp( "orientationN",numberOfFields=2, label=' orientation:    ', value1=0, value2=0)
    max.setParent("..")
    max.separator(h=5)
    max.rowColumnLayout( numberOfRows=1 )
    TLok=max.button('winTlOk',l='OK',w=118,command = ToonLOrientation )
    #print TLok
    max.button(l='Cancel',w=118,command=('max.deleteUI(windowsTL,window=True)'))
    max.showWindow(windowsTL)  
       
def zDepthCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________            
    if max.iconTextCheckBox('zdcx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        ZDLayer = max.createRenderLayer(name=Prefix+"_ZDepth_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=ZDLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer              
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=ZDLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=ZDLayer)
        #max.setAttr('defaultRenderGlobals.imageFormat',32)
        RG = pm.PyNode('defaultRenderGlobals')
        RG.setAttr('imageFormat', 51)
        RG.setAttr('imfkey', 'exr')
        mrG = pm.PyNode("mentalrayGlobals")
        mrG.setAttr("imageCompression", 4) 
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=ZDLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=ZDLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=ZDLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=ZDLayer)                  
        max.setAttr('miDefaultOptions.minSamples',0)        
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=ZDLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=ZDLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=ZDLayer)
        max.setAttr('miDefaultOptions.rayTracing',0) 
        max.setAttr("miDefaultFramebuffer.datatype",2)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.datatype",layer=ZDLayer)
        max.setAttr("miDefaultFramebuffer.datatype", 16)
                 
        #ZDMat
        max.select(objSelRender)
        ZDMatName = 'ZD_'+Prefix+'_01'
        ZDMatSG = Prefix+'_ZDSG_01'
        ZDName = Prefix+'_ZDnode_01'
        global myZdMat
        myZdMat = max.shadingNode('surfaceShader',asShader=True, n = ZDMatName)
        myZdMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=ZDMatSG)
        max.connectAttr(myZdMat+'.outColor',myZdMatSG+'.surfaceShader',f=1)
        max.addAttr(longName='camNear', attributeType="long",dv=1)
        max.addAttr(longName='camFar', attributeType="long",dv=1000)
        zd_sp = max.shadingNode('samplerInfo',au=1,n='zd_sp_01')
        zd_P2dt = max.shadingNode('place2dTexture',au=1,n='zd_P2dt_01')
        zd_Ramp = max.shadingNode('ramp',at=1,n='zd_Ramp_01')
        zd_sR=max.shadingNode('setRange',n='zd_sr_01',au=1)
        zd_db = max.shadingNode('distanceBetween',au=1,n='zd_db_01')
        max.connectAttr(zd_sp+'.pointCamera', zd_db+'.point1',f=1)
        max.connectAttr(zd_db+'.distance',zd_sR+'.valueX',f=1)  
        max.connectAttr(zd_sR+'.outValueX',zd_Ramp+'.vCoord',f=1)    
        max.connectAttr(zd_P2dt+'.outUV', zd_Ramp+'.uvCoord',f=1)
        max.connectAttr(zd_P2dt+'.outUvFilterSize',zd_Ramp+'.uvFilterSize',f=1)
        max.removeMultiInstance(zd_Ramp+'.colorEntryList[2]',b=True)  
        max.setAttr(zd_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
        max.setAttr(zd_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
        max.setAttr(zd_Ramp+'.interpolation',1)
        max.setAttr(zd_Ramp+'.colorEntryList[1].position',1)
        max.connectAttr(zd_Ramp+'.outColor', myZdMat+'.outColor',f=1)  
        max.setAttr(zd_sR+'.maxX',-1)
        max.setAttr(zd_sR+'.oldMinX',1)
        max.setAttr(zd_sR+'.oldMaxX',1000)
        max.connectAttr( myZdMat+'.camNear', zd_sR+'.oldMinX',f=1)
        max.connectAttr( myZdMat+'.camFar', zd_sR+'.oldMaxX',f=1)
        
        #filter obj
        allShader_ZD =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_ZD.append(shadersMask[0])              
            
        #print allShader_ZD 
        shaderA = max.ls(allShader_ZD)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=ZDLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myZdMatSG)
            max.select(cl=True)             
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                ZDMatName_A = 'ZD_alpha_01'
                ZDMat_A_SG = 'ZDSG_alpha_01'
                ZD_A_Name = 'ZDnode_alpha_01'
                myZdMatA = max.shadingNode('surfaceShader',asShader=True, n = ZDMatName_A)
                myZdMatASG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=ZDMat_A_SG)
                max.connectAttr(myZdMatA+'.outColor',myZdMatASG+'.surfaceShader',f=1)
                max.addAttr(longName='camNear', attributeType="long",dv=1)
                max.addAttr(longName='camFar', attributeType="long",dv=1000)
                zd_A_sp = max.shadingNode('samplerInfo',au=1,n='zd_A_sp_01')
                zd_A_P2dt = max.shadingNode('place2dTexture',au=1,n='zd_A_P2dt_01')
                zd_A_Ramp = max.shadingNode('ramp',at=1,n='zd_A_Ramp_01')
                zd_A_sR=max.shadingNode('setRange',n='zd_A_sR_01',au=1)
                zd_A_db = max.shadingNode('distanceBetween',au=1,n='zd_A_db_01')
                max.connectAttr(zd_A_sp+'.pointCamera', zd_A_db+'.point1',f=1)
                max.connectAttr(zd_A_db+'.distance',zd_A_sR+'.valueX',f=1)  
                max.connectAttr(zd_A_sR+'.outValueX',zd_A_Ramp+'.vCoord',f=1)    
                max.connectAttr(zd_A_P2dt+'.outUV', zd_A_Ramp+'.uvCoord',f=1)
                max.connectAttr(zd_A_P2dt+'.outUvFilterSize',zd_A_Ramp+'.uvFilterSize',f=1)
                max.removeMultiInstance(zd_A_Ramp+'.colorEntryList[2]',b=True)  
                max.setAttr(zd_A_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(zd_A_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(zd_A_Ramp+'.interpolation',1)
                max.setAttr(zd_A_Ramp+'.colorEntryList[1].position',1)
                max.connectAttr(zd_A_Ramp+'.outColor', myZdMatA+'.outColor',f=1)  
                max.setAttr(zd_A_sR+'.maxX',-1)
                max.setAttr(zd_A_sR+'.oldMinX',1)
                max.setAttr(zd_A_sR+'.oldMaxX',1000)
                max.connectAttr(myZdMatA+'.camNear', zd_A_sR+'.oldMinX',f=1)
                max.connectAttr(myZdMatA+'.camFar', zd_A_sR+'.oldMaxX',f=1)
                
                layeredShaderB = max.shadingNode('layeredShader',asShader=True, n = 'Zdepth_alpha_01')
                layeredShaderBSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Zdepth_alpha_SG_01')
                max.connectAttr(layeredShaderB+'.outColor',layeredShaderBSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderB+".compositingFlag", 1)
                max.connectAttr( myZdMatA+'.outColor', layeredShaderB+'.inputs[0].color',f=1)                               
                
                #get alpha node
                max.connectAttr(transparencyPath ,layeredShaderB+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=ZDLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderBSG)
                max.select(cl=1)
                
                #connect
                Zdmat = max.ls("ZD_shot"+"*","*:ZD_shot"+"*",type="surfaceShader")
                #print Zdmat
                if Zdmat>=1:
                    max.connectAttr (Zdmat[0]+".camFar",myZdMatA+".camFar",f=1)                               
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=ZDLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                max.sets(edit=1,forceElement=myZdMatSG)
                max.hyperShade(assign=myZdMatSG)
                max.select(cl=True)          
        
        #renderpass
        #max.createNode('renderPass',n='ZDepth')
        #max.setRenderPassType('ZDepth',t='CAMZ')
        #max.setAttr('ZDepth.numChannels',4)
        #max.connectAttr ('defaultRenderLayer.renderPass','ZDepth.owner',nextAvailable=True)
        #mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
        #mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
            
        removeSky()
        #max.setAttr (ZDLayer+".renderable" ,0)
        
        
     
def shadowCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('sdcx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        SDLayer = max.createRenderLayer(name=Prefix+"_Shadow_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=SDLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer  
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=SDLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=SDLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=SDLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2) 
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=SDLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)       
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=SDLayer)          
        max.setAttr('miDefaultOptions.minSamples',0)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=SDLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)        
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=SDLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=SDLayer)
        max.setAttr("miDefaultOptions.rayTracing", 1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=SDLayer)
        max.setAttr("miDefaultOptions.maxRefractionRays",10)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=SDLayer)
        max.setAttr("miDefaultOptions.maxReflectionRays",10)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=SDLayer)
        max.setAttr("miDefaultOptions.maxRayDepth",20)
        max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=SDLayer)
        max.setAttr("miDefaultOptions.maxShadowRayDepth",2)
        max.setAttr("miDefaultOptions.maxReflectionBlur",1)
        max.setAttr("miDefaultOptions.maxRefractionBlur",1)
        max.setAttr("miDefaultFramebuffer.datatype",2)        
        #SDMat
        max.select(objSelRender)
        SDMatName = 'Shadow_'+Prefix+'_01'
        SDMatSG = Prefix+'_ShadowSG_01'
        SDName = Prefix+'_SDnode_01'
        mySDMat = max.shadingNode('rampShader',asShader=True, n = SDMatName)
        mySDMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SDMatSG)
        max.connectAttr(mySDMat+'.outColor', mySDMatSG+'.surfaceShader',f=1)
        max.setAttr(mySDMat+'.color[0].color_Color',0,0,0,type="double3")
        max.setAttr(mySDMat+'.color[0].color_Interp',2)
        max.setAttr(mySDMat+'.color[1].color_Position',1)
        max.setAttr(mySDMat+'.color[1].color_Color',1,1,1,type="double3")
        max.setAttr(mySDMat+'.color[1].color_Interp',2)
        max.setAttr(mySDMat+'.diffuse',0)
        max.setAttr(mySDMat+'.translucence',1)
        max.setAttr(mySDMat+'.translucenceDepth',1000)
        max.setAttr(mySDMat+'.specularity',0)
        max.setAttr(mySDMat+'.eccentricity',0)
        max.setAttr(mySDMat+'.reflectivity[0].reflectivity_Position',0)
        max.setAttr(mySDMat+'.reflectivity[0].reflectivity_FloatValue',0)                        
        
        #filter obj
        allShader_SD =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_SD.append(shadersMask[0])              
            
        #print allShader_SD 
        shaderA = max.ls(allShader_SD)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=SDLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = mySDMatSG)
            max.select(cl=True)             
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                SDMatName = 'Shadow_'+Prefix+'_01'
                SDMatSG = Prefix+'_ShadowSG_01'
                SDName = Prefix+'_SDnode_01'
                mySD_A_Mat = max.shadingNode('rampShader',asShader=True, n = SDMatName)
                mySD_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SDMatSG)
                max.connectAttr(mySD_A_Mat+'.outColor', mySD_A_MatSG+'.surfaceShader',f=1)
                max.setAttr(mySD_A_Mat+'.color[0].color_Color',0,0,0,type="double3")
                max.setAttr(mySD_A_Mat+'.color[0].color_Interp',2)
                max.setAttr(mySD_A_Mat+'.color[1].color_Position',1)
                max.setAttr(mySD_A_Mat+'.color[1].color_Color',1,1,1,type="double3")
                max.setAttr(mySD_A_Mat+'.color[1].color_Interp',2)
                max.setAttr(mySD_A_Mat+'.diffuse',0)
                max.setAttr(mySD_A_Mat+'.translucence',1)
                max.setAttr(mySD_A_Mat+'.translucenceDepth',1000)
                max.setAttr(mySD_A_Mat+'.specularity',0)
                max.setAttr(mySD_A_Mat+'.eccentricity',0)
                max.setAttr(mySD_A_Mat+'.reflectivity[0].reflectivity_Position',0)
                max.setAttr(mySD_A_Mat+'.reflectivity[0].reflectivity_FloatValue',0) 
                
                layeredShaderE = max.shadingNode('layeredShader',asShader=True, n = 'SD_alpha_01')
                layeredShaderESG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='SD_alpha_SG_01')
                max.connectAttr(layeredShaderE+'.outColor',layeredShaderESG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderE+".compositingFlag", 1)
                max.connectAttr( mySD_A_Mat+'.outColor', layeredShaderE+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderE+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=SDLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderESG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=SDLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = mySDMatSG)
                max.select(cl=True)             
             
        #createLight
        SDLightName ="SD_light_"+ Prefix + "_01"
        max.editRenderLayerGlobals(crl=SDLayer)
        max.CreateDirectionalLight()
        SDLightSet=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=SDLightName)
        max.setAttr (SDLightSet+'.shadowColor',0,0,0,type='double3')
        max.setAttr (SDLightSet+".useRayTraceShadows" ,1)
        max.setAttr (SDLightSet+".lightAngle" ,10)
        max.setAttr (SDLightSet+".shadowRays" ,30)
        max.setAttr (SDLightSet+".rayDepthLimit" ,30)
        max.setAttr (SDLightSet+".rotateX" ,-45)
        max.setAttr (SDLightSet+".scaleX", 3)
        max.setAttr (SDLightSet+".scaleY", 3)
        max.setAttr (SDLightSet+".scaleZ", 3)
        directionalLights = max.ls(type='directionalLight')
        max.select(cl=True)
        max.select(directionalLights)        
        max.editRenderLayerMembers(SDLayer, nr=True)
        max.select(cl=True)
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
        removeSky()

def normalCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('normalcx',q=True,v=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        normalLayer = max.createRenderLayer(name=Prefix+"_Normal_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=normalLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer  
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=normalLayer)                    
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=normalLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=normalLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=normalLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=normalLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=normalLayer)          
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=normalLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=normalLayer)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=normalLayer)
        max.setAttr('miDefaultOptions.rayTracing',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)        
        #normalMat
        max.select(objSelRender)
        normalMatName = 'Normal_'+Prefix+'_01'
        normalMatSG = Prefix+'_NormalSG_01'
        normalName = Prefix+'_normalnode_01'
        mynormalMat = max.shadingNode('surfaceShader',asShader=True, n = normalMatName)
        mynormalMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=normalMatSG)
        max.connectAttr(mynormalMat+'.outColor', mynormalMatSG+'.surfaceShader',f=1)
        normalMibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n=Prefix+'_nOcc_01')
        gammaName = "gammaCorrect_normal"
        myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
        max.setAttr (myGamma+".gammaX" ,0.45)
        max.setAttr (myGamma+".gammaY" ,0.45)
        max.setAttr (myGamma+".gammaZ" ,0.45)
        max.connectAttr(normalMibOcclusion+'.outValue',myGamma+'.value')
        max.connectAttr(myGamma+".outValue", mynormalMat+'.outColor')
        max.setAttr(normalMibOcclusion+'.samples',32)
        max.setAttr(normalMibOcclusion+'.output_mode',3)        
        
        
        #filter obj
        allShader_NR =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_NR.append(shadersMask[0])              
            
        #print allShader_NR 
        shaderA = max.ls(allShader_NR)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader  
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=normalLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = mynormalMatSG)
            max.select(cl=True)            
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                normalMatName = 'Normal_'+Prefix+'_01'
                normalMatSG = Prefix+'_NormalSG_01'
                normalName = Prefix+'_normalnode_01'
                mynormalMat_A = max.shadingNode('surfaceShader',asShader=True, n = normalMatName)
                mynormalMat_A_SG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=normalMatSG)
                max.connectAttr(mynormalMat_A+'.outColor', mynormalMat_A_SG+'.surfaceShader',f=1)
                normalMibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n=Prefix+'_nOcc_01')
                gammaName = "gammaCorrect_normal"
                myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
                max.setAttr (myGamma+".gammaX" ,0.45)
                max.setAttr (myGamma+".gammaY" ,0.45)
                max.setAttr (myGamma+".gammaZ" ,0.45)
                max.connectAttr(normalMibOcclusion+'.outValue',myGamma+'.value')
                max.connectAttr(myGamma+".outValue", mynormalMat_A+'.outColor')
                max.setAttr(normalMibOcclusion+'.samples',32)
                max.setAttr(normalMibOcclusion+'.output_mode',3) 
                
                layeredShaderF = max.shadingNode('layeredShader',asShader=True, n = 'normal_alpha_01')
                layeredShaderFSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='normal_alpha_SG_01')
                max.connectAttr(layeredShaderF+'.outColor',layeredShaderFSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderF+".compositingFlag", 1)
                max.connectAttr( mynormalMat_A+'.outColor', layeredShaderF+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderF+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=normalLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderFSG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=normalLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = mynormalMatSG)
                max.select(cl=True)             
        
        removeSky()
               
def maskCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________  
    if max.iconTextCheckBox('maskcx',q=True,v=True):
        Date=max.date(f='MMDD')
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        maskLayer = max.createRenderLayer(name=Prefix+"_Mask_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=maskLayer)        
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer  
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=maskLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=maskLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=maskLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=maskLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=maskLayer)
        max.setAttr('miDefaultOptions.maxSamples',2) 
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=maskLayer)                  
        max.setAttr('miDefaultOptions.minSamples',0)         
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=maskLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR,1"              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=maskLayer)
        max.setAttr('miDefaultOptions.rayTracing',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
                    
        creatMat()        
        allShader =[]

        for selC in objSelRender:
            print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            print sdg
            shadersMask =max.ls(sdg,materials=1)   
            print shadersMask[0]  
            allShader.append(shadersMask[0])              
            
        print allShader 
        shaderA = max.ls(allShader)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        print selShader             
        
        
        for u in selShader: 
        
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            print u
            print transparencyPath  
            if transparencyPath!='':
                max.select(u)
                SelA = max.hyperShade( objects='')
                SelC =  max.pickWalk(d="up")
                print SelC
                SelB = max.ls(SelC,type="transform")
                print SelB
                max.select(SelB)
                isDisplayLayer = max.listConnections(SelB[0],type="displayLayer")
                print isDisplayLayer
                
                #create new material
                MaskName = 'MakeColor1_01'
                gammaName = 'GM_01'
                ColorMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = MaskName)
                ColorMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='MaskColorSG1')
                max.connectAttr(ColorMyMaskMat+'.outColor', ColorMyMaskMatSG+'.surfaceShader',f=1)
                
                #layer material
                layeredShaderC = max.shadingNode('layeredShader',asShader=True, n = 'Mask_alpha_01')
                layeredShaderCSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Mask_alpha_SG_01')
                max.connectAttr(layeredShaderC+'.outColor',layeredShaderCSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderC+".compositingFlag", 1)
                max.connectAttr( ColorMyMaskMat+'.outColor', layeredShaderC+'.inputs[0].color',f=1) 
                
                #select color
                gammaA = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)
                max.connectAttr (gammaA+'.outValue',ColorMyMaskMat+'.outColor',force=1)
                max.setAttr(gammaA+".gammaX",0.45)
                max.setAttr(gammaA+".gammaY",0.45)
                max.setAttr(gammaA+".gammaZ",0.45)  
                
                if isDisplayLayer >= 1:
                    if isDisplayLayer[0] in max.ls("*sky_set","*:*sky_set",type="displayLayer"):                    
                        max.setAttr(gammaA+'.value',0,0,1, type="double3")
                        print "B>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                        
                    if isDisplayLayer[0] in max.ls("*floor_set","*:*floor_set",type="displayLayer"):                    
                        max.setAttr(gammaA+'.value',0,1,0, type="double3")                    
                        print "G>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"   
                        
                    if isDisplayLayer[0] in max.ls("*scenes_set","*:*scenes_set",type="displayLayer"):                    
                        max.setAttr(gammaA+'.value',1,0,0, type="double3")
                        print "R>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" 
                                           
                    if isDisplayLayer[0] in max.ls("P_*","*:P_*",type="displayLayer"):
                        max.setAttr(gammaA+'.value',0.44,0.77,0.66, type="double3") 
                        print "P>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                         
                else:
                    max.setAttr(gammaA+'.value',0.55,0.55,0.55, type="double3") 
                       
                max.connectAttr( transparencyPath, layeredShaderC+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=maskLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderCSG)
                max.select(cl=True) 
                
                F = max.ls(type="file")
                if len(F) > 0:
                    for fSel in F:
                        max.setAttr(fSel+".alphaIsLuminance",1)                
                print "Mask Done",
                
                
            else:               
                max.select(u)
                SelD = max.hyperShade( objects='')
                SelE =  max.pickWalk(d="up")
                print SelE
                SelF = max.ls(SelE,type="transform")
                print SelF
                #max.select(SelF)
                isDisplayLayer = max.listConnections(SelF[0],type="displayLayer")
                print isDisplayLayer
                
                MaskName = 'MakeColor1_01'
                gammaName = 'GM_01'
                ColorMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = MaskName)
                ColorMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='MaskColorSG1')
                max.connectAttr(ColorMyMaskMat+'.outColor', ColorMyMaskMatSG+'.surfaceShader',f=1)
                
                #select color
                gammaB = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)
                max.connectAttr (gammaB+'.outValue',ColorMyMaskMat+'.outColor',force=1)
                max.setAttr(gammaB+".gammaX",0.45)
                max.setAttr(gammaB+".gammaY",0.45)
                max.setAttr(gammaB+".gammaZ",0.45) 
                
                if isDisplayLayer >= 1:
                    if isDisplayLayer[0] in max.ls("*sky_set","*:*sky_set",type="displayLayer"):
                        max.editRenderLayerGlobals(crl=maskLayer)
                        max.select(cl=True)   
                        max.select(u)
                        SelA = max.hyperShade( objects='')
                        maSel=max.sets(edit=1,forceElement = 'BSG') 
                        max.select(cl=True) 
                    
                    if isDisplayLayer[0] in max.ls("*floor_set","*:*floor_set",type="displayLayer"):
                        max.editRenderLayerGlobals(crl=maskLayer)
                        max.select(cl=True)   
                        max.select(u)
                        SelA = max.hyperShade( objects='')
                        maSel=max.sets(edit=1,forceElement = 'GSG') 
                        max.select(cl=True)
                            
                    if isDisplayLayer[0] in max.ls("*scenes_set","*:*scenes_set",type="displayLayer"):
                        max.editRenderLayerGlobals(crl=maskLayer)
                        max.select(cl=True)   
                        max.select(u)
                        SelA = max.hyperShade( objects='')
                        maSel=max.sets(edit=1,forceElement = 'RSG') 
                        max.select(cl=True)
                         
                    if isDisplayLayer[0] in max.ls("P_*","*:P_*",type="displayLayer"):
                        max.editRenderLayerGlobals(crl=maskLayer)
                        max.select(cl=True)   
                        max.select(u)
                        SelA = max.hyperShade( objects='')
                        maSel=max.sets(edit=1,forceElement = 'PSG') 
                        max.select(cl=True)       
                else:
                    max.editRenderLayerGlobals(crl=maskLayer)
                    max.select(cl=True)   
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = 'OSG')  
                    max.select(cl=True) 
                    
                print "Mask Done"
       
        mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
        max.select(cl=1)
        
        
        skySel = max.ls("*"+"sky_set","*"+":sky_set",type="displayLayer")
        skyY = max.ls("*"+"sky","*"+":sky",type="transform")
        print skySel
        if len(skySel)==1:
            if len(skyY)==1:
                max.select(skyY[0])                             
                max.setAttr(skyY[0]+".visibility", 1)
                max.select(cl=True)
        
        autoMask() 
                     
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1) 
           
def creatMat(*arg):#________________________________________________________________________________________________________________________________________________________________    
    #RMat
    RMat = max.ls("R",type="surfaceShader")
    print RMat
    if len(RMat) == 0:
        max.shadingNode('surfaceShader',asShader=True, n = 'R')
        max.sets(renderable=True,noSurfaceShader=True,em=True,n='RSG')
        max.connectAttr('R.outColor','RSG.surfaceShader',f=1)
        max.shadingNode('gammaCorrect',asUtility=True, n = 'R_gammaCorrect')
        max.connectAttr ('R_gammaCorrect.outValue','R.outColor',force=1)
        max.setAttr("R_gammaCorrect.gammaX",0.45)
        max.setAttr("R_gammaCorrect.gammaY",0.45)
        max.setAttr("R_gammaCorrect.gammaZ",0.45)
        max.setAttr('R_gammaCorrect.value',1,0,0, type="double3")
    
    #GMat
    GMat = max.ls("G",type="surfaceShader")
    if len(GMat)== 0:
        max.shadingNode('surfaceShader',asShader=True, n = 'G')
        max.sets(renderable=True,noSurfaceShader=True,em=True,n='GSG')
        max.connectAttr('G.outColor','GSG.surfaceShader',f=1)
        max.shadingNode('gammaCorrect',asUtility=True, n = 'G_gammaCorrect')
        max.connectAttr ('G_gammaCorrect.outValue','G.outColor',force=1)
        max.setAttr("G_gammaCorrect.gammaX",0.45)
        max.setAttr("G_gammaCorrect.gammaY",0.45)
        max.setAttr("G_gammaCorrect.gammaZ",0.45)
        max.setAttr('G_gammaCorrect.value',0,1,0, type="double3")
    
    #BMat
    BMat = max.ls("B",type="surfaceShader")
    if len(BMat) == 0:
        BmyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = 'B')
        BmyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='BSG')
        max.connectAttr(BmyMaskMat+'.outColor', BmyMaskMatSG+'.surfaceShader',f=1)
        max.shadingNode('gammaCorrect',asUtility=True, n = 'B_gammaCorrect')
        max.connectAttr ('B_gammaCorrect.outValue','B.outColor',force=1)
        max.setAttr("B_gammaCorrect.gammaX",0.45)
        max.setAttr("B_gammaCorrect.gammaY",0.45)
        max.setAttr("B_gammaCorrect.gammaZ",0.45)
        max.setAttr('B_gammaCorrect.value',0,0,1, type="double3")    
    
    #WhiteMat
    WMat = max.ls("White",type="surfaceShader")
    if len(WMat)== 0:
        WhiteMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = 'White')
        WhiteMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='WhiteSG')
        max.connectAttr(WhiteMyMaskMat+'.outColor', WhiteMyMaskMatSG+'.surfaceShader',f=1)    
        max.shadingNode('gammaCorrect',asUtility=True, n = 'White_gammaCorrect')
        max.connectAttr ('White_gammaCorrect.outValue',WhiteMyMaskMat+'.outColor',force=1)
        max.setAttr("White_gammaCorrect.gammaX",0.45)
        max.setAttr("White_gammaCorrect.gammaY",0.45)
        max.setAttr("White_gammaCorrect.gammaZ",0.45)
        max.setAttr('White_gammaCorrect.value',1,0,0, type="double3")

    #PropMat
    PMat = max.ls("PropMask",type="surfaceShader")
    if len(PMat) == 0:
        PropMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = 'PropMask')
        PropMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='PSG')
        max.connectAttr(PropMyMaskMat+'.outColor', PropMyMaskMatSG+'.surfaceShader',f=1)    
        max.shadingNode('gammaCorrect',asUtility=True, n = 'Prop_gammaCorrect')
        max.connectAttr ('Prop_gammaCorrect.outValue',PropMyMaskMat+'.outColor',force=1)
        max.setAttr("Prop_gammaCorrect.gammaX",0.45)
        max.setAttr("Prop_gammaCorrect.gammaY",0.45)
        max.setAttr("Prop_gammaCorrect.gammaZ",0.45)
        max.setAttr('Prop_gammaCorrect.value',0.44,0.77,0.66, type="double3")

    #otherMat
    OMat = max.ls("otherMask",type="surfaceShader")
    if len(OMat) == 0:
        ohterMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = 'otherMask')
        ohterMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='OSG')
        max.connectAttr(ohterMyMaskMat+'.outColor', ohterMyMaskMatSG+'.surfaceShader',f=1)    
        max.shadingNode('gammaCorrect',asUtility=True, n = 'ohter_gammaCorrect')
        max.connectAttr ('ohter_gammaCorrect.outValue',ohterMyMaskMat+'.outColor',force=1)
        max.setAttr("ohter_gammaCorrect.gammaX",0.45)
        max.setAttr("ohter_gammaCorrect.gammaY",0.45)
        max.setAttr("ohter_gammaCorrect.gammaZ",0.45)
        max.setAttr('ohter_gammaCorrect.value',0.55,0.55,0.55, type="double3")
    
    #USB
    USBMat = max.ls("UBG",type="surfaceShader")
    if len(USBMat) == 0:
        UBGMat = max.shadingNode('useBackground',asShader=True, n = 'UBG')
        UBGMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='UBGMatSG')
        max.connectAttr(UBGMat+'.outColor', UBGMatSG+'.surfaceShader',f=1)
        max.setAttr(UBGMat+'.specularColor',0,0,0, type="double3")
        max.setAttr(UBGMat+'.reflectivity',0)      
        max.setAttr(UBGMat+'.reflectionLimit',0)

def fgaoCreateRenderLayer(*arg):#________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('fgaocx',query=True,value=True):
        Date=max.date(f='MMDD')          
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        fgaoLayer = max.createRenderLayer(name=Prefix+"_FGAO_01",mc=True,nr=True)
        #setRenderLayer
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=fgaoLayer)      
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=fgaoLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=fgaoLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)        
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=fgaoLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=fgaoLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=fgaoLayer)            
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=fgaoLayer)
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=fgaoLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)        
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=fgaoLayer)
        max.setAttr('miDefaultOptions.filter',1)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=fgaoLayer)
        max.setAttr('miDefaultOptions.maxReflectionRays',10)
        max.setAttr('miDefaultOptions.maxRefractionRays',10)
        max.setAttr('miDefaultOptions.maxRayDepth',20)
        
        max.editRenderLayerAdjustment("miDefaultOptions.finalGather",layer=fgaoLayer)
        max.setAttr('miDefaultOptions.finalGather',1)
        max.setAttr('miDefaultOptions.finalGatherRays',100)
        max.setAttr('miDefaultOptions.finalGatherPresampleDensity',1)
        max.setAttr('miDefaultOptions.finalGatherPoints',10)
        max.setAttr('miDefaultOptions.finalGatherScale',2.1,2.1,2.1,type='double3')
        max.setAttr('miDefaultOptions.finalGatherBounceScale',1,1,1,type='double3')
        max.setAttr('miDefaultOptions.finalGatherTraceDiffuse',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)   
        #fgaoMat
        FG_Mat = max.ls('FGAO')
        if len(FG_Mat) == 0:        
            fgaoMatName = 'FGAO'
            fgaoMatSG = 'fgaomatSG'
            occName = 'fgaonode'
            myFGaoMat = max.shadingNode('lambert',asShader=True, n = fgaoMatName)
            myFGaoMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=fgaoMatSG)
            max.connectAttr(myFGaoMat+'.outColor',myFGaoMatSG+'.surfaceShader')
        
        FG_skyMat = max.ls('FGAO_sky')
        if len(FG_skyMat) == 0:
            skyfgaoName = 'FGAO_sky'
            skyfgaoSG = 'FGAO_skySG'
            skyfgaoSGoccName = 'skyFGaoNode_01'
            skyFGaoMat = max.shadingNode('lambert',asShader=True, n = skyfgaoName)
            skyFGaoMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=skyfgaoSG)
            max.connectAttr(skyFGaoMat+'.outColor',skyFGaoMatSG+'.surfaceShader')
            max.setAttr(skyFGaoMat+".diffuse",0)
            max.setAttr(skyFGaoMat+".color",1,1,1,type='double3')
            max.setAttr(skyFGaoMat+".incandescence",1,1,1,type='double3')
        
        #create sphere
        FG_Light_sphere = max.ls('FG_Light_sphere')
        if len(FG_Light_sphere) == 0:
            FGsphereName = 'FG_Light_sphere'
            FGsphere = max.polySphere (n = FGsphereName,r=5000,sx=20,sy=20,ax=[0 ,1 ,0] ,cuv=2 ,ch=1)                      
        
        max.select('FG_Light_sphere')
        #max.setAttr("FG_Light_sphere.primaryVisibility" ,0)      
        max.editRenderLayerMembers(fgaoLayer,'FG_Light_sphere', nr=True)
        max.select(cl=True)
        
        #getMat        
        max.editRenderLayerGlobals(crl=fgaoLayer)
        max.select(cl=True)
        max.select('FG_Light_sphere')
        max.sets(edit=1,forceElement='FGAO_skySG')
        max.select(cl=True)  
        
        #filter obj
        allShader_FGAO =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_FGAO.append(shadersMask[0])              
            
        #print allShader_FGAO 
        shaderA = max.ls(allShader_FGAO)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader            
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                fgaoMatName = 'FGAO'
                fgaoMatSG = 'fgaomatSG'
                occName = 'fgaonode'
                myFGao_A_Mat = max.shadingNode('lambert',asShader=True, n = fgaoMatName)
                myFGao_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=fgaoMatSG)
                max.connectAttr(myFGao_A_Mat+'.outColor',myFGao_A_MatSG+'.surfaceShader')
                
                layeredShaderJ = max.shadingNode('layeredShader',asShader=True, n = 'FGAO_alpha_01')
                layeredShaderJSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='FGAO_alpha_SG_01')
                max.connectAttr(layeredShaderJ+'.outColor',layeredShaderJSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderJ+".compositingFlag", 1)
                max.connectAttr( myFGao_A_Mat+'.outColor', layeredShaderJ+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderJ+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=fgaoLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderJSG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=fgaoLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myFGao_A_MatSG)
                max.select(cl=True)                   
        
        #creat Light
        FGLightName01 = 'FG_light_01'
        FGLightName02 = 'FG_light_02'
        FGLightName03 = 'FG_light_03'        
        
        FG_directionalLight_01 = max.ls('FG_light_01')
        if len(FG_directionalLight_01) == 0:
            max.editRenderLayerGlobals(crl=fgaoLayer)
            max.CreateDirectionalLight()
            FGaoLightSet01=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=FGLightName01)
            max.setAttr (FGaoLightSet01+'.shadowColor',0,0,0,type='double3')
            max.setAttr (FGaoLightSet01+".useRayTraceShadows" ,1)
            max.setAttr (FGaoLightSet01+".lightAngle" ,10)
            max.setAttr (FGaoLightSet01+".shadowRays" ,20)
            max.setAttr (FGaoLightSet01+".rayDepthLimit" ,20)
            max.setAttr (FGaoLightSet01+".rotateX" ,-60)
            max.setAttr (FGaoLightSet01+".scaleX", 3)
            max.setAttr (FGaoLightSet01+".scaleY", 3)
            max.setAttr (FGaoLightSet01+".scaleZ", 3)
        
        FG_directionalLight_02 = max.ls('FG_light_02')
        if len(FG_directionalLight_02) == 0:
            max.editRenderLayerGlobals(crl=fgaoLayer)
            max.CreateDirectionalLight()
            FGaoLightSet02=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=FGLightName02)
            max.setAttr (FGaoLightSet02+'.shadowColor',0,0,0,type='double3')
            max.setAttr (FGaoLightSet02+".useRayTraceShadows" ,1)
            max.setAttr (FGaoLightSet02+".lightAngle" ,10)
            max.setAttr (FGaoLightSet02+".shadowRays" ,20)
            max.setAttr (FGaoLightSet02+".rayDepthLimit" ,20)
            max.setAttr (FGaoLightSet02+".rotateX" ,-60)
            max.setAttr (FGaoLightSet02+".scaleX", 3)
            max.setAttr (FGaoLightSet02+".scaleY", 3)
            max.setAttr (FGaoLightSet02+".scaleZ", 3)
            max.setAttr (FGaoLightSet02+".rotateY", 120)
        
        FG_directionalLight_03 = max.ls('FG_light_03')
        if len(FG_directionalLight_03) == 0:
            max.editRenderLayerGlobals(crl=fgaoLayer)
            max.CreateDirectionalLight()
            FGaoLightSet03=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=FGLightName03)
            max.setAttr (FGaoLightSet03+'.shadowColor',0,0,0,type='double3')
            max.setAttr (FGaoLightSet03+".useRayTraceShadows" ,1)
            max.setAttr (FGaoLightSet03+".lightAngle" ,10)
            max.setAttr (FGaoLightSet03+".shadowRays" ,20)
            max.setAttr (FGaoLightSet03+".rayDepthLimit" ,20)
            max.setAttr (FGaoLightSet03+".rotateX" ,-60)
            max.setAttr (FGaoLightSet03+".scaleX", 3)
            max.setAttr (FGaoLightSet03+".scaleY", 3)
            max.setAttr (FGaoLightSet03+".scaleZ", 3)
            max.setAttr (FGaoLightSet03+".rotateY", 240)
        
        FGLightSelAll = ['FG_light_01','FG_light_02','FG_light_03']
        
        directionalLights = max.ls(type='directionalLight')
        max.select(cl=True)
        max.select(FGLightSelAll)        
        max.editRenderLayerMembers(fgaoLayer,FGLightSelAll, nr=True)
        max.select(cl=True)
        max.select('FG_Light_sphere')
        max.setAttr("FG_Light_sphere.primaryVisibility" ,0)
        max.select(cl=True)
        
        removeSky()
       
def specularCreateRenderLayerPass(*arg):
    if max.iconTextCheckBox('specularcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        specularLayerPass = max.createRenderLayer(name=Prefix+"_Specular_pass_01",mc=True,nr=True)

        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=specularLayerPass)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFormat",layer=specularLayerPass)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)  
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=specularLayerPass)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=specularLayerPass)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=specularLayerPass)
        max.setAttr('miDefaultOptions.maxSamples',2) 
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=specularLayerPass)          
        max.setAttr('miDefaultOptions.minSamples',0)
                 
        ##max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=specularLayerPass)
        ##max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
           
        max.createNode('renderPass',n='specular')
        max.setRenderPassType('specular',t='SPECNS')
        max.setAttr('specular.numChannels',4)
        max.connectAttr (specularLayerPass+'.renderPass','specular.owner',nextAvailable=True)

        max.createNode('renderPass',n='refraction')
        max.setRenderPassType('refraction',t='REFR')
        max.setAttr('refraction.numChannels',4)
        max.connectAttr (specularLayerPass+'.renderPass','refraction.owner',nextAvailable=True)
       
        max.createNode('renderPass',n='refleted')
        max.setRenderPassType('refleted',t='REFL')
        max.setAttr('refleted.numChannels',4)
        max.connectAttr (specularLayerPass+'.renderPass','refleted.owner',nextAvailable=True)

def specularCreateRenderLayer(*arg):
    if max.iconTextCheckBox('specularcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        specularLayer = max.createRenderLayer(name=Prefix+"_Specular_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=specularLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer  
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=specularLayer)        
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormaSPontrol',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=specularLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=specularLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=specularLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=specularLayer)  
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=specularLayer)
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=specularLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=specularLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #creat Light
        SPLightNameR = 'SP_lightR_01'
        SPLightNameG = 'SP_lightG_01'
        SPLightNameB = 'SP_lightB_01'        
        
        SP_directionalLight_01 = max.ls('SP_lightR_01')
        if len(SP_directionalLight_01) == 0:
            max.editRenderLayerGlobals(crl=specularLayer)
            max.CreateDirectionalLight()
            SPLightSet01=max.directionalLight( e=True, intensity=1,rgb=[1,0,0],n=SPLightNameR)
            max.setAttr (SPLightSet01+".rotateX",-30)
            max.setAttr (SPLightSet01+".rotateY",-60)
            max.setAttr (SPLightSet01+".rotateZ",-10)
            max.setAttr (SPLightSet01+".scaleX",3)
            max.setAttr (SPLightSet01+".scaleY",3)
            max.setAttr (SPLightSet01+".scaleZ",3)
            max.setAttr (SPLightSet01+".useRayTraceShadows",0)
           
                   
        SP_directionalLight_02 = max.ls('SP_lightG_01')
        if len(SP_directionalLight_02) == 0:
            max.editRenderLayerGlobals(crl=specularLayer)
            max.CreateDirectionalLight()
            SPLightSet02=max.directionalLight( e=True, intensity=1,rgb=[0,1,0],n=SPLightNameG)
            max.setAttr (SPLightSet02+".rotateX",-50)
            max.setAttr (SPLightSet02+".rotateY",55)
            max.setAttr (SPLightSet02+".rotateZ",-30)
            max.setAttr (SPLightSet02+".scaleX",3)
            max.setAttr (SPLightSet02+".scaleY",3)
            max.setAttr (SPLightSet02+".scaleZ",3)
            max.setAttr (SPLightSet02+".useRayTraceShadows",0)
        
        SP_directionalLight_03 = max.ls('SP_lightB_01')
        if len(SP_directionalLight_03) == 0:
            max.editRenderLayerGlobals(crl=specularLayer)
            max.CreateDirectionalLight()
            SPLightSet03=max.directionalLight( e=True, intensity=1,rgb=[0,0,1],n=SPLightNameB)
            max.setAttr (SPLightSet03+".rotateX",80)
            max.setAttr (SPLightSet03+".rotateY",10)
            max.setAttr (SPLightSet03+".rotateZ",25)
            max.setAttr (SPLightSet03+".scaleX",3)
            max.setAttr (SPLightSet03+".scaleY",3)
            max.setAttr (SPLightSet03+".scaleZ",3)
            max.setAttr (SPLightSet03+".useRayTraceShadows",0)
        
        SPLightSelAll = ['SP_lightR_01','SP_lightG_01','SP_lightB_01']        
        directionalLights = max.ls(type='directionalLight')
        max.select(cl=True)
        max.select(SPLightSelAll)        
        max.editRenderLayerMembers(specularLayer,SPLightSelAll, nr=True)
        max.select(cl=True)
        #createMat
        SPMatName = 'SP_'+Prefix+'_01'
        SPMatSG = Prefix+'_SPSG_01'
        SPName = Prefix+'_SPnode_01'
        mySPMat = max.shadingNode('blinn',asShader=True, n = SPMatName)
        mySPMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SPMatSG)
        max.connectAttr(mySPMat+'.outColor',mySPMatSG+'.surfaceShader',f=1)
        max.setAttr(mySPMat+'.diffuse',0.8)
        max.setAttr(mySPMat+'.color',0,0,0,type="double3")
        max.setAttr(mySPMat+'.reflectivity',0)
        max.setAttr(mySPMat+'.eccentricity',0.07)
        max.setAttr(mySPMat+'.specularRollOff',5)        
        
        
        #filter obj
        allShader_SP =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_SP.append(shadersMask[0])              
            
        #print allShader_SP 
        shaderA = max.ls(allShader_SP)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader            
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                SPMatName = 'SP_'+Prefix+'_01'
                SPMatSG = Prefix+'_SPSG_01'
                SPName = Prefix+'_SPnode_01'
                mySP_A_Mat = max.shadingNode('blinn',asShader=True, n = SPMatName)
                mySP_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SPMatSG)
                max.connectAttr(mySP_A_Mat+'.outColor',mySP_A_MatSG+'.surfaceShader',f=1)
                max.setAttr(mySP_A_Mat+'.diffuse',0.8)
                max.setAttr(mySP_A_Mat+'.color',0,0,0,type="double3")
                max.setAttr(mySP_A_Mat+'.reflectivity',0)
                max.setAttr(mySP_A_Mat+'.eccentricity',0.07)
                max.setAttr(mySP_A_Mat+'.specularRollOff',5)        
                
                layeredShaderK = max.shadingNode('layeredShader',asShader=True, n = 'SP_alpha_01')
                layeredShaderKSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='SP_alpha_SG_01')
                max.connectAttr(layeredShaderK+'.outColor',layeredShaderKSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderK+".compositingFlag", 1)
                max.connectAttr( mySP_A_Mat+'.outColor', layeredShaderK+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderK+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=specularLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderKSG)              
                max.select(cl=True)                                                  
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=specularLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = mySPMatSG)
                max.select(cl=True)  
                
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)  
        removeSky()              
   
def refletedCreateRenderLayer(*arg):
    if max.iconTextCheckBox('refletedcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        refletedLayer = max.createRenderLayer(name=Prefix+"_Refleted_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=refletedLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer    
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=refletedLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix',"Z:\Rabbit and Turtle\RenderGroud\Track_01\<Camera>\<RenderPass>\<RenderPass>",type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=refletedLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=refletedLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=refletedLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=refletedLayer)
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=refletedLayer)          
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=refletedLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)    
       
        max.editRenderLayerAdjustment("miDefaultOptions.scanline",layer=refletedLayer)
        max.setAttr ("miDefaultOptions.scanline", 1)
        max.setAttr('miDefaultOptions.minSamples',0)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=refletedLayer)    
        #max.setAttr('miDefaultOptions.maxSamples',2)        
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=refletedLayer)
        max.setAttr ('miDefaultOptions.filter',1)        
        max.setAttr ('miDefaultOptions.filterWidth',0.75)
        max.setAttr ('miDefaultOptions.filterHeight',0.75)
        max.editRenderLayerAdjustment("miDefaultOptions.jitter",layer=refletedLayer)
        max.setAttr ('miDefaultOptions.jitter',1)
        max.editRenderLayerAdjustment("miDefaultOptions.sampleLock",layer=refletedLayer)
        max.setAttr ('miDefaultOptions.sampleLock',1)
        max.setAttr("miDefaultFramebuffer.datatype",2)        
       
        refletedMatName = 'Refleted_'+Prefix+'_01'
        refletedMatSG = Prefix+'_RefletedSG_01'
        refletedName = Prefix+'_refletednode_01'
        refletedMat = max.shadingNode('useBackground',asShader=True, n = refletedMatName)
        refletedSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=refletedMatSG)
        max.connectAttr(refletedMat+'.outColor', refletedSG+'.surfaceShader',f=1)
        max.setAttr(refletedMat+'.specularColor',1,1,1, type="double3")
        max.setAttr(refletedMat+'.reflectivity',0.5)      
        max.setAttr(refletedMat+'.reflectionLimit',2)
       
        max.editRenderLayerGlobals(crl=refletedLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=refletedSG)
        max.hyperShade(assign=refletedSG)
        max.select(cl=True)

def refractionCreateRenderLayer(*arg):
    if max.iconTextCheckBox('refraccx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        refractiondLayer = max.createRenderLayer(name=Prefix+"_Refleted_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=refractiondLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer    
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=refractiondLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix',"Z:\Rabbit and Turtle\RenderGroud\Track_01\<Camera>\<RenderPass>\<RenderPass>",type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=refractiondLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=refractiondLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=refractiondLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",0)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=refractiondLayer)
        #max.setAttr('miDefaultOptions.maxSamples',2)
        #max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=refractiondLayer)          
        #max.setAttr('miDefaultOptions.minSamples',0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=refractiondLayer)
        max.setAttr("miDefaultOptions.miSamplesQualityR",1.00)              
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)    
        
        max.editRenderLayerAdjustment("miDefaultOptions.scanline",layer=refractiondLayer)
        max.setAttr ("miDefaultOptions.scanline", 1)
        max.setAttr('miDefaultOptions.minSamples',0)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=refractiondLayer)    
        #max.setAttr('miDefaultOptions.maxSamples',2)        
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=refractiondLayer)
        max.setAttr ('miDefaultOptions.filter',1)        
        max.setAttr ('miDefaultOptions.filterWidth',0.75)
        max.setAttr ('miDefaultOptions.filterHeight',0.75)
        max.editRenderLayerAdjustment("miDefaultOptions.jitter",layer=refractiondLayer)
        max.setAttr ('miDefaultOptions.jitter',1)
        max.editRenderLayerAdjustment("miDefaultOptions.sampleLock",layer=refractiondLayer)
        max.setAttr ('miDefaultOptions.sampleLock',1)
        max.setAttr("miDefaultFramebuffer.datatype",2)        
        
        refraction = max.createNode('renderPass',n='refraction_01')
        max.setRenderPassType(refraction,t='REFR')
        max.setAttr(refraction+'.numChannels',4)                      
        max.connectAttr ( refractiondLayer+'.renderPass',refraction+'.owner',nextAvailable=True)
        
        max.setAttr(refraction+".numChannels",4)  
        max.setAttr(refraction+".frameBufferType",512) 

       
def threeColorCreateRenderLayer(*arg):
    if max.iconTextCheckBox('tccx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        #print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        #print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        #print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        TCLayer = max.createRenderLayer(name=Prefix+"_TColor_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=TCLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=TCLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=TCLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=TCLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=TCLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=TCLayer)  
        max.setAttr('miDefaultOptions.maxSamples',2)        
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=TCLayer)  
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=TCLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)        
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=TCLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        
        #creat Light
        TCLightNameR = 'TC_lightR_01'
        TCLightNameG = 'TC_lightG_01'
        TCLightNameB = 'TC_lightB_01'        
        
        TC_directionalLight_01 = max.ls('TC_lightR_01')
        if len(TC_directionalLight_01) == 0:
            max.editRenderLayerGlobals(crl=TCLayer)
            max.CreateDirectionalLight()
            TCLightSet01=max.directionalLight( e=True, intensity=1,rgb=[1,0,0],n=TCLightNameR)
            max.setAttr (TCLightSet01+".rotateX",-30)
            max.setAttr (TCLightSet01+".rotateY",-60)
            max.setAttr (TCLightSet01+".rotateZ",-10)
            max.setAttr (TCLightSet01+".scaleX",3)
            max.setAttr (TCLightSet01+".scaleY",3)
            max.setAttr (TCLightSet01+".scaleZ",3)
        
        TC_directionalLight_02 = max.ls('TC_lightG_01')
        if len(TC_directionalLight_02) == 0:
            max.editRenderLayerGlobals(crl=TCLayer)
            max.CreateDirectionalLight()
            TCLightSet02=max.directionalLight( e=True, intensity=1,rgb=[0,1,0],n=TCLightNameG)
            max.setAttr (TCLightSet02+".rotateX",-50)
            max.setAttr (TCLightSet02+".rotateY",55)
            max.setAttr (TCLightSet02+".rotateZ",-30)
            max.setAttr (TCLightSet02+".scaleX",3)
            max.setAttr (TCLightSet02+".scaleY",3)
            max.setAttr (TCLightSet02+".scaleZ",3)
        
        TC_directionalLight_03 = max.ls('TC_lightB_01')
        if len(TC_directionalLight_03) == 0:
            max.editRenderLayerGlobals(crl=TCLayer)
            max.CreateDirectionalLight()
            TCLightSet03=max.directionalLight( e=True, intensity=1,rgb=[0,0,1],n=TCLightNameB)
            max.setAttr (TCLightSet03+".rotateX",80)
            max.setAttr (TCLightSet03+".rotateY",10)
            max.setAttr (TCLightSet03+".rotateZ",25)
            max.setAttr (TCLightSet03+".scaleX",3)
            max.setAttr (TCLightSet03+".scaleY",3)
            max.setAttr (TCLightSet03+".scaleZ",3)
        
        TCLightSelAll = ['TC_lightR_01','TC_lightG_01','TC_lightB_01']        
        directionalLights = max.ls(type='directionalLight')
        max.select(cl=True)
        max.select(TCLightSelAll)        
        max.editRenderLayerMembers(TCLayer,TCLightSelAll, nr=True)
        max.select(cl=True)
        #createMat
        TCMatName = 'TC_01'
        TCMatSG = 'TCSG_01'
        TCName = 'TCnode_01'
        myTCMat = max.shadingNode('lambert',asShader=True, n = TCMatName)
        myTCMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=TCMatSG)
        max.connectAttr(myTCMat+'.outColor', myTCMatSG+'.surfaceShader',f=1)
        
        
        #filter obj
        allShader_TC =[]        
        for selC in objSelRender:
            #print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            #print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            allShader_TC.append(shadersMask[0])              
            
        #print allShader_TC 
        shaderA = max.ls(allShader_TC)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=TCLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myTCMatSG)
            max.select(cl=True)             
                
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            #print u
            #print transparencyPath  
            if transparencyPath!='':
                #create new material
                max.select(objSelRender)
                TCMatName = 'TC_01'
                TCMatSG = 'TCSG_01'
                TCName = 'TCnode_01'
                myTC_A_Mat = max.shadingNode('lambert',asShader=True, n = TCMatName)
                myTC_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=TCMatSG)
                max.connectAttr(myTC_A_Mat+'.outColor', myTC_A_MatSG+'.surfaceShader',f=1)
                
                layeredShaderH = max.shadingNode('layeredShader',asShader=True, n = 'TC_alpha_01')
                layeredShaderHSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='TC_alpha_SG_01')
                max.connectAttr(layeredShaderH+'.outColor',layeredShaderHSG+'.surfaceShader',f=1)
                max.setAttr (layeredShaderH+".compositingFlag", 1)
                max.connectAttr( myTC_A_Mat+'.outColor', layeredShaderH+'.inputs[0].color',f=1)                                
                
                #get alpha node
                max.connectAttr( transparencyPath, layeredShaderH+'.inputs[0].transparency',f=1)
                
                #give material
                max.editRenderLayerGlobals(crl=TCLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = layeredShaderHSG)              
                max.select(cl=True)                                  
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=TCLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myTCMatSG)
                max.select(cl=True)  
        
        removeSky()
       
def aozCreateRenderLayer(*arg):
    if max.iconTextCheckBox('aozcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        #createRenderLayer
        #Prefix=max.textFieldGrp("txtField",q=1,text=True)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        aozLayer = max.createRenderLayer(name=Prefix+"_AOz_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=aozLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=aozLayer)              
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormaaozontrol',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=aozLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=aozLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=aozLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=aozLayer)    
        max.setAttr('miDefaultOptions.maxSamples',2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=aozLayer)  
        max.setAttr('miDefaultOptions.minSamples',0)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=aozLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)        
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=aozLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
         
        aozMatName = 'AOz_01'
        aozMatSG = 'aozSG_01'
        aozName = 'aoznode_01'
        myAozMat = max.shadingNode('lambert',asShader=True, n = aozMatName)
        myAozMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=aozMatSG)
        max.connectAttr(myAozMat+'.outColor', myAozMatSG+'.surfaceShader',f=1)
        max.setAttr(myAozMat+'.ambientColor',1,1,1,type="double3")
        max.setAttr(myAozMat+'.diffuse',0)
        max.addAttr(longName='camNear', attributeType="long",dv=1)
        max.addAttr(longName='camFar', attributeType="long",dv=50)
        max.addAttr(longName='pointWorldYNear', attributeType="long",dv=1)
        max.addAttr(longName='pointWorldYFar', attributeType="long",dv=10)
        aozMibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n='zOcc_01')
        max.setAttr(aozMibOcclusion+'.samples',32)
        max.connectAttr(aozMibOcclusion+".outValueB",myAozMat+'.colorR')
        aozSR1 = max.shadingNode('setRange',au=1,n='aozSR_A')
        max.setAttr(aozSR1+'.valueX',0)
        max.setAttr(aozSR1+'.minX',1)
        max.setAttr(aozSR1+'.maxX',0)
        max.setAttr(aozSR1+'.oldMinX',1)
        max.setAttr(aozSR1+'.oldMaxX',50)
        aozSR2 = max.shadingNode('setRange',au=1,n='aozSR_B')
        max.setAttr(aozSR2+'.valueX',0)
        max.setAttr(aozSR2+'.minX',1)
        max.setAttr(aozSR2+'.maxX',0)
        max.setAttr(aozSR2+'.oldMinX',0)
        max.setAttr(aozSR2+'.oldMaxX',10)
        aozSP = max.shadingNode('samplerInfo',au=1,n='aozSP')
        aozMD = max.shadingNode('multiplyDivide',au=1,n='aozMD')
        max.setAttr(aozMD+'.input1X',0)
        max.setAttr(aozMD+'.input2X',-1)
        max.connectAttr( aozSP+'.pointCameraZ', aozMD+'.input1X',f=1)
        max.connectAttr( aozSP+'.pointWorldY', aozSR2+'.valueX',f=1)
        max.connectAttr( aozMD+'.outputX',aozSR1+'.valueX',f=1)
        max.connectAttr( aozSR1+'.outValueX',myAozMat+'.colorG',f=1)
        max.connectAttr( aozSR2+'.outValueX',myAozMat+'.colorB',f=1)        
        max.connectAttr( myAozMat+'.camNear', aozSR1+'.oldMinX',f=1)
        max.connectAttr( myAozMat+'.camFar', aozSR1+'.oldMaxX',f=1)      
        max.connectAttr( myAozMat+'.camNear', aozSR2+'.oldMinX',f=1)
        max.connectAttr( myAozMat+'.camFar', aozSR2+'.oldMaxX',f=1)

        max.editRenderLayerGlobals(crl=aozLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myAozMatSG)
        max.hyperShade(assign=myAozMatSG)
        max.select(cl=True)  

def InormalCreateRenderLayer(*arg):
    if max.iconTextCheckBox('inormalcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        #createRenderLayer
        #Prefix=max.textFieldGrp("txtField",q=1,text=True)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        InormalLayer = max.createRenderLayer(name=Prefix+"_InvertNormal_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=InormalLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer  
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=InormalLayer)            
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormaInormalontrol',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=InormalLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=InormalLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=InormalLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=InormalLayer)    
        max.setAttr('miDefaultOptions.maxSamples',2) 
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=InormalLayer)
        max.setAttr('miDefaultOptions.minSamples',0) 
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=InormalLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)      
        max.setAttr ('miDefaultOptions.contrastR' ,0.030)
        max.setAttr ('miDefaultOptions.contrastG' ,0.030)
        max.setAttr ('miDefaultOptions.contrastB' ,0.030)
        max.setAttr ('miDefaultOptions.contrastA', 0.030)
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=InormalLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=InormalLayer)  
        max.setAttr('miDefaultOptions.rayTracing',0)
        max.setAttr("miDefaultFramebuffer.datatype",2)
        #createMat
        InormalMatName = 'Inormal_01'
        InormalMatSG = 'InormalSG_01'
        InormalName = 'Inormalnode_01'
        myInormalMat = max.shadingNode('lambert',asShader=True, n = InormalMatName)
        myInormalMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=InormalMatSG)
        max.connectAttr(myInormalMat+'.outColor', myInormalMatSG+'.surfaceShader',f=1)
        max.setAttr(myInormalMat+'.ambientColor',1,1,1,type="double3")
        max.setAttr(myInormalMat+'.diffuse',0)
        InormalSR = max.shadingNode('setRange',au=1,n='InormalSR_01')
        max.setAttr(InormalSR+'.valueX',0)
        max.setAttr(InormalSR+'.valueY',0)
        max.setAttr(InormalSR+'.valueZ',1)
        max.setAttr(InormalSR+'.minX',1)
        max.setAttr(InormalSR+'.minY',1)
        max.setAttr(InormalSR+'.minZ',1)
        max.setAttr(InormalSR+'.oldMinX',-1)
        max.setAttr(InormalSR+'.oldMinY',-1)
        max.setAttr(InormalSR+'.oldMinZ',-1)
        max.setAttr(InormalSR+'.oldMaxX',1)
        max.setAttr(InormalSR+'.oldMaxY',1)
        max.setAttr(InormalSR+'.oldMaxZ',1)
        InormalSP = max.shadingNode('samplerInfo',au=1,n='InormalSP_01')
        max.connectAttr( InormalSP+'.normalCamera',InormalSR+'.value',f=1)
        max.connectAttr( InormalSR+'.outValue',myInormalMat+'.color',f=1)
        #getMat
        max.editRenderLayerGlobals(crl=InormalLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myInormalMatSG)
        max.hyperShade(assign=myInormalMatSG)
        max.select(cl=True)  
       
       
#R_maskMat
def getMaskR(*arg):
    maskRobjSel=max.ls(sl=True)
    max.select(maskRobjSel)
    max.sets(edit=1,forceElement='RSG')
    max.hyperShade(assign='RSG')
    max.select(cl=True)    
#G_maskMat
def getMaskG(*arg):
    maskGobjSel=max.ls(sl=True)
    max.select(maskGobjSel)
    max.sets(edit=1,forceElement='GSG')
    max.hyperShade(assign='GSG')
    max.select(cl=True)    
#B_maskMat
def getMaskB(*arg):
    maskBobjSel=max.ls(sl=True)
    max.select(maskBobjSel)
    max.sets(edit=1,forceElement='BSG')
    max.hyperShade(assign='BSG')
    max.select(cl=True)    
#White_maskMat
def getMaskWhite(*arg):
    maskWhiteObjSel=max.ls(sl=True)
    max.select(maskWhiteObjSel)
    max.sets(edit=1,forceElement='WhiteSG')
    max.hyperShade(assign='WhiteSG')
    max.select(cl=True)
#Black_maskMat
def getMaskBlack(*arg):
    maskBlackObjSel=max.ls(sl=True)
    max.select(maskBlackObjSel)
    max.sets(edit=1,forceElement='BlackSG1')
    max.hyperShade(assign='BlackSG1')
    max.select(cl=True)
#UBG_maskMat  
def getMaskUBG(*arg):
    UBGobjSel=max.ls(sl=True)
    max.select(UBGobjSel)
    max.sets(edit=1,forceElement='UBGMatSG')
    max.hyperShade(assign='UBGMatSG')
    max.select(cl=True)    

#hdr___________________________________________________________________________________________________________________________________
def hdrCreateRenderLayer(*arg):
    if max.iconTextCheckBox('hdrcx',query=True,value=True):
        Date=max.date(f='MMDD')                
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        #createRenderLayer
        #Prefix=max.textFieldGrp("txtField",q=1,text=True)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        hdrLayer = max.createRenderLayer(name=Prefix+"_IBL_01",mc=True,nr=True)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=hdrLayer)
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        #setRenderLayer                  
        #max.setAttr('defaultRenderGlobals.imageFilePrefix',"<Scene>\\<Camera>\\"+Date+'\<RenderLayer>\<RenderLayer>',type='string')
        #max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=hdrLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
        sRGB()       
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=hdrLayer)
        #max.setAttr('defaultRenderGlobals.imageFormat',32)
        RG = pm.PyNode('defaultRenderGlobals')
        RG.setAttr('imageFormat', 51)
        RG.setAttr('imfkey', 'exr')
        mrG = pm.PyNode("mentalrayGlobals")
        mrG.setAttr("imageCompression", 4)        
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=hdrLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",0)
        #max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=hdrLayer)    
        #max.setAttr('miDefaultOptions.maxSamples',2)
        #max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=hdrLayer)
        #max.setAttr('miDefaultOptions.minSamples',0)
          
        
        max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=hdrLayer)
        max.setAttr("miDefaultOptions.miSamplesQualityR",1.00)      
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=hdrLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)                    
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
       
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=hdrLayer)
        max.setAttr('miDefaultOptions.rayTracing',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxReflectionRays',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxRefractionRays',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxRayDepth',4)
       
        max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxShadowRayDepth',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionBlur",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxReflectionBlur',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionBlur",layer=hdrLayer)
        max.setAttr('miDefaultOptions.maxRefractionBlur',1)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=hdrLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultFramebuffer.datatype",layer=hdrLayer)
        max.setAttr ("miDefaultFramebuffer.datatype", 5)
        #createIbl
        IblName = 'IBLIbl_01'
        hdrIbl = max.shadingNode('mentalrayIblShape',au=1,n=IblName)
        max.connectAttr(hdrIbl+".message",'mentalrayGlobals.imageBasedLighting',force=True)
        #mp.setAttr(hdrIbl+".visibleInFinalGather,"1)
       
        max.editRenderLayerAdjustment(hdrIbl+".mapping",layer=hdrLayer)
        max.setAttr(hdrIbl+".mapping",0)
        max.editRenderLayerAdjustment(hdrIbl+".type",layer=hdrLayer)
        max.setAttr(hdrIbl+".type",1)
        max.editRenderLayerAdjustment(hdrIbl+".hardwareFilter",layer=hdrLayer)
        max.setAttr(hdrIbl+".hardwareFilter",1)
        max.editRenderLayerAdjustment(hdrIbl+".primaryVisibility",layer=hdrLayer)
        max.setAttr(hdrIbl+".primaryVisibility",0)
        max.editRenderLayerAdjustment(hdrIbl+".visibleInEnvironment",layer=hdrLayer)
        max.setAttr(hdrIbl+".visibleInEnvironment",1)
        max.editRenderLayerAdjustment(hdrIbl+".visibleInReflections",layer=hdrLayer)
        max.setAttr(hdrIbl+".visibleInReflections",1)
        max.editRenderLayerAdjustment(hdrIbl+".visibleInRefractions",layer=hdrLayer)
        max.setAttr(hdrIbl+".visibleInRefractions",1)
        max.editRenderLayerAdjustment(hdrIbl+".visibleInFinalGather",layer=hdrLayer)
        max.setAttr(hdrIbl+".visibleInFinalGather",1)
       
        IblP2dt = max.shadingNode('place2dTexture',au=1,n='IBLP2dt')
        IblFile = max.shadingNode('file',au=1,n='IBLFile')
                   
        max.connectAttr( IblP2dt+'.outUV', IblFile+'.uvCoord',f=1)
        max.connectAttr( IblP2dt+'.coverage', IblFile+'.coverage',f=1)
        max.connectAttr( IblP2dt+'.outUvFilterSize', IblFile+'.uvFilterSize',f=1)
        max.connectAttr( IblP2dt+'.vertexCameraOne', IblFile+'.vertexCameraOne',f=1)
        max.connectAttr( IblP2dt+'.vertexUvThree', IblFile+'.vertexUvThree',f=1)
        max.connectAttr( IblP2dt+'.vertexUvTwo', IblFile+'.vertexUvTwo',f=1)
        max.connectAttr( IblP2dt+'.vertexUvOne', IblFile+'.vertexUvOne',f=1)
        max.connectAttr( IblP2dt+'.noiseUV', IblFile+'.noiseUV',f=1)
        max.connectAttr( IblP2dt+'.rotateUV', IblFile+'.rotateUV',f=1)
        max.connectAttr( IblP2dt+'.offset', IblFile+'.offset',f=1)
        max.connectAttr( IblP2dt+'.repeatUV', IblFile+'.repeatUV',f=1)
        max.connectAttr( IblP2dt+'.wrapV', IblFile+'.wrapV',f=1)
        max.connectAttr( IblP2dt+'.wrapU', IblFile+'.wrapU',f=1)
        max.connectAttr( IblP2dt+'.stagger', IblFile+'.stagger',f=1)
        max.connectAttr( IblP2dt+'.mirrorV', IblFile+'.mirrorV',f=1)
        max.connectAttr( IblP2dt+'.mirrorU', IblFile+'.mirrorU',f=1)
        max.connectAttr( IblP2dt+'.rotateFrame', IblFile+'.rotateFrame',f=1)
        max.connectAttr( IblP2dt+'.translateFrame', IblFile+'.translateFrame',f=1)
        max.connectAttr( IblFile+'.outColor', hdrIbl+'.color',f=1)
        max.setAttr(IblFile+".filterType" ,0)
        max.editRenderLayerAdjustment(hdrIbl+".color",layer=hdrLayer)
        max.select(hdrIbl)
        shape=max.pickWalk(d='up')
        print shape
        Ib="IBL_Grp_01"
        max.rename(shape,Ib)
        max.select(Ib)
        max.setAttr(Ib+".scaleZ" ,100)
        max.setAttr(Ib+".scaleY" ,100)
        max.setAttr(Ib+".scaleX" ,100)
        #enter image
        fileTexture = max.fileDialog2 (fm=1,cap="Select image/texture(HDRI) in file for IBL renderlayer")
        max.setAttr(IblFile+".fileTextureName",fileTexture[0],type="string",)
       
        #createMat
        hdrMatName = 'IBL_01'
        hdrMatSG = 'IBLSG_01'
        hdrName = 'IBLnode_01'
        myhdrMat = max.shadingNode('blinn',asShader=True, n = hdrMatName)
        myhdrMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=hdrMatSG)
        max.connectAttr(myhdrMat+'.outColor', myhdrMatSG+'.surfaceShader',f=1)
        max.setAttr(myhdrMat+'.color',0,0,0,type="double3")
        max.setAttr(myhdrMat+'.diffuse',0.8)
        max.setAttr(myhdrMat+'.eccentricity',0.01)
        max.setAttr(myhdrMat+'.specularRollOff',1)
        max.setAttr(myhdrMat+'.reflectivity',1)
        max.setAttr(myhdrMat+'.specularColor',1,1,1,type="double3")
        max.setAttr(myhdrMat+'.reflectedColor',0,0,0,type="double3")    
        
        #set ColorManager
        max.setAttr ("defaultRenderGlobals.outputColorProfile", 2)    
        mel.eval("updateCommonColorProfile();") 
        max.setAttr("defaultViewColorManager.imageColorProfile",2)   
        #getMat
        max.editRenderLayerGlobals(crl=hdrLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myhdrMatSG)
        max.hyperShade(assign=myhdrMatSG)
        max.select(cl=True)
           
       

#motionVector__________________________________________________________________________________________________________________________
def motionVectorCreateRenderLayer(*arg):    
    motionVectorset()
    selChooseCam()
           
def motionVectorset(*arg):  
    if max.iconTextCheckBox('mvcx',query=True,value=True):
        Date=max.date(f='MMDD')        
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        #createRenderLayer                
        #Prefix=max.textFieldGrp("txtField",q=1,text=True)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        MVLayer = max.createRenderLayer(name=Prefix+"_MotionVector_01",mc=True,nr=True)
        #setRenderLayer
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=MVLayer)      
        max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=MVLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix',"Z:\Rabbit and Turtle\RenderGroud\Track_01\<Camera>\<RenderPass>\<RenderPass>",type='string')
        sRGB()
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
       
        max.editRenderLayerAdjustment("miDefaultFramebuffer.datatype",layer=MVLayer)
        max.setAttr ("miDefaultFramebuffer.datatype",5)
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFormat",layer=MVLayer)
        max.setAttr ("defaultRenderGlobals.imageFormat",51)
        max.optionMenuGrp("dateType", label = "Date Type:",e=1,sl=8)
               
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        #max.optionMenuGrp('miSampleModeCtrl',edit=1,sl=3)
        max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=MVLayer)
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=MVLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",2)
        max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=MVLayer)
        max.setAttr('miDefaultOptions.minSamples',0)
        max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=MVLayer)    
        max.setAttr('miDefaultOptions.maxSamples',2)
        
        #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=MVLayer)
        #max.setAttr("miDefaultOptions.miSamplesQualityR,1"        
        max.editRenderLayerAdjustment("miDefaultOptions.diagnoseSamples",layer=MVLayer)    
        max.setAttr('miDefaultOptions.diagnoseSamples',0)      
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=MVLayer)
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)
        max.editRenderLayerAdjustment("miDefaultOptions.jitter",layer=MVLayer)
        max.setAttr('miDefaultOptions.jitter',1)
        max.editRenderLayerAdjustment("miDefaultOptions.sampleLock",layer=MVLayer)
        max.setAttr('miDefaultOptions.sampleLock',1)
               
        max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=MVLayer)
        max.setAttr('miDefaultOptions.rayTracing',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxReflectionRays',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxRefractionRays',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxRayDepth',4)
       
        max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxShadowRayDepth',2)
        max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionBlur",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxReflectionBlur',1)
        max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionBlur",layer=MVLayer)
        max.setAttr('miDefaultOptions.maxRefractionBlur',1)
       
        max.editRenderLayerAdjustment("mentalrayGlobals.accelerationMethod",layer=MVLayer)
        max.setAttr('mentalrayGlobals.accelerationMethod',4)
        max.editRenderLayerAdjustment("miDefaultOptions.diagnoseBsp",layer=MVLayer)
        max.setAttr('miDefaultOptions.diagnoseBsp',0)
        max.editRenderLayerAdjustment("miDefaultOptions.shadowMethod",layer=MVLayer)
        max.setAttr('miDefaultOptions.shadowMethod',1)
        max.editRenderLayerAdjustment("miDefaultOptions.shadowMaps",layer=MVLayer)
        max.setAttr('miDefaultOptions.shadowMaps',1)
        max.editRenderLayerAdjustment("miDefaultOptions.motionBlurShadowMaps",layer=MVLayer)
        max.setAttr('miDefaultOptions.motionBlurShadowMaps',1)
               
        max.editRenderLayerAdjustment("miDefaultOptions.motionBlur",layer=MVLayer)
        max.setAttr('miDefaultOptions.motionBlur',2)
        max.editRenderLayerAdjustment("miDefaultOptions.motionBlurBy",layer=MVLayer)
        max.setAttr('miDefaultOptions.motionBlurBy',1)
        max.editRenderLayerAdjustment("miDefaultOptions.shutterDelay",layer=MVLayer)
        max.setAttr('miDefaultOptions.shutterDelay',1)
        max.editRenderLayerAdjustment("miDefaultOptions.shutter",layer=MVLayer)
        max.setAttr('miDefaultOptions.shutter',1)
        max.editRenderLayerAdjustment("miDefaultOptions.motionSteps",layer=MVLayer)
        max.setAttr('miDefaultOptions.motionSteps',1)
        max.editRenderLayerAdjustment("miDefaultOptions.timeContrastA",layer=MVLayer)
        max.setAttr('miDefaultOptions.timeContrastA',1)
       
        max.editRenderLayerAdjustment("mentalrayGlobals.exportCustomMotion",layer=MVLayer)
        max.setAttr('mentalrayGlobals.exportCustomMotion',1)
        max.editRenderLayerAdjustment("mentalrayGlobals.exportMotionOffset",layer=MVLayer)
        max.setAttr('mentalrayGlobals.exportMotionOffset',1)
        max.editRenderLayerAdjustment("mentalrayGlobals.exportMotionOutput",layer=MVLayer)
        max.setAttr('mentalrayGlobals.exportMotionOutput',0)
       
        max.editRenderLayerAdjustment("mentalrayGlobals.exportMotionOutput",layer=MVLayer)
        max.setAttr('mentalrayGlobals.exportMotionOutput',0)      
        max.editRenderLayerAdjustment("miDefaultOptions.finalGather",layer=MVLayer)
        max.setAttr('miDefaultOptions.finalGather',0)
        max.editRenderLayerAdjustment("miDefaultOptions.globalIllum",layer=MVLayer)
        max.setAttr('miDefaultOptions.globalIllum',0)

        #createRenderPass
        max.createNode('renderPass',n='mv2DToxik')
        max.setRenderPassType('mv2DToxik',t='MV2E')
        max.setAttr('mv2DToxik.numChannels',4)
        max.connectAttr (MVLayer+'.renderPass','mv2DToxik.owner',nextAvailable=True)

        #max.createNode('renderPass',n='mv3D')
        #max.setRenderPassType('mv3D',t='MV3')
        #max.setAttr('mv3D.numChannels',4)
        #max.connectAttr (MVLayer+'.renderPass','mv3D.owner',nextAvailable=True)
       
        #max.createNode('renderPass',n='mv2DNormRemap')
        #max.setRenderPassType('mv2DNormRemap',t='MV2N')
        #max.setAttr('mv2DNormRemap.numChannels',4)
        #max.connectAttr (MVLayer+'.renderPass','mv2DNormRemap.owner',nextAvailable=True)
   
        selcetCamA=max.ls(ca=1)
        max.select(selcetCamA)
        print selcetCamA                  
        max.editRenderLayerMembers(MVLayer,selcetCamA, nr=True)
        max.select(cl=True)
        max.ls(sl=0,ca=0)
                                 
def selChooseCam(*arg):
    if max.iconTextCheckBox('mvcx',query=True,value=True):      
        selcetCam=max.ls (ca=1)
        allCamName = max.listRelatives(selcetCam,parent=1)
        print allCamName
        windowsB = max.window('windowsB',t='MotionVector Renderlayer',mnb =False ,mxb = False,sizeable =0)
        mainLayout=max.columnLayout(w=350,h=300)
        max.text(l='Please choose a camrea',fn='fixedWidthFont')
        max.separator(h=5)
        max.optionMenu('camls',label ="Camrea list :",w=200,cc=selCamList )
        for i in range(len(allCamName)):
            camShape=max.menuItem(label=allCamName[i])
            print camShape          
        max.separator(h=5)
        max.rowColumnLayout( numberOfRows=1 )
        camok=max.button('camListOk',l='OK',w=100,command=motionCam)  
        max.button(l='Cancel',w=100,command=('max.deleteUI("windowsB",window=True)'))  
        max.showWindow(windowsB)  
   
def selChooseCamB(*arg):      
    selcetCam=max.ls (ca=1)
    allCamName = max.listRelatives(selcetCam,parent=1)
    print allCamName
    windowsB = max.window('windowsB',t='MotionVector Renderlayer',mnb =False ,mxb = False,sizeable =0)
    mainLayout=max.columnLayout(w=350,h=300)
    max.text(l='Please choose a camrea',fn='fixedWidthFont')
    max.separator(h=5)
    max.optionMenu('camls',label ="Camrea list :",w=200,cc=selCamList )
    for i in range(len(allCamName)):
        camShape=max.menuItem(label=allCamName[i])
        print camShape          
    max.separator(h=5)
    max.rowColumnLayout( numberOfRows=1 )
    camok=max.button('camListOk',l='OK',w=100,command=motionCamB)  
    max.button(l='Cancel',w=100,command=('max.deleteUI("windowsB",window=True)'))  
    max.showWindow(windowsB)      
               
def selCamList(*arg):
    selLisCam=max.optionMenu ('camls',q=1,v=1)
    print selLisCam
    max.select(selLisCam)
    max.pickWalk(d='down')
    max.pickWalk(d='up')
    camShapeName= max.ls(sl=1,fl=1)  
    print camShapeName[0]    
       
def motionCam(*arg):    
    selLisCam=max.optionMenu ('camls',q=1,v=1)
    max.select(selLisCam)
    max.pickWalk(d='down')
    max.pickWalk(d='up')
    camShapeName= max.ls(sl=1,fl=1)  
    print camShapeName[0]  
    nodeName = 'mip_motion_vector_01'
    motionVector = max.createNode( 'mip_motion_vector',n=nodeName)
    max.setAttr('mip_motion_vector_01.floating_point_format',1)
    max.setAttr('mip_motion_vector_01.pixel_threshold',0.001)
    max.select(camShapeName)
    max.editRenderLayerAdjustment (camShapeName[0]+".miOutputShader")# // get cam Output Shader
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeColor",)# // Color
    max.setAttr (camShapeName[0]+".miFbComputeColor", 1)
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeDepth",)# // Depth
    max.setAttr (camShapeName[0]+".miFbComputeDepth", 1)
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeMotion")# // Motion Vectors
    max.setAttr (camShapeName[0]+".miFbComputeMotion",1)
    max.connectAttr(motionVector+".message",camShapeName[0]+".miOutputShader",f=1,)# // connectAttr mip_motion_vector to cam
    windowsB = max.window('windowsB',q=1)
    max.deleteUI('windowsB',window=True)
   
def motionCamB(*arg):    
    selLisCam=max.optionMenu ('camls',q=1,v=1)
    max.select(selLisCam)
    max.pickWalk(d='down')
    max.pickWalk(d='up')
    camShapeName= max.ls(sl=1,fl=1)  
    print camShapeName[0]  
    nodeName = 'mip_motion_vector_01'
    motionVector = max.createNode( 'mip_motion_vector',n=nodeName)
    max.setAttr('mip_motion_vector_01.floating_point_format',1)
    max.setAttr('mip_motion_vector_01.pixel_threshold',0.001)
    max.select(camShapeName)
    max.editRenderLayerAdjustment (camShapeName[0]+".miOutputShader")# // get cam Output Shader
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeColor",)# // Color
    max.setAttr (camShapeName[0]+".miFbComputeColor", 1)
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeDepth",)# // Depth
    max.setAttr (camShapeName[0]+".miFbComputeDepth", 1)
    max.editRenderLayerAdjustment (camShapeName[0]+".miFbComputeMotion")# // Motion Vectors
    max.setAttr (camShapeName[0]+".miFbComputeMotion",1)
    max.connectAttr(motionVector+".message",camShapeName[0]+".miOutputShader",f=1,)# // connectAttr mip_motion_vector to cam  

def customLayer(*arg):  
    if max.iconTextCheckBox('customcx',q=True,v=True):           
        objSelRender = max.ls(sl=1)                     
        renderLayerSetGlobals()                         
        max.select(objSelRender)                    
        customLayer = max.createRenderLayer(name="mian_01",mc=True,nr=True)                                    
        #setRenderLayer
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=customLayer)
        max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')  
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFilePrefix",layer=customLayer)   
        max.setAttr('defaultRenderGlobals.imageFilePrefix','<Scene>\<RenderLayer>\<RenderLayer>',type='string')                                   
        #open render setting
        mel.eval("unifiedRenderGlobalsWindow;")            
        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=customLayer)
        max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')  
        max.setAttr('defaultRenderGlobals.imageFilePrefix','<Scene>\<RenderLayer>\<RenderLayer>',type='string')   
        
        dRG = pm.PyNode('defaultRenderGlobals')
        dRG.setAttr('imageFormat',51)
        dRG.setAttr('imfkey', 'exr')
        mrG = pm.PyNode("mentalrayGlobals")
        mrG.setAttr("imageCompression", 4)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=customLayer)
        max.setAttr('defaultRenderGlobals.imageFormat',32)
        
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)            
        max.setAttr("miDefaultFramebuffer.contourEnable",0)
        
        max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=customLayer)
        max.setAttr("miDefaultOptions.miRenderUsing",0)
        max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=customLayer)    
        max.setAttr('miDefaultOptions.miSamplesQualityR',0.5)
        max.editRenderLayerAdjustment("miDefaultOptions.miSamplesMin",layer=customLayer)    
        max.setAttr('miDefaultOptions.miSamplesMin',3)
     
        max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=customLayer)                
        max.setAttr('miDefaultOptions.filter',2)
        max.setAttr('miDefaultOptions.filterWidth',1)
        max.setAttr('miDefaultOptions.filterHeight',1)  
        max.setAttr('miDefaultOptions.sampleLock',1)                   
        max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
        max.setAttr("miDefaultOptions.motionBlur",2)
        max.setAttr("miDefaultOptions.motionSteps",12)
        max.setAttr("miDefaultFramebuffer.datatype",5)
        max.setAttr("miDefaultOptions.finalGather",1)
        
        #creat Light
        LightName01 = 'main_light_01'       
       
        mainLight_01 = max.ls('main_light_01')
        if len(mainLight_01) == 0:
            max.editRenderLayerGlobals(crl=customLayer)
            max.CreateSpotLight()
            mainLightSet01=max.spotLight( e=True, intensity=10000,rgb=[1,1,1],n=LightName01)
            max.setAttr (mainLightSet01+'.shadowColor',0,0,0,type='double3')
            max.setAttr (mainLightSet01+".decayRate" ,2)
            max.setAttr (mainLightSet01+".coneAngle" ,80)
            max.setAttr (mainLightSet01+".penumbraAngle" ,15)
            max.setAttr (mainLightSet01+".dropoff" ,12)        
            
            max.setAttr (mainLightSet01+".useRayTraceShadows" ,1)
            max.setAttr (mainLightSet01+".lightRadius" ,5)
            max.setAttr (mainLightSet01+".shadowRays" ,30)
            max.setAttr (mainLightSet01+".rayDepthLimit" ,6)
            max.setAttr (mainLightSet01+".translateY" ,60)
            max.setAttr (mainLightSet01+".rotateX" ,-90)
            max.setAttr (mainLightSet01+".scaleX", 20)
            max.setAttr (mainLightSet01+".scaleY", 20)
            max.setAttr (mainLightSet01+".scaleZ", 20)
            max.setAttr (mainLightSet01+".areaLight", 1)
            max.setAttr (mainLightSet01+".areaSamplingU", 5)
            max.setAttr (mainLightSet01+".areaSamplingV", 5)


def arnoldAOCreateRenderLayer(*arg): #________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('arnoldAOcx',query=True,value=True):
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        global arnoldAOLayer
        arnoldAOLayer = max.createRenderLayer(name=Prefix+"_arnoldAO_01",mc=True,nr=True)                
        
        #setRenderLayer
        loadArnoldPlugin()              
        
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=arnoldAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','arnold',type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=arnoldAOLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderLayer>',type='string')                            
        
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=arnoldAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','arnold',type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=arnoldAOLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>_<RenderLayer>',type='string')  
        
        #max.editRenderLayerAdjustment("defaultArnoldDriver.aiTranslator",layer=arnoldAOLayer)
        #max.setAttr ("defaultArnoldDriver.aiTranslator",'exr', type='string')
        max.editRenderLayerAdjustment("defaultArnoldDriver.exrCompression",layer=arnoldAOLayer)
        max.setAttr ("defaultArnoldDriver.exrCompression",3)
        #max.setAttr ("defaultArnoldDriver.pngFormat",0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)        
        max.setAttr ("defaultArnoldRenderOptions.GIDiffuseSamples",0)      
        max.setAttr ("defaultArnoldRenderOptions.GIGlossySamples",0)
        max.setAttr ("defaultArnoldRenderOptions.GIRefractionSamples",0)
        max.setAttr ("defaultArnoldRenderOptions.sssBssrdfSamples",0)
        max.setAttr ("defaultArnoldDriver.autocrop" ,1)
        
        #max.setAttr ("defaultArnoldRenderOptions.motion_blur_enable",1)
        #max.setAttr ("defaultArnoldRenderOptions.range_type",0)
        #max.setAttr ("defaultArnoldRenderOptions.ignoreMotionBlur",1)        
        max.editRenderLayerAdjustment("defaultArnoldRenderOptions.display_gamma",layer=arnoldAOLayer)
        max.setAttr ("defaultArnoldRenderOptions.display_gamma",2.2)
        
        #arnoldAOMat        
        max.select(objSelRender)
        arnoldAOMatName = 'arnoldAO_01'
        arnoldAOMatSG = 'arnoldAOmatSG_01'
        occName = 'arnoldAOnode_01'
        myarnoldAOMat = max.shadingNode('aiAmbientOcclusion',asShader=True, n = arnoldAOMatName)
        global myarnoldAOMatSG
        myarnoldAOMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=arnoldAOMatSG)
        max.connectAttr(myarnoldAOMat+'.outColor',myarnoldAOMatSG+'.surfaceShader',f=1)
        max.setAttr (myarnoldAOMat+".samples",7)                         
        
        #filter obj
        allShader_aAO =[]        
        for selC in objSelRender:
            print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            print sdg
            shadersMask =max.ls(sdg,materials=1)   
            print shadersMask[0]  
            allShader_aAO.append(shadersMask[0])              
            
        print allShader_aAO 
        shaderA = max.ls(allShader_aAO)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        #print selShader 
        suf = max.ls(shaderC,type="surfaceShader" ) 
        #print suf 

        for t in suf:         
            #getMat
            max.editRenderLayerGlobals(crl=arnoldAOLayer)
            max.select(cl=True)
            max.select(t)
            SelA = max.hyperShade( objects='')
            maSel=max.sets(edit=1,forceElement = myarnoldAOMatSG)
            max.select(cl=True)                           
        
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            print u
            print transparencyPath  
            if transparencyPath!='':
                #create new material
                arnoldAOMatName = 'arnoldAO_alpha_01'
                arnoldAOMatSG = 'arnoldAOmatSG_alpha_01'
                occName = 'arnoldAOnode_alpha_01'
                myarnoldAOMat = max.shadingNode('aiAmbientOcclusion',asShader=True, n = arnoldAOMatName)
                aAOAplhaMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=arnoldAOMatSG)
                max.connectAttr(myarnoldAOMat+'.outColor ',aAOAplhaMatSG+'.surfaceShader',f=1)
                max.setAttr (myarnoldAOMat+".samples",7) 
                #get alpha node
                max.select(u)       
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,myarnoldAOMat+'.opacity',f=True)
                #give material
                max.editRenderLayerGlobals(crl=arnoldAOLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = aAOAplhaMatSG) 
                SelC = max.pickWalk(d="up")
                print SelC      
                for obj in SelC:
                    max.setAttr(obj+".aiOpaque",0)
                     
                max.select(cl=True)                              
                print "arnold AO Done!",
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=arnoldAOLayer)
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = myarnoldAOMatSG)
                max.select(cl=True)             
                print "arnold AO Done!"
                
        mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
        max.select(cl=1)
        
        
        
        if max.iconTextCheckBox('arnoldNcx',query=True,value=True):
            aovs.AOVInterface().addAOV('N') 
        if max.iconTextCheckBox('arnoldZcx',query=True,value=True):    
            aovs.AOVInterface().addAOV('Z') 
        if max.iconTextCheckBox('arnoldMVcx',query=True,value=True):
            aovs.AOVInterface().addAOV('motionvector') 
            
        if max.iconTextCheckBox('arnoldDfcx',query=True,value=True):
            aovs.AOVInterface().addAOV('direct_diffuse') 
        if max.iconTextCheckBox('arnoldSpcx',query=True,value=True):    
            aovs.AOVInterface().addAOV('reflection') 
        if max.iconTextCheckBox('arnoldRfecx',query=True,value=True):
            aovs.AOVInterface().addAOV('refraction') 
        #if max.iconTextCheckBox('arnoldsdcx',query=True,value=True):
            #aovs.AOVInterface().addAOV('motionvector')     
                
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
            
        Ao_add_shadows()
        removeSky()

       
def loadAAo(*arg):
    #aAoMat=max.ls(mat='arnoldAO_01',sl=1)
    #print aAoMat
    #if len(aAoMat)==0:
    #    max.confirmDialog (t ="Prompt", m= "Please creat arnold render !" ,b='OK')
    #    print ('Please creat arnold render !'),
    #else:      
   
    max.editRenderLayerAdjustment("defaultArnoldDriver.aiTranslator",layer=arnoldAOLayer)
    max.setAttr ("defaultArnoldDriver.aiTranslator",'exr', type='string')
    max.editRenderLayerAdjustment("defaultArnoldDriver.exrCompression",layer=arnoldAOLayer)
    max.setAttr ("defaultArnoldDriver.exrCompression",3)
    #max.setAttr ("defaultArnoldDriver.pngFormat",0)
    max.setAttr('defaultRenderGlobals.animation',1)
    max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
    max.setAttr('defaultRenderGlobals.periodInExt',2)
    max.setAttr('defaultRenderGlobals.extensionPadding',4)
    max.setAttr('defaultRenderGlobals.modifyExtension',0)
    max.setAttr('defaultRenderGlobals.byFrameStep',1)        
    max.setAttr ("defaultArnoldRenderOptions.GIDiffuseSamples",0)      
    max.setAttr ("defaultArnoldRenderOptions.GIGlossySamples",0)
    max.setAttr ("defaultArnoldRenderOptions.GIRefractionSamples",0)
    max.setAttr ("defaultArnoldRenderOptions.sssBssrdfSamples",0)
    max.setAttr ("defaultArnoldDriver.autocrop" ,1)
   
    #max.setAttr ("defaultArnoldRenderOptions.motion_blur_enable",1)
    #max.setAttr ("defaultArnoldRenderOptions.range_type",0)
    #max.setAttr ("defaultArnoldRenderOptions.ignoreMotionBlur",1)        
    max.editRenderLayerAdjustment("defaultArnoldRenderOptions.display_gamma",layer=arnoldAOLayer)
    max.setAttr ("defaultArnoldRenderOptions.display_gamma",2.2)
    if max.iconTextCheckBox('arnoldNcx',query=True,value=True):
        aovs.AOVInterface().addAOV('N') 
    if max.iconTextCheckBox('arnoldZcx',query=True,value=True):    
        aovs.AOVInterface().addAOV('Z') 
    if max.iconTextCheckBox('arnoldMVcx',query=True,value=True):
        aovs.AOVInterface().addAOV('motionvector') 
    
    #hide obj
    qiObj = max.ls("Plane021","*"+":Plane021",
                     "Plane020","*"+":Plane020",
                     "Plane019","*"+":Plane019",
                     "Plane018","*"+":Plane018",
                     "Plane017","*"+":Plane017",
                     "Plane016","*"+":Plane016",)
    if len(qiObj)==1:
        hideObj = max.select(qiObj) 
        max.HideSelectedObjects(hideObj)                
        max.select(cl=1)
        
    Ao_add_shadows()    
    removeSky()

def MRAo_add_shadows(*arg):
    LReye = max.ls('*Reye*','*Leye*','*REye*','*LEye*','*:*Reye*','*:*Leye*','*:*REye*','*:*LEye*','*:*:*Reye*','*:*:*Leye*','*:*:*REye*','*:*:*LEye*',type="mesh")
    print LReye
    for z in LReye:
        print z 
        max.editRenderLayerAdjustment(z+".receiveShadows",layer=aoLayer) 
        max.editRenderLayerAdjustment(z+".castsShadows",layer=aoLayer)         
        max.setAttr (z+".receiveShadows", 1)
        max.setAttr (z+".castsShadows", 1) 
        print ('eye is OK'),

def DF_add_shadows(*arg):
    LReye = max.ls('*Reye*','*Leye*','*REye*','*LEye*','*:*Reye*','*:*Leye*','*:*REye*','*:*LEye*','*:*:*Reye*','*:*:*Leye*','*:*:*REye*','*:*:*LEye*',type="mesh")
    print LReye
    for z in LReye:
        print z 
        max.editRenderLayerAdjustment(z+".receiveShadows",layer=diffmatLayer) 
        max.editRenderLayerAdjustment(z+".castsShadows",layer=diffmatLayer) 
        max.editRenderLayerAdjustment(z+".visibleInRefractions",layer=diffmatLayer) 
        max.editRenderLayerAdjustment(z+".visibleInReflections",layer=diffmatLayer) 
        max.setAttr (z+".visibleInReflections", 1)
        max.setAttr (z+".visibleInRefractions", 1)        
        max.setAttr (z+".receiveShadows", 1)
        max.setAttr (z+".castsShadows", 1) 
        print ('eye is OK'),

def Ao_add_shadows(*arg):
    LReye = max.ls('*Reye*','*Leye*','*REye*','*LEye*','*:*Reye*','*:*Leye*','*:*REye*','*:*LEye*','*:*:*Reye*','*:*:*Leye*','*:*:*REye*','*:*:*LEye*',type="mesh")
    print LReye
    for z in LReye:
        print z         
        max.editRenderLayerAdjustment(z+".receiveShadows",layer=arnoldAOLayer) 
        max.editRenderLayerAdjustment(z+".castsShadows",layer=arnoldAOLayer)
        max.select(z)
        max.sets(edit=1,forceElement = myarnoldAOMatSG) 
        max.setAttr (z+".receiveShadows", 1)
        max.setAttr (z+".castsShadows", 1)
    Geyes = max.ls("*Leye_G*","*Reye_G*","*:*Leye_G*","*:*Reye_G*","*LEye_G*","*REye_G*","*:*LEye_G*","*:*REye_G*",type="mesh") 
    print Geyes
    for t in Geyes:
        max.setAttr(t+".castsShadows",0)   
        print ('eye is OK'),

def reduce_eye_mat(*arg):
    EGeyeX = []
    EGeyes = max.ls("*Leye_G*","*Reye_G*","*:*Leye_G*","*:*Reye_G*","*LEye_G*","*REye_G*","*:*LEye_G*","*:*REye_G*","*:*LEye*","*:*REye*","*LEye*","*REye*",type="transform") #s=1,o=1,dag=1,
    #print EGeyes
    for r in EGeyes:
        mat = max.ls(r,s=1,o=1,dag=1)
        shadingGrps = max.listConnections(mat,type="shadingEngine")
        #print shadingGrps
        sdg = max.listConnections(shadingGrps[0])
        shadersMask = max.ls(sdg,materials=1)
        EGeyeX.append(shadersMask[0])
        #print EGeyeX
        
        shaderA = max.ls(EGeyeX)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type = "phong" and "lambert" )
        #print selShader
        
        for w in selShader:
            #print w
            NshadingGrps = max.listConnections(w,type="file")
            #print NshadingGrps
            max.setAttr(NshadingGrps[0]+".alphaIsLuminance",0)   
    print ('alphaIsLuminance is 0'),

def line_eye_show(*arg):
    LReye = max.ls('*Reye*','*Leye*','*REye*','*LEye*','*:*Reye*','*:*Leye*','*:*REye*','*:*LEye*','*:*:*Reye*','*:*:*Leye*','*:*:*REye*','*:*:*LEye*',type="mesh")
    print LReye
    for z in LReye:
        max.setAttr(z+".primaryVisibility",1)


def rsAORenderLayer(*arg): #________________________________________________________________________________________________________________________________________________________________
    if max.iconTextCheckBox('rsAOcx',query=True,value=True):
        max.select(objSelRender)        
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA 
        Prefix = str(camA)
        tNum=max.textFieldGrp("tNum",q=1,text=True)
        global rsAOLayer
        rsAOLayer = max.createRenderLayer(name=Prefix+"_rsAO_01",mc=True,nr=True)                
       
        #setRenderLayer
        loadsrPlugin()        
        
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=rsAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','redshift',type='string')
        max.editRenderLayerAdjustment("redshiftOptions.imageFilePrefix",layer=rsAOLayer)
        max.setAttr('redshiftOptions.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')                            
        
        #rsAOMat        
        max.select(objSelRender)
        rsAOMatName = 'rsAO_01'
        rsAOMatSG = 'rsAOmatSG_01'
        occName = 'rsAOnode_01'
        myrsAOMat = max.shadingNode('surfaceShader',asShader=True, n = rsAOMatName)
        AONode = max.shadingNode('RedshiftAmbientOcclusion',asTexture=True, n = occName)
        global myrsAOMatSG
        myrsAOMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=rsAOMatSG)
        max.connectAttr(myrsAOMat+'.outColor',myrsAOMatSG+'.surfaceShader',f=1)
        max.connectAttr(AONode+'.outColor',myrsAOMat+'.outColor',f=1) 
        max.setAttr (AONode+".maxDistance", 20)       
       
        #getMat
        max.editRenderLayerGlobals(crl=rsAOLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myrsAOMatSG)
        max.select(cl=True)              
        
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=rsAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','redshift',type='string')
        max.editRenderLayerAdjustment("redshiftOptions.imageFilePrefix",layer=rsAOLayer)
        max.setAttr('redshiftOptions.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')  
        
        max.setAttr ("defaultRenderGlobals.animation",1)
        max.setAttr ("redshiftOptions.imageFormat",1)
        max.setAttr ("redshiftOptions.exrCompression",4)
        max.setAttr ("redshiftOptions.unifiedMinSamples",6)
        max.setAttr ("redshiftOptions.unifiedMaxSamples",512)
        
        autoGetCam()
        autoGetTime()
       
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
        
        removeSky()
        if max.iconTextCheckBox('rsNcx',query=True,value=True):
            mel.eval('rsCreateAov -type \"Normals\"')
            max.setAttr("rsAov_Normals.exrBits",32)
            max.setAttr("rsAov_Normals.exrCompression",4) 
        if max.iconTextCheckBox('rsZcx',query=True,value=True):    
            mel.eval("rsCreateAov -type \"Depth\"")
            max.setAttr("rsAov_Depth.exrBits",32)
            max.setAttr("rsAov_Depth.exrCompression",4)
        if max.iconTextCheckBox('rsMVcx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Motion Vectors\"")
            max.setAttr ("rsAov_Motion_Vectors.exrBits",32)
            max.setAttr ("rsAov_Motion_Vectors.exrCompression",4) 
        if max.iconTextCheckBox('rsDfcx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Diffuse Filter\"")
            max.setAttr ("rsAov_Diffuse_Filter.exrBits",32)
            max.setAttr ("rsAov_Diffuse_Filter.exrCompression",4) 
        if max.iconTextCheckBox('rsRfecx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Reflections\"") 
            max.setAttr ("rsAov_Reflections.exrBits",32)
            max.setAttr ("rsAov_Reflections.exrCompression",4)              
        if max.iconTextCheckBox('rsRfracx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Refractions\"")
            max.setAttr ("rsAov_Refractions.exrBits",32)
            max.setAttr ("rsAov_Refractions.exrCompression",4)                                       
        if max.iconTextCheckBox('rssdcx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Shadows\"")
            max.setAttr ("rsAov_Shadows.exrBits",32)
            max.setAttr ("rsAov_Shadows.exrCompression",4)  
        if max.iconTextCheckBox('rsSpcx',query=True,value=True):
            mel.eval("rsCreateAov -type \"Specular Lighting\"")
            max.setAttr ("rsAov_Specular_Lighting.exrBits",32)
            max.setAttr ("rsAov_Specular_Lighting.exrCompression",4)                    
                        
        #if max.iconTextCheckBox('rsEmcx',query=True,value=True):
            #mel.eval("redshiftCreateAov \"Emission\"")
        #if max.iconTextCheckBox('rsCacx',query=True,value=True):
            #mel.eval("redshiftCreateAov \"Caustics\"") 
        if max.frameLayout('rsLayout_AovAOVsFrame', exists=1):
            mel.eval('redshiftUpdateActiveAovList') 


def BatchRenderSetting(arg):    
    # windows
    global render_MA_fileA
    global mentalray_fileB
    global arnold_fileB
       
    render_MA_fileA = max.fileDialog2(fm=4,cap="Select some file",dialogStyle=2,okc="Open")
    print render_MA_fileA
    if len(render_MA_fileA) == 0:
        max.confirmDialog (t ="Prompt", m= "Please select a file!" ,b='OK')
    else: 
        if max.iconTextCheckBox('maskcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK') 
        
        elif max.iconTextCheckBox('specularcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK') 
                
        elif max.iconTextCheckBox('linecx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')                 
                
        elif max.iconTextCheckBox('sdcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')                 
                
        elif max.iconTextCheckBox('toonlcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK') 
                
        elif max.iconTextCheckBox('facingcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK') 
                
        elif max.iconTextCheckBox('colorcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')                 
                
        elif max.iconTextCheckBox('normalcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')                 
                                
        elif max.iconTextCheckBox('mvcx',query=True,value=True):  
            mentalray_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Mentalray",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print mentalray_fileB
            if len(mentalray_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')                   
            
        if max.iconTextCheckBox('arnoldAOcx',query=True,value=True):     
            arnold_fileB = max.fileDialog2(fm=2,cap="Save as the path of file for Arnold",dir = "Don't select file ,and please select a path of save!",dialogStyle=2,okc="Save")
            print arnold_fileB
            if len(arnold_fileB) == 0:
                max.confirmDialog (t ="Prompt", m= "Please select a path of save!" ,b='OK')            
                                
        if max.iconTextCheckBox('maskcx',query=True,value=True):                                            
            AutoMentalray()
        elif max.iconTextCheckBox('specularcx',query=True,value=True):                                 
            AutoMentalray()
        elif max.iconTextCheckBox('linecx',query=True,value=True):                                       
            AutoMentalray()
        elif max.iconTextCheckBox('sdcx',q=True,v=True):          
            AutoMentalray()
        elif max.iconTextCheckBox('toonlcx',q=True,v=True):           
            AutoMentalray()
        elif max.iconTextCheckBox('facingcx',q=True,v=True):            
            AutoMentalray()
        elif max.iconTextCheckBox('colorcx',query=True,value=True):           
            AutoMentalray()
        elif max.iconTextCheckBox('normalcx',query=True,value=True):            
            AutoMentalray() 
        elif max.iconTextCheckBox('mvcx',query=True,value=True):         
            AutoMentalray()           
        if max.iconTextCheckBox('arnoldAOcx',query=True,value=True):  
            AutoAronld()
        print "Done!"

def AutoMentalray(*arg):
    #open    
    print render_MA_fileA
    print mentalray_fileB
    
    for x in render_MA_fileA:
        print x
        filePath = str(x)
        print filePath
        max.file(filePath,f=1,open=True)
        print "file is open!"
        #workPass
        mel.eval("displayStyle -wireframe;")
        locator = max.ls(type = "locator")
        print locator
        for k in locator:
            max.setAttr (k+".visibility" ,0)              
       
        objtransform = max.ls(type = "mesh")
        for k in objtransform:
            print k
            max.setAttr(k+".displaySmoothMesh",2)
       
        max.select(cl=1)
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA
        if camA == 0:
           max.confirmDialog (t ="Prompt", m= "Please select a file!" ,b='OK') 
        else:           
            allObj = max.select(all=1)
            print allObj
            objSelRender = max.ls(sl=1)
            print objSelRender            
            max.select (objSelRender)
           
            #loadMentalRayPlugin()
            #loadMentalRayPlugin()
            loadMentalRayPlugin()
            renderLayerSetGlobals()
            sRGB()
            autoGetCam()
            autoGetTime()
            #diffmat//////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('colorcx',q=True,v=True):           
                max.select(objSelRender)        
                Prefix = str(camA)
                tNum = max.textFieldGrp("tNum",q=1,text=True)#
                diffmatLayer = max.createRenderLayer(name=Prefix+"_DiffMat_01",mc=True,nr=True)                                    
                #setRenderLayer
                mel.eval("unifiedRenderGlobalsWindow;")
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
                max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')  
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFilePrefix",layer=diffmatLayer)   
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')  
                if max.iconTextCheckBox('zdcx',q=True,v=True):                                     
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string') 
                if max.iconTextCheckBox('mvcx',query=True,value=True):
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
                if max.iconTextCheckBox('normalcx',q=True,v=True):
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')                                   
                #open render setting
                mel.eval("unifiedRenderGlobalsWindow;")            
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
                max.setAttr('defaultRenderGlobals.ren','mentalRay',type='string')  
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=diffmatLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)            
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=diffmatLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=diffmatLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=diffmatLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=diffmatLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)      
                max.setAttr ('miDefaultOptions.contrastR' ,0.030)
                max.setAttr ('miDefaultOptions.contrastG' ,0.030)
                max.setAttr ('miDefaultOptions.contrastB' ,0.030)
                max.setAttr ('miDefaultOptions.contrastA', 0.030)
                max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=diffmatLayer)                
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=diffmatLayer)
                max.setAttr('miDefaultOptions.rayTracing',0)
                max.setAttr("miDefaultFramebuffer.datatype",2)              
                
                if max.iconTextCheckBox('zdcx',q=True,v=True):
                    max.createNode('renderPass',n='ZDepth')
                    max.setRenderPassType('ZDepth',t='CAMZ')
                    #max.setAttr('ZDepth.numChannels',1)
                    max.connectAttr (diffmatLayer+'.renderPass','ZDepth.owner',nextAvailable=True)
                    max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
                   
                if max.iconTextCheckBox('mvcx',query=True,value=True):
                    max.createNode('renderPass',n='MotionVector2D')
                    max.setRenderPassType('MotionVector2D',t='MV2E')
                    max.setAttr('MotionVector2D.numChannels',4)                      
                    max.connectAttr ( diffmatLayer+'.renderPass','MotionVector2D.owner',nextAvailable=True)
                    max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
               
                if max.iconTextCheckBox('normalcx',q=True,v=True):
                    max.createNode('renderPass',n='Normal')
                    max.setRenderPassType('Normal',t='NORMAL')
                    max.setAttr('Normal.numChannels',4)
                    max.connectAttr (diffmatLayer+'.renderPass','Normal.owner',nextAvailable=True)
                    max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=diffmatLayer)
                    max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')                    
                                            
            #Specular/////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('specularcx',query=True,value=True):
                Date=max.date(f='MMDD')                
                max.select(objSelRender)
                #createRenderLayer
                Prefix = str(camA)
                tNum=max.textFieldGrp("tNum",q=1,text=True)
                specularLayer = max.createRenderLayer(name=Prefix+"_Specular_01",mc=True,nr=True)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=specularLayer)
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
                #setRenderLayer        
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=specularLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=specularLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=specularLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=specularLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=specularLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
                max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=specularLayer)                
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.setAttr("miDefaultFramebuffer.datatype",2) 
                #creat Light
                SPLightNameR = 'SP_lightR_01'
                SPLightNameG = 'SP_lightG_01'
                SPLightNameB = 'SP_lightB_01'        
               
                SP_directionalLight_01 = max.ls('SP_lightR_01')
                if len(SP_directionalLight_01) == 0:
                    max.editRenderLayerGlobals(crl=specularLayer)
                    max.CreateDirectionalLight()
                    SPLightSet01=max.directionalLight( e=True, intensity=1,rgb=[1,0,0],n=SPLightNameR)
                    max.setAttr (SPLightSet01+".rotateX",-30)
                    max.setAttr (SPLightSet01+".rotateY",-60)
                    max.setAttr (SPLightSet01+".rotateZ",-10)
                    max.setAttr (SPLightSet01+".scaleX",3)
                    max.setAttr (SPLightSet01+".scaleY",3)
                    max.setAttr (SPLightSet01+".scaleZ",3)
                    max.setAttr (SPLightSet01+".useRayTraceShadows",0)                  
                           
                SP_directionalLight_02 = max.ls('SP_lightG_01')
                if len(SP_directionalLight_02) == 0:
                    max.editRenderLayerGlobals(crl=specularLayer)
                    max.CreateDirectionalLight()
                    SPLightSet02=max.directionalLight( e=True, intensity=1,rgb=[0,1,0],n=SPLightNameG)
                    max.setAttr (SPLightSet02+".rotateX",-50)
                    max.setAttr (SPLightSet02+".rotateY",55)
                    max.setAttr (SPLightSet02+".rotateZ",-30)
                    max.setAttr (SPLightSet02+".scaleX",3)
                    max.setAttr (SPLightSet02+".scaleY",3)
                    max.setAttr (SPLightSet02+".scaleZ",3)
                    max.setAttr (SPLightSet02+".useRayTraceShadows",0)
               
                SP_directionalLight_03 = max.ls('SP_lightB_01')
                if len(SP_directionalLight_03) == 0:
                    max.editRenderLayerGlobals(crl=specularLayer)
                    max.CreateDirectionalLight()
                    SPLightSet03=max.directionalLight( e=True, intensity=1,rgb=[0,0,1],n=SPLightNameB)
                    max.setAttr (SPLightSet03+".rotateX",80)
                    max.setAttr (SPLightSet03+".rotateY",10)
                    max.setAttr (SPLightSet03+".rotateZ",25)
                    max.setAttr (SPLightSet03+".scaleX",3)
                    max.setAttr (SPLightSet03+".scaleY",3)
                    max.setAttr (SPLightSet03+".scaleZ",3)
                    max.setAttr (SPLightSet03+".useRayTraceShadows",0)
               
                SPLightSelAll = ['SP_lightR_01','SP_lightG_01','SP_lightB_01']        
                directionalLights = max.ls(type='directionalLight')
                max.select(cl=True)
                max.select(SPLightSelAll)        
                max.editRenderLayerMembers(specularLayer,SPLightSelAll, nr=True)
                max.select(cl=True)
                #createMat
                SPMatName = 'SP_'+Prefix+'_01'
                SPMatSG = Prefix+'_SPSG_01'
                SPName = Prefix+'_SPnode_01'
                mySPMat = max.shadingNode('blinn',asShader=True, n = SPMatName)
                mySPMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SPMatSG)
                max.connectAttr(mySPMat+'.outColor',mySPMatSG+'.surfaceShader',f=1)
                max.setAttr(mySPMat+'.diffuse',0.8)
                max.setAttr(mySPMat+'.color',0,0,0,type="double3")
                max.setAttr(mySPMat+'.reflectivity',0)
                max.setAttr(mySPMat+'.eccentricity',0.07)
                max.setAttr(mySPMat+'.specularRollOff',5)                        
               
                #getMat
                max.editRenderLayerGlobals(crl=specularLayer)
                max.select(cl=True)
                max.select(objSelRender)
                max.sets(edit=1,forceElement=mySPMatSG)
                max.hyperShade(assign=mySPMatSG)
                max.select(cl=True)
                
                #hide obj
                qiObj = max.ls("Plane021","*"+":Plane021",
                                 "Plane020","*"+":Plane020",
                                 "Plane019","*"+":Plane019",
                                 "Plane018","*"+":Plane018",
                                 "Plane017","*"+":Plane017",
                                 "Plane016","*"+":Plane016",)
                if len(qiObj)==1:
                    hideObj = max.select(qiObj) 
                    max.HideSelectedObjects(hideObj)                
                    max.select(cl=1)
                
                skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
                print skySel                             
                   
                if len(skySel)==1:
                    max.select(skySel[0])                             
                    max.setAttr(skySel[0]+".visibility", 0)
                    max.select(cl=True)
                    
            #Facing/////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('facingcx',q=True,v=True):
                Date=max.date(f='MMDD')                
                max.select(objSelRender)
                #createRenderLayer
                Prefix = str(camA)
                tNum=max.textFieldGrp("tNum",q=1,text=True)
                facingLayer = max.createRenderLayer(name=Prefix+"_Facing_01",mc=True,nr=True)
                #setRenderLayer
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=facingLayer)
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')                
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=facingLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=facingLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)  
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=facingLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=facingLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=facingLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)              
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=facingLayer)
                max.setAttr('miDefaultOptions.rayTracing',0)
                max.setAttr("miDefaultFramebuffer.datatype",2) 
                #facingMat
                max.select(objSelRender)
                facingMatName = 'Facing_'+Prefix+'_01'
                facingMatSG = Prefix+'_FacingSG_01'
                facingName = Prefix+'_facingnode_01'
                myFacingMat = max.shadingNode('lambert',asShader=True, n = facingMatName)
                myFacingMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=facingMatSG)
                max.connectAttr(myFacingMat+'.outColor',myFacingMatSG+'.surfaceShader',f=1)
                max.setAttr(myFacingMat+'.diffuse',0)
                max.setAttr(myFacingMat+'.ambientColor',1,1,1,type="double3")
                fc_sp = max.shadingNode('samplerInfo',au=1,n='fc_sp_01')
                fc_P2dt = max.shadingNode('place2dTexture',au=1,n='fc_P2dt_01')
                fc_Ramp = max.shadingNode('ramp',at=1,n='fc_Ramp_01')
                max.connectAttr( fc_sp+'.facingRatio', fc_Ramp+'.vCoord',f=1)
                max.connectAttr( fc_P2dt+'.outUV', fc_Ramp+'.uvCoord',f=1)
                max.connectAttr( fc_P2dt+'.outUvFilterSize', fc_Ramp+'.uvFilterSize',f=1)
                max.removeMultiInstance(fc_Ramp+'.colorEntryList[2]',b=True)
                max.setAttr(fc_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(fc_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(fc_Ramp+'.interpolation',1)
                max.setAttr(fc_Ramp+'.colorEntryList[1].position',0)
                max.setAttr(fc_Ramp+'.colorEntryList[0].position',1)
                max.connectAttr(fc_Ramp+'.outColor', myFacingMat+'.color',f=1)
                #getMat
                max.editRenderLayerGlobals(crl=facingLayer)
                max.select(cl=True)
                max.select(objSelRender)
                max.sets(edit=1,forceElement=myFacingMatSG)
                max.hyperShade(assign=myFacingMatSG)
                max.select(cl=True)
                
                #hide obj
                qiObj = max.ls("Plane021","*"+":Plane021",
                                 "Plane020","*"+":Plane020",
                                 "Plane019","*"+":Plane019",
                                 "Plane018","*"+":Plane018",
                                 "Plane017","*"+":Plane017",
                                 "Plane016","*"+":Plane016",)
                if len(qiObj)==1:
                    hideObj = max.select(qiObj) 
                    max.HideSelectedObjects(hideObj)                
                    max.select(cl=1)
                
                skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
                print skySel                             
                   
                if len(skySel)==1:
                    max.select(skySel[0])                             
                    max.setAttr(skySel[0]+".visibility", 0)
                    max.select(cl=True)
           
            #ToonL/////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('toonlcx',q=True,v=True):
                Date=max.date(f='MMDD')                
                max.select(objSelRender)
                #createRenderLayer
                Prefix = str(camA)
                tNum=max.textFieldGrp("tNum",q=1,text=True)
                toonlLayer = max.createRenderLayer(name=Prefix+"_ToonL_01",mc=True,nr=True)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=toonlLayer)
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
                #setRenderLayer              
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=toonlLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=toonlLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=toonlLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=toonlLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=toonlLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
                max.editRenderLayerAdjustment("miDefaultOptions.filter",layer=toonlLayer)              
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=toonlLayer)
                max.setAttr('miDefaultOptions.rayTracing',1)
                max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=toonlLayer)
                max.setAttr('miDefaultOptions.maxReflectionRays',1)
                max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=toonlLayer)
                max.setAttr('miDefaultOptions.maxRefractionRays',1)
                max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=toonlLayer)
                max.setAttr('miDefaultOptions.maxRayDepth',1)
                max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=toonlLayer)
                max.setAttr('miDefaultOptions.maxShadowRayDepth',1)
                max.setAttr("miDefaultFramebuffer.datatype",2)             
                #toonlMat
                max.select(objSelRender)
                toonlMatName = 'ToonL_'+Prefix+'_01'
                toonlMatSG = Prefix+'_ToonLSG_01'
                toonlName = Prefix+'_toonlnode_01'
                myToonlMat = max.shadingNode('lambert',asShader=True, n = toonlMatName)
                myToonlMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=toonlMatSG)
                max.connectAttr(myToonlMat+'.outColor',myToonlMatSG+'.surfaceShader',f=1)
                max.setAttr(myToonlMat+'.diffuse',0)
                max.setAttr(myToonlMat+'.ambientColor',1,1,1,type="double3")
                ToonLsurflm = max.shadingNode('surfaceLuminance',au=1,n='ToonLsurflm')
                ToonLP2dt = max.shadingNode('place2dTexture',au=1,n='ToonLP2dt')
                ToonLRamp = max.shadingNode('ramp',at=1,n='ToonLRamp')
                max.connectAttr( ToonLP2dt+'.outUV', ToonLRamp+'.uv',f=1)
                max.connectAttr( ToonLP2dt+'.outUvFilterSize', ToonLRamp+'.uvFilterSize',f=1)
                TLClamp = max.shadingNode('clamp',au=1,n='TLClamp')
                max.setAttr(TLClamp+'.maxR',1)
                max.connectAttr(ToonLsurflm+'.outValue', TLClamp+'.inputR',f=1)
                max.connectAttr( TLClamp+'.outputR', ToonLRamp+'.vCoord',f=1)
                max.removeMultiInstance(ToonLRamp+'.colorEntryList[2]',b=True)      
                max.setAttr(ToonLRamp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(ToonLRamp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(ToonLRamp+'.interpolation',0)
                max.setAttr(ToonLRamp+'.colorEntryList[1].position',0.2)
                max.connectAttr( ToonLRamp+'.outColor', myToonlMat+'.color',f=1)
                #getMat
                max.editRenderLayerGlobals(crl=toonlLayer)
                max.select(cl=True)
                nObj = max.ls(objSelRender)
                for l in nObj:                        
                    #max.sets(edit=1,forceElement=myToonlMatSG)
                    max.hyperShade(assign=myToonlMatSG) 
                    max.select(cl=True)           
                #createLight
                toonlLightName ="ToonL_light_"+ Prefix +"_01"
                max.editRenderLayerGlobals(crl=toonlLayer)
                max.CreateDirectionalLight()
                toonlLightSet=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=toonlLightName)
                max.setAttr (toonlLightSet+'.shadowColor',0,0,0,type='double3')
                max.setAttr (toonlLightSet+".rotateX" ,-125)
                max.setAttr (toonlLightSet+".scaleX", 3)
                max.setAttr (toonlLightSet+".scaleY", 3)
                max.setAttr (toonlLightSet+".scaleZ", 3)
                directionalLights = max.ls(type='directionalLight')
                max.select(cl=True)
                max.select(directionalLights)        
                max.editRenderLayerMembers(toonlLayer, nr=True)
                max.select(cl=True)
                
                #hide obj
                qiObj = max.ls("Plane021","*"+":Plane021",
                                 "Plane020","*"+":Plane020",
                                 "Plane019","*"+":Plane019",
                                 "Plane018","*"+":Plane018",
                                 "Plane017","*"+":Plane017",
                                 "Plane016","*"+":Plane016",)
                if len(qiObj)==1:
                    hideObj = max.select(qiObj) 
                    max.HideSelectedObjects(hideObj)                
                    max.select(cl=1)
                
                skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
                print skySel  
                                          
                if len(skySel)==1:
                    max.select(skySel[0])                             
                    max.setAttr(skySel[0]+".visibility", 0)
                    max.select(cl=True)

            #Mask///////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('maskcx',q=True,v=True):
                Date=max.date(f='MMDD')
                max.select(objSelRender)
                #createRenderLayer
                Prefix = str(camA)
                tNum=max.textFieldGrp("tNum",q=1,text=True)
                MN = Prefix+"_Mask_01"
                maskLayer = max.createRenderLayer(name=Prefix+"_Mask_01",mc=True,nr=True)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=maskLayer)        
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
                #setRenderLayer            
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=maskLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=maskLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=maskLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=maskLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=maskLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR,1"              
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=maskLayer)
                max.setAttr('miDefaultOptions.rayTracing',0)
                max.setAttr("miDefaultFramebuffer.datatype",2) 
           
                BlackMat = max.ls('Black1')
                if len(BlackMat) == 0:
                    BlackMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = 'Black1')
                    BlackMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='BlackSG1')
                    max.connectAttr(BlackMyMaskMat+'.outColor', BlackMyMaskMatSG+'.surfaceShader',f=1)
                    max.shadingNode('gammaCorrect',asUtility=True, n = 'Black1_gammaCorrect')
                    max.connectAttr ('Black1_gammaCorrect.outValue',BlackMyMaskMat+'.outColor',force=1)
                    max.setAttr("Black1_gammaCorrect.gammaX",0.45)
                    max.setAttr("Black1_gammaCorrect.gammaY",0.45)
                    max.setAttr("Black1_gammaCorrect.gammaZ",0.45)
                    max.setAttr('Black1_gammaCorrect.value',0,0,0, type="double3")

                    #Black_getMat  
                    max.editRenderLayerGlobals(crl=maskLayer)
                    max.select(cl=True)
                    max.select(objSelRender)
                    #max.sets(edit=1,forceElement='BlackSG1')
                    max.hyperShade(assign='BlackSG1')
                    max.select(cl=True)
                    creatMat()
                else:
                    max.editRenderLayerGlobals(crl=maskLayer)
                    max.select(cl=True)
                    max.select(objSelRender)
                    #max.sets(edit=1,forceElement='BlackSG1')
                    max.hyperShade(assign='BlackSG1')
                    max.select(cl=True)
               
                skySel = max.ls("*"+"sky_set","*"+":sky_set",type="displayLayer")
                skyY = max.ls("*"+"sky","*"+":sky",type="transform")
                print skySel
                if len(skySel)==1:
                    if len(skyY)==1:
                        max.select(skyY[0])                             
                        max.setAttr(skyY[0]+".visibility", 1)
                        max.select(cl=True)
               
                autoMask() 
                             
                #hide obj
                qiObj = max.ls("Plane021","*"+":Plane021",
                                 "Plane020","*"+":Plane020",
                                 "Plane019","*"+":Plane019",
                                 "Plane018","*"+":Plane018",
                                 "Plane017","*"+":Plane017",
                                 "Plane016","*"+":Plane016",)
                if len(qiObj)==1:
                    hideObj = max.select(qiObj) 
                    max.HideSelectedObjects(hideObj)                
                    max.select(cl=1)   
                                                   
            #Line/////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('linecx',query=True,value=True):
                max.select(objSelRender)
                #createRenderLayer          
                Prefix = str(camA)
                Num = max.textFieldGrp("tNum",q=1,text=True)#
                LN = Prefix+"_Line_01"
                lineLayer = max.createRenderLayer(name=Prefix+"_Line_01",mc=True,nr=True)
                #setRenderLayer  
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=lineLayer)      
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=lineLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                max.setAttr('defaultRenderGlobals.modifyExtension',1)
                max.setAttr('miDefaultFramebuffer.contourSamples',12)
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0) 
                mel.eval ('unifiedRenderGlobalsWindow;')
                mel.eval ('tabLayout -e -selectTab "mentalRayQualityTab" unifiedRenderGlobalsWindow|rgMainForm|tabForm|mentalRayTabLayout;')
                mel.eval ('fillSelectedTabForCurrentRenderer;')           
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=lineLayer)
                max.setAttr("miDefaultOptions.rayTracing",0)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=lineLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",1)
                max.setAttr("miDefaultFramebuffer.contourClearImage",1)
                max.setAttr("miDefaultFramebuffer.contourSamples",12)
                max.setAttr("miDefaultFramebuffer.contourFilter",2)
                max.setAttr("miDefaultOptions.contourBackground",1)
                max.setAttr("miDefaultOptions.contourInstance",1)
                max.setAttr("miDefaultOptions.contourMaterial",1)
                max.setAttr("miDefaultOptions.contourInvNormal",0)
                max.setAttr("miDefaultOptions.enableContourNormal",1)
                max.setAttr("miDefaultOptions.contourNormal",15)    
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=lineLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.minSamples",layer=lineLayer)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=lineLayer)
                max.setAttr('miDefaultOptions.minSamples',0)  
                max.setAttr('miDefaultOptions.maxSamples',2)      
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)
                max.setAttr("miDefaultFramebuffer.datatype",2) 
                #lineMat
                max.select(objSelRender)
                lineMatName = 'Line_'+Prefix+'_01'
                lineMatSG = Prefix+'_lineSG_01'
                lineName = Prefix+'_linenode_01'
                myLineMat = max.shadingNode('lambert',asShader=True, n = lineMatName)
                myLineMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=lineMatSG)
                max.connectAttr(myLineMat+'.outColor',myLineMatSG+'.surfaceShader',f=1)
                max.setAttr(myLineMat+'.color',0,0,0, type="double3")
                max.setAttr(myLineMat+'.diffuse',0)
                max.setAttr(myLineMatSG+'.miContourEnable',1)
                max.setAttr(myLineMatSG+'.miContourColor',0,0,0, type="double3")
                max.setAttr(myLineMatSG+'.miContourWidth',0.6)
                #getMat
                max.editRenderLayerGlobals(crl=lineLayer)
                max.select(cl=True)
                max.select(objSelRender)
                max.sets(edit=1,forceElement=myLineMatSG)
                max.hyperShade(assign=myLineMatSG)
                max.select(cl=True)
                
                #updateRenderUI
                mel.eval ('unifiedRenderGlobalsWindow;')
                mel.eval ('tabLayout -e -selectTab "mentalRayQualityTab" unifiedRenderGlobalsWindow|rgMainForm|tabForm|mentalRayTabLayout;')
                mel.eval ('fillSelectedTabForCurrentRenderer;')
                mel.eval('window -e -vis 0 unifiedRenderGlobalsWindow;')
                
                #hide obj
                qiObj = max.ls("Plane021","*"+":Plane021",
                                 "Plane020","*"+":Plane020",
                                 "Plane019","*"+":Plane019",
                                 "Plane018","*"+":Plane018",
                                 "Plane017","*"+":Plane017",
                                 "Plane016","*"+":Plane016",)
                if len(qiObj)==1:
                    hideObj = max.select(qiObj) 
                    max.HideSelectedObjects(hideObj)                
                    max.select(cl=1)                
                skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
                print skySel  

                if len(skySel)==1:
                    max.select(skySel[0])                             
                    max.setAttr(skySel[0]+".visibility", 0)
                    max.select(cl=True)   
                                         
           #/////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
            CLL = max.ls("*"+"DiffMat_01","*"+":"+"*"+"DiffMat_01",type="renderLayer") 
            print CLL
            TLL = max.ls("*"+"ToonL_01","*"+":"+"*"+"ToonL_01",type="renderLayer")
            print TLL                                          
            if len(CLL) == 0:  
                if len(TLL) == 1:                
                    if max.iconTextCheckBox('zdcx',q=True,v=True):
                        max.select(TLL[0]) 
                        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=toonlLayer)
                        mel.eval('editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix"; ')   
                        max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
                        max.createNode('renderPass',n='ZDepth')
                        max.setRenderPassType('ZDepth',t='CAMZ')
                        max.setAttr('ZDepth.numChannels',4)
                        max.connectAttr (toonlLayer+'.renderPass','ZDepth.owner',nextAvailable=True)
                        #mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
                        #mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')
                       
                    if max.iconTextCheckBox('mvcx',query=True,value=True):
                        max.select(TLL[0])
                        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=toonlLayer)
                        mel.eval('editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix"; ') 
                        max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
                        max.createNode('renderPass',n='MotionVector2D')
                        max.setRenderPassType('MotionVector2D',t='MV2E')
                        max.setAttr('MotionVector2D.numChannels',4)                      
                        max.connectAttr ( toonlLayer+'.renderPass','MotionVector2D.owner',nextAvailable=True)
                        #mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
                        #mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')                        
                   
                    if max.iconTextCheckBox('normalcx',q=True,v=True):
                        max.select(TLL[0])
                        max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=toonlLayer)
                        mel.eval('editRenderLayerAdjustment "defaultRenderGlobals.imageFilePrefix"; ')   
                        max.setAttr('defaultRenderGlobals.imageFilePrefix','<Camera>\<RenderPass>\<RenderPass>',type='string')
                        max.createNode('renderPass',n='Normal')
                        max.setRenderPassType('Normal',t='NORMAL')
                        max.setAttr('Normal.numChannels',4)
                        max.connectAttr (toonlLayer+'.renderPass','Normal.owner',nextAvailable=True) 
                        #mel.eval('renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "1";')
                        #mel.eval('updateEditorFeedbackRenderLayer RenderLayerTab defaultRenderLayer;')
                    
                    
            #Shadow/////////////////////////////////////////////////////////////////////////////////////////////////////////
            if max.iconTextCheckBox('sdcx',q=True,v=True):
                Date=max.date(f='MMDD')                
                max.select(objSelRender)
                #createRenderLayer
                Prefix = str(camA)
                tNum=max.textFieldGrp("tNum",q=1,text=True)
                SDLayer = max.createRenderLayer(name=Prefix+"_Shadow_01",mc=True,nr=True)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.currentRenderer",layer=SDLayer)
                max.setAttr('defaultRenderGlobals.ren', 'mentalRay', type='string')
                #setRenderLayer          
                max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string')
                max.setAttr('defaultRenderGlobals.outFormatControl',0)
                max.setAttr('defaultRenderGlobals.animation',1)
                max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
                max.setAttr('defaultRenderGlobals.periodInExt',2)
                max.setAttr('defaultRenderGlobals.extensionPadding',4)
                max.editRenderLayerAdjustment ("defaultRenderGlobals.imageFormat",layer=SDLayer)
                max.setAttr('defaultRenderGlobals.imageFormat',32)
                max.setAttr('defaultRenderGlobals.modifyExtension',0)
                max.setAttr('defaultRenderGlobals.byFrameStep',1)
                max.editRenderLayerAdjustment("miDefaultFramebuffer.contourEnable",layer=SDLayer)
                max.setAttr("miDefaultFramebuffer.contourEnable",0)
                max.editRenderLayerAdjustment("miDefaultOptions.miRenderUsing",layer=SDLayer)
                max.setAttr("miDefaultOptions.miRenderUsing",2)
                max.editRenderLayerAdjustment("miDefaultOptions.maxSamples",layer=SDLayer)    
                max.setAttr('miDefaultOptions.maxSamples',2)
                #max.editRenderLayerAdjustment("miDefaultOptions.miSamplesQualityR",layer=SDLayer)
                #max.setAttr("miDefaultOptions.miSamplesQualityR",1.25)
                max.setAttr ('miDefaultOptions.contrastR' ,0.030)
                max.setAttr ('miDefaultOptions.contrastG' ,0.030)
                max.setAttr ('miDefaultOptions.contrastB' ,0.030)
                max.setAttr ('miDefaultOptions.contrastA', 0.030)              
                max.setAttr('miDefaultOptions.filter',2)
                max.setAttr('miDefaultOptions.filterWidth',1)
                max.setAttr('miDefaultOptions.filterHeight',1)                    
                max.setAttr('defaultRenderGlobals.enableDefaultLight',0)
                max.editRenderLayerAdjustment("miDefaultOptions.rayTracing",layer=SDLayer)
                max.setAttr("miDefaultOptions.rayTracing", 1)
                max.editRenderLayerAdjustment("miDefaultOptions.maxRefractionRays",layer=SDLayer)
                max.setAttr("miDefaultOptions.maxRefractionRays",10)
                max.editRenderLayerAdjustment("miDefaultOptions.maxReflectionRays",layer=SDLayer)
                max.setAttr("miDefaultOptions.maxReflectionRays",10)
                max.editRenderLayerAdjustment("miDefaultOptions.maxRayDepth",layer=SDLayer)
                max.setAttr("miDefaultOptions.maxRayDepth",20)
                max.editRenderLayerAdjustment("miDefaultOptions.maxShadowRayDepth",layer=SDLayer)
                max.setAttr("miDefaultOptions.maxShadowRayDepth",2)
                max.setAttr("miDefaultOptions.maxReflectionBlur",1)
                max.setAttr("miDefaultOptions.maxRefractionBlur",1)
                max.setAttr("miDefaultFramebuffer.datatype",2)         
                #SDMat
                max.select(objSelRender)
                SDMatName = 'Shadow_'+Prefix+'_01'
                SDMatSG = Prefix+'_ShadowSG_01'
                SDName = Prefix+'_SDnode_01'
                mySDMat = max.shadingNode('rampShader',asShader=True, n = SDMatName)
                mySDMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SDMatSG)
                max.connectAttr(mySDMat+'.outColor', mySDMatSG+'.surfaceShader',f=1)
                max.setAttr(mySDMat+'.color[0].color_Color',0,0,0,type="double3")
                max.setAttr(mySDMat+'.color[0].color_Interp',2)
                max.setAttr(mySDMat+'.color[1].color_Position',1)
                max.setAttr(mySDMat+'.color[1].color_Color',1,1,1,type="double3")
                max.setAttr(mySDMat+'.color[1].color_Interp',2)
                max.setAttr(mySDMat+'.diffuse',0)
                max.setAttr(mySDMat+'.translucence',1)
                max.setAttr(mySDMat+'.translucenceDepth',1000)
                max.setAttr(mySDMat+'.specularity',0)
                max.setAttr(mySDMat+'.eccentricity',0)
                max.setAttr(mySDMat+'.reflectivity[0].reflectivity_Position',0)
                max.setAttr(mySDMat+'.reflectivity[0].reflectivity_FloatValue',0)        
                #getMat
                max.editRenderLayerGlobals(crl=SDLayer)
                max.select(cl=True)
                max.select(objSelRender)
                max.sets(edit=1,forceElement=mySDMatSG)
                max.hyperShade(assign=mySDMatSG)          
                #createLight
                SDLightName ="SD_light_"+ Prefix + "_01"
                max.editRenderLayerGlobals(crl=SDLayer)
                max.CreateDirectionalLight()
                SDLightSet=max.directionalLight( e=True, intensity=1,rgb=[1,1,1],n=SDLightName)
                max.setAttr (SDLightSet+'.shadowColor',0,0,0,type='double3')
                max.setAttr (SDLightSet+".useRayTraceShadows" ,1)
                max.setAttr (SDLightSet+".lightAngle" ,10)
                max.setAttr (SDLightSet+".shadowRays" ,30)
                max.setAttr (SDLightSet+".rayDepthLimit" ,30)
                max.setAttr (SDLightSet+".rotateX" ,-45)
                max.setAttr (SDLightSet+".scaleX", 3)
                max.setAttr (SDLightSet+".scaleY", 3)
                max.setAttr (SDLightSet+".scaleZ", 3)
                directionalLights = max.ls(type='directionalLight')
                max.select(cl=True)
                max.select(directionalLights)        
                max.editRenderLayerMembers(SDLayer, nr=True)
                max.select(cl=True)
           
                skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
                print skySel                            
                   
                if len(skySel)==1:
                    max.select(skySel[0])                             
                    max.setAttr(skySel[0]+".visibility", 0)
                    max.select(cl=True)                                
           
            #set camera
            cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
            print cam            
            max.setAttr(cam[0]+".renderable",1)
            max.setAttr("perspShape.renderable",0)
            max.setAttr("frontShape.renderable",0)
            max.setAttr("sideShape.renderable",0)
            max.setAttr("topShape.renderable",0)
           
            #set time
            timeNow = max.currentTime(q=1)
            print timeNow
            minTime = max.playbackOptions (q=1,minTime=1)
            print int(minTime)
            maxTime = max.playbackOptions (q=1,maxTime=1)
            print int(maxTime)
            max.setAttr ("defaultRenderGlobals.startFrame", int(minTime))
            max.setAttr ("defaultRenderGlobals.endFrame", int(maxTime))
           
             
            skySel = max.ls("sky","*"+":sky",typ="transform")
            print skySel
            if len(skySel)==1:                             
                if max.iconTextCheckBox('specularcx',query=True,value=True):                                  
                    max.editRenderLayerMembers(specularLayer,skySel[0],remove=1, nr=True)
                if max.iconTextCheckBox('linecx',query=True,value=True):                                  
                    max.editRenderLayerMembers(lineLayer,skySel[0],remove=1, nr=True)
                if max.iconTextCheckBox('sdcx',q=True,v=True):
                    max.editRenderLayerMembers(SDLayer,skySel[0],remove=1, nr=True)
                if max.iconTextCheckBox('toonlcx',q=True,v=True):
                    max.editRenderLayerMembers(toonlLayer,skySel[0],remove=1, nr=True)
                if max.iconTextCheckBox('facingcx',q=True,v=True):
                    max.editRenderLayerMembers(facingLayer,skySel[0],remove=1, nr=True)                       
               
                fileNameA = max.file(q=1,sceneName=1)
                print fileNameA
                fileNameB = fileNameA.split(".")
                print fileNameB
                fileNameC = fileNameB[0].split("/")
                print fileNameC[-1]        
               
                fileName = fileNameC[-1]+"_Mentalray"
                path = mentalray_fileB
                fullName = path[0]+"/"+fileName+".mb"
                print fullName
                max.file (rn=fullName)
                max.file (f=1,save=1)
                max.file (force=True, new=True )
               
            else:                
                #save as
                fileNameA = max.file(q=1,sceneName=1)
                print fileNameA
                fileNameB = fileNameA.split(".")
                print fileNameB
                fileNameC = fileNameB[0].split("/")
                print fileNameC[-1]                    
               
                fileName = fileNameC[-1]+"_Mentalray"
                print fileName
                path = mentalray_fileB
                print path[0]+"/"+fileName+".mb"
                fullName = path[0]+"/"+fileName+".mb"
                print fullName
                max.file (rn=fullName)
                max.file (f=1,save=1)
                max.file (force=True, new=True )

def AutoAronld(*arg):
    #if max.iconTextCheckBox('arnoldAOcx',query=True,value=True): 
    print render_MA_fileA
    print arnold_fileB  
            
    for x in render_MA_fileA:
        print x
        filePath = str(x)
        print filePath
        max.file(filePath,f=1,open=True)
        print "file is open!"
        #workPass
        mel.eval("displayStyle -wireframe;")
        locator = max.ls(type = "locator")
        print locator
        for k in locator:
            max.setAttr (k+".visibility" ,0)              
       
        objtransform = max.ls(type = "mesh")
        for k in objtransform:
            print k
            max.setAttr(k+".displaySmoothMesh",2)
       
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam
        camB = max.ls("shot_"+"*","*"+":shot_"+"*",type = "transform")
        print camB
        camC = camB[0].split(":")
        camA = camC[-1]
        print camA                       
                   
        allObj = max.select(all=1)
        print allObj
        objSelRender = max.ls(sl=1)
        print objSelRender            
        max.select (objSelRender)
        
        loadArnoldPlugin()
        renderLayerSetGlobals_arnold()
        autoGetCam()
        autoGetTime()
        
        #createRenderLayer                
        max.select(objSelRender)        
        Prefix = str(camA)
        print Prefix
        tNum = max.textFieldGrp("tNum",q=1,text=True)
        global arnoldAOLayer
        arnoldAOLayer = max.createRenderLayer(name=Prefix+"_arnoldAO_01",mc=True,nr=True)                
       
        #setRenderLayer
        #loadArnoldPlugin()
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=arnoldAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','arnold',type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=arnoldAOLayer)
        #max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>_<RenderLayer>',type='string')                          
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderLayer>\<RenderLayer>',type='string') 
        #arnoldAOMat        
        max.select(objSelRender)
        arnoldAOMatName = 'arnoldAO_01'
        arnoldAOMatSG = 'arnoldAOmatSG_01'
        occName = 'arnoldAOnode_01'
        myarnoldAOMat = max.shadingNode('aiAmbientOcclusion',asShader=True, n = arnoldAOMatName)
        global myarnoldAOMatSG
        myarnoldAOMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=arnoldAOMatSG)
        max.connectAttr(myarnoldAOMat+'.outColor',myarnoldAOMatSG+'.surfaceShader',f=1)
        max.setAttr (myarnoldAOMat+".samples",7)        
       
        #getMat
        max.editRenderLayerGlobals(crl=arnoldAOLayer)
        max.select(cl=True)
        max.select(objSelRender)
        max.sets(edit=1,forceElement=myarnoldAOMatSG)
        max.hyperShade(assign=myarnoldAOMatSG)
        max.select(cl=True)              
       
        mel.eval("unifiedRenderGlobalsWindow;")
        max.editRenderLayerAdjustment("defaultRenderGlobals.currentRenderer",layer=arnoldAOLayer)      
        max.setAttr('defaultRenderGlobals.ren','arnold',type='string')
        max.editRenderLayerAdjustment("defaultRenderGlobals.imageFilePrefix",layer=arnoldAOLayer)
        max.setAttr('defaultRenderGlobals.imageFilePrefix','Z:\Rabbit and Turtle\RenderGroud\\'+tNum+'\images\<Camera>\<RenderPass>\<RenderPass>_<RenderLayer>',type='string')  
        max.editRenderLayerAdjustment("defaultArnoldDriver.aiTranslator",layer=arnoldAOLayer)
        max.setAttr ("defaultArnoldDriver.aiTranslator",'exr', type='string')
        max.editRenderLayerAdjustment("defaultArnoldDriver.exrCompression",layer=arnoldAOLayer)
        max.setAttr ("defaultArnoldDriver.exrCompression",3)
        #max.setAttr ("defaultArnoldDriver.pngFormat",0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)
        max.setAttr('defaultRenderGlobals.modifyExtension',0)
        max.setAttr('defaultRenderGlobals.byFrameStep',1)        
        max.setAttr("defaultArnoldRenderOptions.GIDiffuseSamples",0)      
        max.setAttr("defaultArnoldRenderOptions.GIGlossySamples",0)
        max.setAttr("defaultArnoldRenderOptions.GIRefractionSamples",0)
        max.setAttr("defaultArnoldRenderOptions.sssBssrdfSamples",0)
        max.setAttr("defaultArnoldDriver.autocrop" ,1)          
        max.editRenderLayerAdjustment("defaultArnoldRenderOptions.display_gamma",layer=arnoldAOLayer)
        max.setAttr ("defaultArnoldRenderOptions.display_gamma",2.2)
        mel.eval("window -e -vis 0 unifiedRenderGlobalsWindow;")
        
        #hide obj
        qiObj = max.ls("Plane021","*"+":Plane021",
                         "Plane020","*"+":Plane020",
                         "Plane019","*"+":Plane019",
                         "Plane018","*"+":Plane018",
                         "Plane017","*"+":Plane017",
                         "Plane016","*"+":Plane016",)
        if len(qiObj)==1:
            hideObj = max.select(qiObj) 
            max.HideSelectedObjects(hideObj)                
            max.select(cl=1)
                         
        #set camera
        cam = max.ls("shot_"+"*","*"+":shot_"+"*",type = "camera")
        print cam            
        max.setAttr(cam[0]+".renderable",1)
        max.setAttr("perspShape.renderable",0)
        max.setAttr("frontShape.renderable",0)
        max.setAttr("sideShape.renderable",0)
        max.setAttr("topShape.renderable",0)
       
        #set time
        timeNow = max.currentTime(q=1)
        print timeNow
        minTime = max.playbackOptions (q=1,minTime=1)
        print int(minTime)
        maxTime = max.playbackOptions (q=1,maxTime=1)
        print int(maxTime)
        max.setAttr ("defaultRenderGlobals.startFrame", int(minTime))
        max.setAttr ("defaultRenderGlobals.endFrame", int(maxTime))
       
        skySel = max.ls("sky","*"+":sky",typ="transform")#skyObj,r=1,sl=1,    
        print skySel  
        if len(skySel)==1:             
            max.select(skySel[0])
            whatLocator = max.pickWalk (d = "up")
            print whatLocator
            #if whatLocator[0] == "sky":
            #    pass
            #else :  
            #    max.select(skySel[0])  
            #    max.parent(w=1)                             
           
            if len(skySel)==1:
                max.select(skySel[0])                             
                max.setAttr(skySel[0]+".visibility", 0)
                max.select(cl=True)               
           
            fileNameA = max.file(q=1,sceneName=1)
            print fileNameA
            fileNameB = fileNameA.split(".")
            print fileNameB
            fileNameC = fileNameB[0].split("/")
            print fileNameC[-1]        
           
            fileName = fileNameC[-1]+"_arnoldOcc"
            path = arnold_fileB
            fullName = path[0]+"/"+fileName+".mb"
            print fullName
            max.file (rn=fullName)
            max.file (f=1,save=1)
            max.file (force=True, new=True )
           
        else:                
            #save as
            fileNameA = max.file(q=1,sceneName=1)
            print fileNameA
            fileNameB = fileNameA.split(".")
            print fileNameB
            fileNameC = fileNameB[0].split("/")
            print fileNameC[-1]                    
           
            fileName = fileNameC[-1]+"_arnoldOcc"
            print fileName
            path = arnold_fileB
            print path[0]+"/"+fileName+".mb"
            fullName = path[0]+"/"+fileName+".mb"
            print fullName
            max.file (rn=fullName)
            max.file (f=1,save=1)
            max.file (force=True, new=True )

def autoMask(*arg):                    
    #blue    
    #sky_set = max.ls("*"+"sky_set","*"+":sky_set",type="displayLayer")
    #print sky_set 
    #if len(sky_set) == True:    
    #    sky_setMembers = str(sky_set[0])
    #    print sky_setMembers 
    #    sky_setMembersLs = max.editDisplayLayerMembers(sky_setMembers,q=1,fullNames=1)
    #    print sky_setMembersLs
    #    sky_setls = max.ls(sky_setMembersLs)
    #    print sky_setls
    #    for d in sky_setls:
    #        max.select(d)                                                      
    #        max.sets(edit=1,forceElement='BSG')
    #        max.hyperShade(assign='BSG')
    #        max.select(cl=True)
    #    print "ID of sky_set is ok!"                                         
           
    #red    
    #scenes_set = max.ls("*"+"scenes_set","*"+":scenes_set",type="displayLayer")
    #print scenes_set 
    #if len(scenes_set) == True:    
    #    scenes_setMembers = str(scenes_set[0])
    #    print scenes_setMembers 
    #    scenes_setMembersLs = max.editDisplayLayerMembers(scenes_setMembers,q=1, fullNames=1)
    #    print scenes_setMembersLs
    #    scenes_setls = max.ls(scenes_setMembersLs)
    #    print scenes_setls
    #    for d in scenes_setls:
    #        max.select(d)                                                      
    #        max.sets(edit=1,forceElement='RSG')
    #        max.hyperShade(assign='RSG')
    #        max.select(cl=True)
    #    print "ID of scenes_set is ok!"  
        
    #green    
    #floor_set = max.ls("*"+"floor_set","*"+":floor_set",type="displayLayer")
    #print floor_set 
    #if len(floor_set) == True:    
    #    floor_setMembers = str(floor_set[0])
    #    print floor_setMembers 
    #    print floor_setMembersLs
    #    floor_setls = max.ls(floor_setMembersLs)
    #    print floor_setls
    #    for d in floor_setls:
    #        max.select(d)                                                      
    #        max.sets(edit=1,forceElement='GSG')
    #        max.hyperShade(assign='GSG')
    #        max.select(cl=True)
    #    print "ID of floor_set is ok!"                      
   
    #props_all  0.44,0.77,0.66
    #props_allSet = max.ls("P_*","*:P_*",type="displayLayer")
    
    #props_allMat = max.ls('props_all_mask',type="surfaceShader")
    #print props_allSet 
    #if len(props_allSet) > 0:
    #    if len(props_allMat) == 0:
    #        max.shadingNode('surfaceShader',asShader=True, n = 'props_all_mask')
    #        max.sets(renderable=True,noSurfaceShader=True,em=True,n='props_all_maskSG')
    #        max.connectAttr('props_all_mask.outColor','props_all_maskSG.surfaceShader',f=1)            
    #        max.shadingNode('gammaCorrect',asUtility=True, n = 'props_all_gammaCorrect')
    #        max.connectAttr ('props_all_gammaCorrect.outValue','props_all_mask.outColor',force=1)
    #        max.setAttr("props_all_gammaCorrect.gammaX",0.45)
    #        max.setAttr("props_all_gammaCorrect.gammaY",0.45)
    #        max.setAttr("props_all_gammaCorrect.gammaZ",0.45)
    #        max.setAttr('props_all_gammaCorrect.value',0.44,0.77,0.66, type="double3")
        
    #    for props_allMembers in props_allSet:
    #        props_allMembersLs = max.editDisplayLayerMembers(props_allMembers,q=1,fullNames=1)
    #        print props_allMembersLs
    #        props_allSetls = max.ls(props_allMembersLs)
    #        print props_allSetls
    #        for d in props_allSetls:
    #            max.select(d)                                                       
    #            max.sets(edit=1,forceElement='props_all_maskSG')
    #            max.hyperShade(assign='props_all_maskSG')
    #            max.select(cl=True)
    #        print "ID of Props_all is ok!"                                                                                          
                                                                
    #chars_ZZG  0.5,1,0.5
    ZZGSet = max.ls("*"+"ZZG"+"*","*"+":ZZG"+"*",type="displayLayer")
    print ZZGSet
    ZZGMat = max.ls('ZZG_mask',type="surfaceShader")
    print ZZGMat 
    if len(ZZGSet) >= True:
        if len(ZZGMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'ZZG_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='ZZG_maskSG')
            max.connectAttr('ZZG_mask.outColor','ZZG_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'ZZG_gammaCorrect')
            max.connectAttr ('ZZG_gammaCorrect.outValue','ZZG_mask.outColor',force=1)
            max.setAttr("ZZG_gammaCorrect.gammaX",0.45)
            max.setAttr("ZZG_gammaCorrect.gammaY",0.45)
            max.setAttr("ZZG_gammaCorrect.gammaZ",0.45)
            max.setAttr('ZZG_gammaCorrect.value',0.5,1,0.5, type="double3")
        
        for ZZG in ZZGSet:
            ZZGMembers = str(ZZG)
            ZZGMembersLs = max.editDisplayLayerMembers(ZZGMembers,q=1,fullNames=1)
            ZZGSetls = max.ls(ZZGMembersLs)
            print ZZGSetls
            for d in ZZGSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='ZZG_maskSG')
                max.hyperShade(assign='ZZG_maskSG')
                max.select(cl=True)
            print "ID of ZZG is ok!"
                        
    #chars_BBT_Mother  0.88,0.15,1
    BBT_MotherSet = max.ls("*"+"BBT_Mother","*"+":BBT_Mother",type="displayLayer")
    BBT_MotherMat = max.ls('BBT_Mother_mask',type="surfaceShader")
    print BBT_MotherSet 
    if len(BBT_MotherSet) == True:
        if len(BBT_MotherMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BBT_Mother_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BBT_Mother_maskSG')
            max.connectAttr('BBT_Mother_mask.outColor','BBT_Mother_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BBT_Mother_gammaCorrect')
            max.connectAttr ('BBT_Mother_gammaCorrect.outValue','BBT_Mother_mask.outColor',force=1)
            max.setAttr("BBT_Mother_gammaCorrect.gammaX",0.45)
            max.setAttr("BBT_Mother_gammaCorrect.gammaY",0.45)
            max.setAttr("BBT_Mother_gammaCorrect.gammaZ",0.45)
            max.setAttr('BBT_Mother_gammaCorrect.value',0.88,0.15,1, type="double3")
        
        BBT_MotherMembers = str(BBT_MotherSet[0])
        print BBT_MotherMembers 
        BBT_MotherMembersLs = max.editDisplayLayerMembers(BBT_MotherMembers,q=1,fullNames=1)
        print BBT_MotherMembersLs
        BBT_MotherSetls = max.ls(BBT_MotherMembersLs)
        print BBT_MotherSetls
        for d in BBT_MotherSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BBT_Mother_maskSG')
            max.hyperShade(assign='BBT_Mother_maskSG')
            max.select(cl=True)
        print "ID of BBT_Mother is ok!" 
    
    #chars_BBT_Father  0.1,0.65,1 
    BBT_FatherSet = max.ls("*"+"BBT_Father","*"+":BBT_Father",type="displayLayer")
    BBT_FatherMat = max.ls('BBT_Father_mask',type="surfaceShader")
    print BBT_FatherSet 
    if len(BBT_FatherSet) == True:
        if len(BBT_FatherMat) == 0:            
            max.shadingNode('surfaceShader',asShader=True, n = 'BBT_Father_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BBT_Father_maskSG')
            max.connectAttr('BBT_Father_mask.outColor','BBT_Father_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BBT_Father_gammaCorrect')
            max.connectAttr ('BBT_Father_gammaCorrect.outValue','BBT_Father_mask.outColor',force=1)
            max.setAttr("BBT_Father_gammaCorrect.gammaX",0.45)
            max.setAttr("BBT_Father_gammaCorrect.gammaY",0.45)
            max.setAttr("BBT_Father_gammaCorrect.gammaZ",0.45)
            max.setAttr('BBT_Father_gammaCorrect.value',0.1,0.65,1, type="double3")
        
        BBT_FatherMembers = str(BBT_FatherSet[0])
        print BBT_FatherMembers 
        BBT_FatherMembersLs = max.editDisplayLayerMembers(BBT_FatherMembers,q=1,fullNames=1)
        print BBT_FatherMembersLs
        BBT_FatherSetls = max.ls(BBT_FatherMembersLs)
        print BBT_FatherSetls
        for d in BBT_FatherSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BBT_Father_maskSG')
            max.hyperShade(assign='BBT_Father_maskSG')
            max.select(cl=True)
        print "ID of BBT_Father is ok!"                                 
    
    #chars_BBT  0.48,0.65,0.92
    BBTSet = max.ls("*"+"BBT"+"*","*"+":BBT"+"*",type="displayLayer")
    print BBTSet
    BBTMat = max.ls('BBT_mask',type="surfaceShader")
    print BBTMat 
    if len(BBTSet) >= True:
        if len(BBTMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BBT_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BBT_maskSG')
            max.connectAttr('BBT_mask.outColor','BBT_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BBT_gammaCorrect')
            max.connectAttr ('BBT_gammaCorrect.outValue','BBT_mask.outColor',force=1)
            max.setAttr("BBT_gammaCorrect.gammaX",0.45)
            max.setAttr("BBT_gammaCorrect.gammaY",0.45)
            max.setAttr("BBT_gammaCorrect.gammaZ",0.45)
            max.setAttr('BBT_gammaCorrect.value',0.5,1,0.5, type="double3")
        
        for BBT in BBTSet:
            BBTMembers = str(BBT)
            BBTMembersLs = max.editDisplayLayerMembers(BBTMembers,q=1,fullNames=1)
            BBTSetls = max.ls(BBTMembersLs)
            print BBTSetls
            for d in BBTSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='BBT_maskSG')
                max.hyperShade(assign='BBT_maskSG')
                max.select(cl=True)
            print "ID of BBT is ok!" 
        
    #chars_BNT_An1  0.3,0.3,0.8 
    BNT_An1Set = max.ls("*"+"BNT_An1","*"+":BNT_An1",type="displayLayer")
    BNT_An1Mat = max.ls('BNT_An1_mask',type="surfaceShader")
    print BNT_An1Set 
    if len(BNT_An1Set) == True:
        if len(BNT_An1Mat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BNT_An1_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BNT_An1_maskSG')
            max.connectAttr('BNT_An1_mask.outColor','BNT_An1_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BNT_An1_gammaCorrect')
            max.connectAttr ('BNT_An1_gammaCorrect.outValue','BNT_An1_mask.outColor',force=1)
            max.setAttr("BNT_An1_gammaCorrect.gammaX",0.45)
            max.setAttr("BNT_An1_gammaCorrect.gammaY",0.45)
            max.setAttr("BNT_An1_gammaCorrect.gammaZ",0.45)
            max.setAttr('BNT_An1_gammaCorrect.value',0.3,0.3,0.8, type="double3")
        
        BNT_An1Members = str(BNT_An1Set[0])
        print BNT_An1Members 
        BNT_An1MembersLs = max.editDisplayLayerMembers(BNT_An1Members,q=1,fullNames=1)
        print BNT_An1MembersLs
        BNT_An1Setls = max.ls(BNT_An1MembersLs)
        print BNT_An1Setls
        for d in BNT_An1Setls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BNT_An1_maskSG')
            max.hyperShade(assign='BNT_An1_maskSG')
            max.select(cl=True)
        print "ID of BNT_An1 is ok!"           
                        
    #chars_BNT_Rb1  
    BNT_Rb1Set = max.ls("*"+"BNT_Rb1","*"+":BNT_Rb1",type="displayLayer")
    BNT_Rb1Mat = max.ls('BNT_Rb1_mask',type="surfaceShader")
    print BNT_Rb1Set 
    if len(BNT_Rb1Set) == True:
        if len(BNT_Rb1Mat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BNT_Rb1_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BNT_Rb1_maskSG')
            max.connectAttr('BNT_Rb1_mask.outColor','BNT_Rb1_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BNT_Rb1_gammaCorrect')
            max.connectAttr ('BNT_Rb1_gammaCorrect.outValue','BNT_Rb1_mask.outColor',force=1)
            max.setAttr("BNT_Rb1_gammaCorrect.gammaX",0.45)
            max.setAttr("BNT_Rb1_gammaCorrect.gammaY",0.45)
            max.setAttr("BNT_Rb1_gammaCorrect.gammaZ",0.45)
            max.setAttr('BNT_Rb1_gammaCorrect.value',0.3,0.3,0.8, type="double3")
        
        BNT_Rb1Members = str(BNT_Rb1Set[0])
        print BNT_Rb1Members 
        BNT_Rb1MembersLs = max.editDisplayLayerMembers(BNT_Rb1Members,q=1,fullNames=1)
        print BNT_Rb1MembersLs
        BNT_Rb1Setls = max.ls(BNT_Rb1MembersLs)
        print BNT_Rb1Setls
        for d in BNT_Rb1Setls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BNT_Rb1_maskSG')
            max.hyperShade(assign='BNT_Rb1_maskSG')
            max.select(cl=True)
        print "ID of BNT_Rb1 is ok!"      
                            
    #chars_BNT_Ts1  
    BNT_Ts1Set = max.ls("*"+"BNT_Ts1","*"+":BNT_Ts1",type="displayLayer")
    BNT_Ts1Mat = max.ls('BNT_Ts1_mask',type="surfaceShader")
    print BNT_Ts1Set 
    if len(BNT_Ts1Set) == True:
        if len(BNT_Ts1Mat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BNT_Ts1_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BNT_Ts1_maskSG')
            max.connectAttr('BNT_Ts1_mask.outColor','BNT_Ts1_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BNT_Ts1_gammaCorrect')
            max.connectAttr ('BNT_Ts1_gammaCorrect.outValue','BNT_Ts1_mask.outColor',force=1)
            max.setAttr("BNT_Ts1_gammaCorrect.gammaX",0.45)
            max.setAttr("BNT_Ts1_gammaCorrect.gammaY",0.45)
            max.setAttr("BNT_Ts1_gammaCorrect.gammaZ",0.45)
            max.setAttr('BNT_Ts1_gammaCorrect.value',0.3,0.3,0.8, type="double3")
        
        BNT_Ts1Members = str(BNT_Ts1Set[0])
        print BNT_Ts1Members 
        BNT_Ts1MembersLs = max.editDisplayLayerMembers(BNT_Ts1Members,q=1,fullNames=1)
        print BNT_Ts1MembersLs
        BNT_Ts1Setls = max.ls(BNT_Ts1MembersLs)
        print BNT_Ts1Setls
        for d in BNT_Ts1Setls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BNT_Ts1_maskSG')
            max.hyperShade(assign='BNT_Ts1_maskSG')
            max.select(cl=True)
        print "ID of BNT_Ts1 is ok!"      
                                     
    #chars_BLM_An  0.2,0.8,0.5
    BLM_AnSet = max.ls("*"+"BLM_An","*"+":BLM_An",type="displayLayer")
    BLM_AnMat = max.ls('BLM_An_mask',type="surfaceShader")
    print BLM_AnSet 
    if len(BLM_AnSet) == True:
        if len(BLM_AnMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BLM_An_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BLM_An_maskSG')
            max.connectAttr('BLM_An_mask.outColor','BLM_An_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BLM_An_gammaCorrect')
            max.connectAttr ('BLM_An_gammaCorrect.outValue','BLM_An_mask.outColor',force=1)
            max.setAttr("BLM_An_gammaCorrect.gammaX",0.45)
            max.setAttr("BLM_An_gammaCorrect.gammaY",0.45)
            max.setAttr("BLM_An_gammaCorrect.gammaZ",0.45)
            max.setAttr('BLM_An_gammaCorrect.value',0.2,0.8,0.5, type="double3")
        
        BLM_AnMembers = str(BLM_AnSet[0])
        print BLM_AnMembers 
        BLM_AnMembersLs = max.editDisplayLayerMembers(BLM_AnMembers,q=1,fullNames=1)
        print BLM_AnMembersLs
        BLM_AnSetls = max.ls(BLM_AnMembersLs)
        print BLM_AnSetls
        for d in BLM_AnSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BLM_An_maskSG')
            max.hyperShade(assign='BLM_An_maskSG')
            max.select(cl=True)
        print "ID of BLM_An is ok!"    
                        
    #chars_BLM_RB  
    BLM_RBSet = max.ls("*"+"BLM_RB","*"+":BLM_RB",type="displayLayer")
    BLM_RBMat = max.ls('BLM_RB_mask',type="surfaceShader")
    print BLM_RBSet 
    if len(BLM_RBSet) == True:
        if len(BLM_RBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BLM_RB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BLM_RB_maskSG')
            max.connectAttr('BLM_RB_mask.outColor','BLM_RB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BLM_RB_gammaCorrect')
            max.connectAttr ('BLM_RB_gammaCorrect.outValue','BLM_RB_mask.outColor',force=1)
            max.setAttr("BLM_RB_gammaCorrect.gammaX",0.45)
            max.setAttr("BLM_RB_gammaCorrect.gammaY",0.45)
            max.setAttr("BLM_RB_gammaCorrect.gammaZ",0.45)
            max.setAttr('BLM_RB_gammaCorrect.value',0.2,0.8,0.5, type="double3")
        
        BLM_RBMembers = str(BLM_RBSet[0])
        print BLM_RBMembers 
        BLM_RBMembersLs = max.editDisplayLayerMembers(BLM_RBMembers,q=1,fullNames=1)
        print BLM_RBMembersLs
        BLM_RBSetls = max.ls(BLM_RBMembersLs)
        print BLM_RBSetls
        for d in BLM_RBSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BLM_RB_maskSG')
            max.hyperShade(assign='BLM_RB_maskSG')
            max.select(cl=True)
        print "ID of BLM_RB is ok!"
                        
    #chars_BLM_TS  
    BLM_TSSet = max.ls("*"+"BLM_TS","*"+":BLM_TS",type="displayLayer")
    BLM_TSMat = max.ls('BLM_TS_mask',type="surfaceShader")
    print BLM_TSSet 
    if len(BLM_TSSet) == True:
        if len(BLM_TSMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'BLM_TS_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='BLM_TS_maskSG')
            max.connectAttr('BLM_TS_mask.outColor','BLM_TS_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'BLM_TS_gammaCorrect')
            max.connectAttr ('BLM_TS_gammaCorrect.outValue','BLM_TS_mask.outColor',force=1)
            max.setAttr("BLM_TS_gammaCorrect.gammaX",0.45)
            max.setAttr("BLM_TS_gammaCorrect.gammaY",0.45)
            max.setAttr("BLM_TS_gammaCorrect.gammaZ",0.45)
            max.setAttr('BLM_TS_gammaCorrect.value',0.2,0.8,0.5, type="double3")
        
        BLM_TSMembers = str(BLM_TSSet[0])
        print BLM_TSMembers 
        BLM_TSMembersLs = max.editDisplayLayerMembers(BLM_TSMembers,q=1,fullNames=1)
        print BLM_TSMembersLs
        BLM_TSSetls = max.ls(BLM_TSMembersLs)
        print BLM_TSSetls
        for d in BLM_TSSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='BLM_TS_maskSG')
            max.hyperShade(assign='BLM_TS_maskSG')
            max.select(cl=True)
        print "ID of BLM_TS is ok!"
        
    #chars_GGZ_NG  0.8,0.1,0.9
    GGZ_NGSet = max.ls("*"+"GGZ_NG","*"+":GGZ_NG",type="displayLayer")
    GGZ_NGMat = max.ls('GGZ_NG_mask',type="surfaceShader")
    print GGZ_NGSet 
    if len(GGZ_NGSet) == True:
        if len(GGZ_NGMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'GGZ_NG_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='GGZ_NG_maskSG')
            max.connectAttr('GGZ_NG_mask.outColor','GGZ_NG_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'GGZ_NG_gammaCorrect')
            max.connectAttr ('GGZ_NG_gammaCorrect.outValue','GGZ_NG_mask.outColor',force=1)
            max.setAttr("GGZ_NG_gammaCorrect.gammaX",0.45)
            max.setAttr("GGZ_NG_gammaCorrect.gammaY",0.45)
            max.setAttr("GGZ_NG_gammaCorrect.gammaZ",0.45)
            max.setAttr('GGZ_NG_gammaCorrect.value',0.8,0.1,0.9, type="double3")
        
        GGZ_NGMembers = str(GGZ_NGSet[0])
        print GGZ_NGMembers 
        GGZ_NGMembersLs = max.editDisplayLayerMembers(GGZ_NGMembers,q=1,fullNames=1)
        print GGZ_NGMembersLs
        GGZ_NGSetls = max.ls(GGZ_NGMembersLs)
        print GGZ_NGSetls
        for d in GGZ_NGSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='GGZ_NG_maskSG')
            max.hyperShade(assign='GGZ_NG_maskSG')
            max.select(cl=True)
        print "ID of GGZ_NG is ok!"
    
    #chars_GGZ_XH  0.8,0.1,0.9
    GGZ_XHSet = max.ls("*"+"GGZ_XH","*"+":GGZ_XH",type="displayLayer")
    GGZ_XHMat = max.ls('GGZ_XH_mask',type="surfaceShader")
    print GGZ_XHSet 
    if len(GGZ_XHSet) == True:
        if len(GGZ_XHMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'GGZ_XH_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='GGZ_XH_maskSG')
            max.connectAttr('GGZ_XH_mask.outColor','GGZ_XH_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'GGZ_XH_gammaCorrect')
            max.connectAttr ('GGZ_XH_gammaCorrect.outValue','GGZ_XH_mask.outColor',force=1)
            max.setAttr("GGZ_XH_gammaCorrect.gammaX",0.45)
            max.setAttr("GGZ_XH_gammaCorrect.gammaY",0.45)
            max.setAttr("GGZ_XH_gammaCorrect.gammaZ",0.45)
            max.setAttr('GGZ_XH_gammaCorrect.value',0.8,0.1,0.9, type="double3")
        
        GGZ_XHMembers = str(GGZ_XHSet[0])
        print GGZ_XHMembers 
        GGZ_XHMembersLs = max.editDisplayLayerMembers(GGZ_XHMembers,q=1,fullNames=1)
        print GGZ_XHMembersLs
        GGZ_XHSetls = max.ls(GGZ_XHMembersLs)
        print GGZ_XHSetls
        for d in GGZ_XHSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='GGZ_XH_maskSG')
            max.hyperShade(assign='GGZ_XH_maskSG')
            max.select(cl=True)
        print "ID of GGZ_XH is ok!"    
        
    #chars_LBD_AN  0.9,0.3,0
    LBD_ANSet = max.ls("*"+"LBD_AN","*"+":LBD_AN",type="displayLayer")
    LBD_ANMat = max.ls('LBD_AN_mask',type="surfaceShader")
    print LBD_ANSet 
    if len(LBD_ANSet) == True:
        if len(LBD_ANMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'LBD_AN_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='LBD_AN_maskSG')
            max.connectAttr('LBD_AN_mask.outColor','LBD_AN_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'LBD_AN_gammaCorrect')
            max.connectAttr ('LBD_AN_gammaCorrect.outValue','LBD_AN_mask.outColor',force=1)
            max.setAttr("LBD_AN_gammaCorrect.gammaX",0.45)
            max.setAttr("LBD_AN_gammaCorrect.gammaY",0.45)
            max.setAttr("LBD_AN_gammaCorrect.gammaZ",0.45)
            max.setAttr('LBD_AN_gammaCorrect.value',0.9,0.3,0, type="double3")
        
        LBD_ANMembers = str(LBD_ANSet[0])
        print LBD_ANMembers 
        LBD_ANMembersLs = max.editDisplayLayerMembers(LBD_ANMembers,q=1,fullNames=1)
        print LBD_ANMembersLs
        LBD_ANSetls = max.ls(LBD_ANMembersLs)
        print LBD_ANSetls
        for d in LBD_ANSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='LBD_AN_maskSG')
            max.hyperShade(assign='LBD_AN_maskSG')
            max.select(cl=True)
        print "ID of LBD_AN is ok!"
        
    #chars_LBD_TS  
    LBD_TSSet = max.ls("*"+"LBD_TS","*"+":LBD_TS",type="displayLayer")
    LBD_TSMat = max.ls('LBD_TS_mask',type="surfaceShader")
    print LBD_TSSet 
    if len(LBD_TSSet) == True:
        if len(LBD_TSMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'LBD_TS_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='LBD_TS_maskSG')
            max.connectAttr('LBD_TS_mask.outColor','LBD_TS_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'LBD_TS_gammaCorrect')
            max.connectAttr ('LBD_TS_gammaCorrect.outValue','LBD_TS_mask.outColor',force=1)
            max.setAttr("LBD_TS_gammaCorrect.gammaX",0.45)
            max.setAttr("LBD_TS_gammaCorrect.gammaY",0.45)
            max.setAttr("LBD_TS_gammaCorrect.gammaZ",0.45)
            max.setAttr('LBD_TS_gammaCorrect.value',0.9,0.3,0, type="double3")
        
        LBD_TSMembers = str(LBD_TSSet[0])
        print LBD_TSMembers 
        LBD_TSMembersLs = max.editDisplayLayerMembers(LBD_TSMembers,q=1,fullNames=1)
        print LBD_TSMembersLs
        LBD_TSSetls = max.ls(LBD_TSMembersLs)
        print LBD_TSSetls
        for d in LBD_TSSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='LBD_TS_maskSG')
            max.hyperShade(assign='LBD_TS_maskSG')
            max.select(cl=True)
        print "ID of LBD_TS is ok!"    
        
    #chars_MXY  0.77,0.77,1
    MXYSet = max.ls("*"+"MXY"+"*","*"+":MXY"+"*",type="displayLayer")
    print MXYSet
    MXYMat = max.ls('MXY_mask',type="surfaceShader")
    print MXYMat 
    if len(MXYSet) >= True:
        if len(MXYMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'MXY_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='MXY_maskSG')
            max.connectAttr('MXY_mask.outColor','MXY_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'MXY_gammaCorrect')
            max.connectAttr ('MXY_gammaCorrect.outValue','MXY_mask.outColor',force=1)
            max.setAttr("MXY_gammaCorrect.gammaX",0.45)
            max.setAttr("MXY_gammaCorrect.gammaY",0.45)
            max.setAttr("MXY_gammaCorrect.gammaZ",0.45)
            max.setAttr('MXY_gammaCorrect.value',0.77,0.77,1, type="double3")
        
        for MXY in MXYSet:
            MXYMembers = str(MXY)
            MXYMembersLs = max.editDisplayLayerMembers(MXYMembers,q=1,fullNames=1)
            MXYSetls = max.ls(MXYMembersLs)
            print MXYSetls
            for d in MXYSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='MXY_maskSG')
                max.hyperShade(assign='MXY_maskSG')
                max.select(cl=True)
            print "ID of MXY is ok!"
        
    #chars_MGY  0,0.9,0.22
    MGYSet = max.ls("*"+"MGY","*"+":MGY",type="displayLayer")
    MGYMat = max.ls('MGY_mask',type="surfaceShader")
    print MGYSet 
    if len(MGYSet) == True:
        if len(MGYMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'MGY_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='MGY_maskSG')
            max.connectAttr('MGY_mask.outColor','MGY_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'MGY_gammaCorrect')
            max.connectAttr ('MGY_gammaCorrect.outValue','MGY_mask.outColor',force=1)
            max.setAttr("MGY_gammaCorrect.gammaX",0.45)
            max.setAttr("MGY_gammaCorrect.gammaY",0.45)
            max.setAttr("MGY_gammaCorrect.gammaZ",0.45)
            max.setAttr('MGY_gammaCorrect.value',0,0.9,0.22, type="double3")
        
        MGYMembers = str(MGYSet[0])
        print MGYMembers 
        MGYMembersLs = max.editDisplayLayerMembers(MGYMembers,q=1,fullNames=1)
        print MGYMembersLs
        MGYSetls = max.ls(MGYMembersLs)
        print MGYSetls
        for d in MGYSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='MGY_maskSG')
            max.hyperShade(assign='MGY_maskSG')
            max.select(cl=True)
        print "ID of MGY is ok!"  
        
   #chars_TTZ_CaiPan  1,0,0.45
    TTZ_CaiPanSet = max.ls("*"+"TTZ_CaiPan","*"+":TTZ_CaiPan",type="displayLayer")
    TTZ_CaiPanMat = max.ls('TTZ_CaiPan_mask',type="surfaceShader")
    print TTZ_CaiPanSet 
    if len(TTZ_CaiPanSet) == True:
        if len(TTZ_CaiPanMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'TTZ_CaiPan_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='TTZ_CaiPan_maskSG')
            max.connectAttr('TTZ_CaiPan_mask.outColor','TTZ_CaiPan_maskSG.surfaceShader',f=1)           
            max.shadingNode('gammaCorrect',asUtility=True, n = 'TTZ_CaiPan_gammaCorrect')
            max.connectAttr ('TTZ_CaiPan_gammaCorrect.outValue','TTZ_CaiPan_mask.outColor',force=1)
            max.setAttr("TTZ_CaiPan_gammaCorrect.gammaX",0.45)
            max.setAttr("TTZ_CaiPan_gammaCorrect.gammaY",0.45)
            max.setAttr("TTZ_CaiPan_gammaCorrect.gammaZ",0.45)
            max.setAttr('TTZ_CaiPan_gammaCorrect.value',1,0,0.45, type="double3")
        
        TTZ_CaiPanMembers = str(TTZ_CaiPanSet[0])
        print TTZ_CaiPanMembers 
        TTZ_CaiPanMembersLs = max.editDisplayLayerMembers(TTZ_CaiPanMembers,q=1,fullNames=1)
        print TTZ_CaiPanMembersLs
        TTZ_CaiPanSetls = max.ls(TTZ_CaiPanMembersLs)
        print TTZ_CaiPanSetls
        for d in TTZ_CaiPanSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='TTZ_CaiPan_maskSG')
            max.hyperShade(assign='TTZ_CaiPan_maskSG')
            max.select(cl=True)
        print "ID of TTZ_CaiPan is ok!"  
        
    #chars_TTZ_GMLDLR  1,0,0.45
    TTZ_GMLDLRSet = max.ls("*"+"TTZ_GMLDLR","*"+":TTZ_GMLDLR",type="displayLayer")
    TTZ_GMLDLRMat = max.ls('TTZ_GMLDLR_mask',type="surfaceShader")
    print TTZ_GMLDLRSet 
    if len(TTZ_GMLDLRSet) == True:
        if len(TTZ_GMLDLRMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'TTZ_GMLDLR_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='TTZ_GMLDLR_maskSG')
            max.connectAttr('TTZ_GMLDLR_mask.outColor','TTZ_GMLDLR_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'TTZ_GMLDLR_gammaCorrect')
            max.connectAttr ('TTZ_GMLDLR_gammaCorrect.outValue','TTZ_GMLDLR_mask.outColor',force=1)
            max.setAttr("TTZ_GMLDLR_gammaCorrect.gammaX",0.45)
            max.setAttr("TTZ_GMLDLR_gammaCorrect.gammaY",0.45)
            max.setAttr("TTZ_GMLDLR_gammaCorrect.gammaZ",0.45)
            max.setAttr('TTZ_GMLDLR_gammaCorrect.value',1,0,0.45, type="double3")
        
        TTZ_GMLDLRMembers = str(TTZ_GMLDLRSet[0])
        print TTZ_GMLDLRMembers 
        TTZ_GMLDLRMembersLs = max.editDisplayLayerMembers(TTZ_GMLDLRMembers,q=1,fullNames=1)
        print TTZ_GMLDLRMembersLs
        TTZ_GMLDLRSetls = max.ls(TTZ_GMLDLRMembersLs)
        print TTZ_GMLDLRSetls
        for d in TTZ_GMLDLRSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='TTZ_GMLDLR_maskSG')
            max.hyperShade(assign='TTZ_GMLDLR_maskSG')
            max.select(cl=True)
        print "ID of TTZ_GMLDLR is ok!"
        
    #chars_TTZ_JuMin  1,0,0.45
    TTZ_JuMinSet = max.ls("*"+"TTZ_JuMin","*"+":TTZ_JuMin",type="displayLayer")
    TTZ_JuMinMat = max.ls('TTZ_JuMin_mask',type="surfaceShader")
    print TTZ_JuMinSet 
    if len(TTZ_JuMinSet) == True:
        if len(TTZ_JuMinMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'TTZ_JuMin_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='TTZ_JuMin_maskSG')
            max.connectAttr('TTZ_JuMin_mask.outColor','TTZ_JuMin_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'TTZ_JuMin_gammaCorrect')
            max.connectAttr ('TTZ_JuMin_gammaCorrect.outValue','TTZ_JuMin_mask.outColor',force=1)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaX",0.45)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaY",0.45)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaZ",0.45)
            max.setAttr('TTZ_JuMin_gammaCorrect.value',1,0,0.45, type="double3")
        
        TTZ_JuMinMembers = str(TTZ_JuMinSet[0])
        print TTZ_JuMinMembers 
        TTZ_JuMinMembersLs = max.editDisplayLayerMembers(TTZ_JuMinMembers,q=1,fullNames=1)
        print TTZ_JuMinMembersLs
        TTZ_JuMinSetls = max.ls(TTZ_JuMinMembersLs)
        print TTZ_JuMinSetls
        for d in TTZ_JuMinSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='TTZ_JuMin_maskSG')
            max.hyperShade(assign='TTZ_JuMin_maskSG')
            max.select(cl=True)
        print "ID of TTZ_JuMin is ok!"  
        
    #chars_WN_A01  0.66,0.83,0.25
    WN_A01Set = max.ls("*"+"WN_A01","*"+":WN_A01",type="displayLayer")
    WN_A01Mat = max.ls('WN_A01_mask',type="surfaceShader")
    print WN_A01Set 
    if len(WN_A01Set) == True:
        if len(WN_A01Mat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'WN_A01_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='WN_A01_maskSG')
            max.connectAttr('WN_A01_mask.outColor','WN_A01_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'WN_A01_gammaCorrect')
            max.connectAttr ('WN_A01_gammaCorrect.outValue','WN_A01_mask.outColor',force=1)
            max.setAttr("WN_A01_gammaCorrect.gammaX",0.45)
            max.setAttr("WN_A01_gammaCorrect.gammaY",0.45)
            max.setAttr("WN_A01_gammaCorrect.gammaZ",0.45)
            max.setAttr('WN_A01_gammaCorrect.value',0.66,0.83,0.25, type="double3")
        
        WN_A01Members = str(WN_A01Set[0])
        print WN_A01Members 
        WN_A01MembersLs = max.editDisplayLayerMembers(WN_A01Members,q=1,fullNames=1)
        print WN_A01MembersLs
        WN_A01Setls = max.ls(WN_A01MembersLs)
        print WN_A01Setls
        for d in WN_A01Setls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='WN_A01_maskSG')
            max.hyperShade(assign='WN_A01_maskSG')
            max.select(cl=True)
        print "ID of WN_A01 is ok!"
                             
    #chars_YD_AN  0.67,0.18,0.55
    YD_ANSet = max.ls("*"+"YD_AN","*"+":YD_AN",type="displayLayer")
    YD_ANMat = max.ls('YD_AN_mask',type="surfaceShader")
    print YD_ANSet 
    if len(YD_ANSet) == True:
        if len(YD_ANMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'YD_AN_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='YD_AN_maskSG')
            max.connectAttr('YD_AN_mask.outColor','YD_AN_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'YD_AN_gammaCorrect')
            max.connectAttr ('YD_AN_gammaCorrect.outValue','YD_AN_mask.outColor',force=1)
            max.setAttr("YD_AN_gammaCorrect.gammaX",0.45)
            max.setAttr("YD_AN_gammaCorrect.gammaY",0.45)
            max.setAttr("YD_AN_gammaCorrect.gammaZ",0.45)
            max.setAttr('YD_AN_gammaCorrect.value',0.67,0.18,0.55, type="double3")
        
        YD_ANMembers = str(YD_ANSet[0])
        print YD_ANMembers 
        YD_ANMembersLs = max.editDisplayLayerMembers(YD_ANMembers,q=1,fullNames=1)
        print YD_ANMembersLs
        YD_ANSetls = max.ls(YD_ANMembersLs)
        print YD_ANSetls
        for d in YD_ANSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='YD_AN_maskSG')
            max.hyperShade(assign='YD_AN_maskSG')
            max.select(cl=True)
        print "ID of YD_AN is ok!" 
        
    #chars_YD_RB  0.67,0.18,0.55
    YD_RBSet = max.ls("*"+"YD_RB","*"+":YD_RB",type="displayLayer")
    YD_RBMat = max.ls('YD_RB_mask',type="surfaceShader")
    print YD_RBSet 
    if len(YD_RBSet) == True:
        if len(YD_RBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'YD_RB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='YD_RB_maskSG')
            max.connectAttr('YD_RB_mask.outColor','YD_RB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'YD_RB_gammaCorrect')
            max.connectAttr ('YD_RB_gammaCorrect.outValue','YD_RB_mask.outColor',force=1)
            max.setAttr("YD_RB_gammaCorrect.gammaX",0.45)
            max.setAttr("YD_RB_gammaCorrect.gammaY",0.45)
            max.setAttr("YD_RB_gammaCorrect.gammaZ",0.45)
            max.setAttr('YD_RB_gammaCorrect.value',0.67,0.18,0.55, type="double3")
        
        YD_RBMembers = str(YD_RBSet[0])
        print YD_RBMembers 
        YD_RBMembersLs = max.editDisplayLayerMembers(YD_RBMembers,q=1,fullNames=1)
        print YD_RBMembersLs
        YD_RBSetls = max.ls(YD_RBMembersLs)
        print YD_RBSetls
        for d in YD_RBSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='YD_RB_maskSG')
            max.hyperShade(assign='YD_RB_maskSG')
            max.select(cl=True)
        print "ID of YD_RB is ok!"    

    #chars_TTZ_JuMin  0.03,0.9,0.47
    TTZ_JuMinSet = max.ls("*"+"TTZ_JuMin","*"+":TTZ_JuMin",type="displayLayer")
    TTZ_JuMinMat = max.ls('TTZ_JuMin_mask',type="surfaceShader")
    print TTZ_JuMinSet 
    if len(TTZ_JuMinSet) == True:
        if len(TTZ_JuMinMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'TTZ_JuMin_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='TTZ_JuMin_maskSG')
            max.connectAttr('TTZ_JuMin_mask.outColor','TTZ_JuMin_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'TTZ_JuMin_gammaCorrect')
            max.connectAttr ('TTZ_JuMin_gammaCorrect.outValue','TTZ_JuMin_mask.outColor',force=1)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaX",0.45)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaY",0.45)
            max.setAttr("TTZ_JuMin_gammaCorrect.gammaZ",0.45)
            max.setAttr('TTZ_JuMin_gammaCorrect.value',0.03,0.9,0.47, type="double3")
        
        TTZ_JuMinMembers = str(TTZ_JuMinSet[0])
        print TTZ_JuMinMembers 
        TTZ_JuMinMembersLs = max.editDisplayLayerMembers(TTZ_JuMinMembers,q=1,fullNames=1)
        print TTZ_JuMinMembersLs
        TTZ_JuMinSetls = max.ls(TTZ_JuMinMembersLs)
        print TTZ_JuMinSetls
        for d in TTZ_JuMinSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='TTZ_JuMin_maskSG')
            max.hyperShade(assign='TTZ_JuMin_maskSG')
            max.select(cl=True)
        print "ID of TTZ_JuMin is ok!" 
        
    #chars_HT_RB  0.88,0.77,0.40
    HT_RBSet = max.ls("*"+"HT_RB","*"+":HT_RB",type="displayLayer")
    HT_RBMat = max.ls('HT_RB_mask',type="surfaceShader")
    print HT_RBSet 
    if len(HT_RBSet) == True:
        if len(HT_RBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'HT_RB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='HT_RB_maskSG')
            max.connectAttr('HT_RB_mask.outColor','HT_RB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'HT_RB_gammaCorrect')
            max.connectAttr ('HT_RB_gammaCorrect.outValue','HT_RB_mask.outColor',force=1)
            max.setAttr("HT_RB_gammaCorrect.gammaX",0.45)
            max.setAttr("HT_RB_gammaCorrect.gammaY",0.45)
            max.setAttr("HT_RB_gammaCorrect.gammaZ",0.45)
            max.setAttr('HT_RB_gammaCorrect.value',0.88,0.77,0.40, type="double3")
        
        HT_RBMembers = str(HT_RBSet[0])
        print HT_RBMembers 
        HT_RBMembersLs = max.editDisplayLayerMembers(HT_RBMembers,q=1,fullNames=1)
        print HT_RBMembersLs
        HT_RBSetls = max.ls(HT_RBMembersLs)
        print HT_RBSetls
        for d in HT_RBSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='HT_RB_maskSG')
            max.hyperShade(assign='HT_RB_maskSG')
            max.select(cl=True)
        print "ID of HT_RB is ok!" 
        
    #chars_HT_AN  0.88,0.77,0.40
    HT_ANSet = max.ls("*"+"HT_AN","*"+":HT_AN",type="displayLayer")
    HT_ANMat = max.ls('HT_AN_mask',type="surfaceShader")
    print HT_ANSet 
    if len(HT_ANSet) == True:
        if len(HT_ANMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'HT_AN_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='HT_AN_maskSG')
            max.connectAttr('HT_AN_mask.outColor','HT_AN_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'HT_AN_gammaCorrect')
            max.connectAttr ('HT_AN_gammaCorrect.outValue','HT_AN_mask.outColor',force=1)
            max.setAttr("HT_AN_gammaCorrect.gammaX",0.45)
            max.setAttr("HT_AN_gammaCorrect.gammaY",0.45)
            max.setAttr("HT_AN_gammaCorrect.gammaZ",0.45)
            max.setAttr('HT_AN_gammaCorrect.value',0.88,0.77,0.40, type="double3")
        
        HT_ANMembers = str(HT_ANSet[0])
        print HT_ANMembers 
        HT_ANMembersLs = max.editDisplayLayerMembers(HT_ANMembers,q=1,fullNames=1)
        print HT_ANMembersLs
        HT_ANSetls = max.ls(HT_ANMembersLs)
        print HT_ANSetls
        for d in HT_ANSetls:
            max.select(d)                                                       
            max.sets(edit=1,forceElement='HT_AN_maskSG')
            max.hyperShade(assign='HT_AN_maskSG')
            max.select(cl=True)
        print "ID of HT_AN is ok!"                 

    #chars_NHG_GLY  0.87,0.35,0.69
    NHG_GLYSet = max.ls("*"+"NHG_GLY"+"*","*"+":NHG_GLY"+"*",type="displayLayer")
    print NHG_GLYSet
    NHG_GLYMat = max.ls('NHG_GLY_mask',type="surfaceShader")
    print NHG_GLYMat 
    if len(NHG_GLYSet) >= True:
        if len(NHG_GLYMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'NHG_GLY_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='NHG_GLY_maskSG')
            max.connectAttr('NHG_GLY_mask.outColor','NHG_GLY_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'NHG_GLY_gammaCorrect')
            max.connectAttr ('NHG_GLY_gammaCorrect.outValue','NHG_GLY_mask.outColor',force=1)
            max.setAttr("NHG_GLY_gammaCorrect.gammaX",0.45)
            max.setAttr("NHG_GLY_gammaCorrect.gammaY",0.45)
            max.setAttr("NHG_GLY_gammaCorrect.gammaZ",0.45)
            max.setAttr('NHG_GLY_gammaCorrect.value',0.87,0.35,0.69, type="double3")
        
        for h in NHG_GLYSet:
            print h
            NHG_GLYMembers = str(h)
            print NHG_GLYMembers 
            NHG_GLYMembersLs = max.editDisplayLayerMembers(NHG_GLYMembers,q=1,fullNames=1)
            print NHG_GLYMembersLs
            NHG_GLYSetls = max.ls(NHG_GLYMembersLs)
            print NHG_GLYSetls
            for d in NHG_GLYSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='NHG_GLY_maskSG')
                max.hyperShade(assign='NHG_GLY_maskSG')
                max.select(cl=True)
            print "ID of NHG_GLY is ok!"

    #chars_ESL  0.15,0.03,0.67
    ESLSet = max.ls("*"+"ESL"+"*","*"+":ESL"+"*",type="displayLayer")
    print ESLSet
    ESLMat = max.ls('ESL_mask',type="surfaceShader")
    print ESLMat 
    if len(ESLSet) >= True:
        if len(ESLMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'ESL_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='ESL_maskSG')
            max.connectAttr('ESL_mask.outColor','ESL_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'ESL_gammaCorrect')
            max.connectAttr ('ESL_gammaCorrect.outValue','ESL_mask.outColor',force=1)
            max.setAttr("ESL_gammaCorrect.gammaX",0.45)
            max.setAttr("ESL_gammaCorrect.gammaY",0.45)
            max.setAttr("ESL_gammaCorrect.gammaZ",0.45)
            max.setAttr('ESL_gammaCorrect.value',0.15,0.03,0.67, type="double3")
        
        for f in ESLSet:
            ESLMembers = str(f)
            ESLMembersLs = max.editDisplayLayerMembers(ESLMembers,q=1,fullNames=1)
            ESLSetls = max.ls(ESLMembersLs)
            print ESLSetls
            for d in ESLSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='ESL_maskSG')
                max.hyperShade(assign='ESL_maskSG')
                max.select(cl=True)
            print "ID of ESL is ok!"

    #chars_FYXB  0.25,0.08,0.12
    FYXBSet = max.ls("*"+"FYXB"+"*","*"+":FYXB"+"*",type="displayLayer")
    print FYXBSet
    FYXBMat = max.ls('FYXB_mask',type="surfaceShader")
    print FYXBMat 
    if len(FYXBSet) >= True:
        if len(FYXBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'FYXB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='FYXB_maskSG')
            max.connectAttr('FYXB_mask.outColor','FYXB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'FYXB_gammaCorrect')
            max.connectAttr ('FYXB_gammaCorrect.outValue','FYXB_mask.outColor',force=1)
            max.setAttr("FYXB_gammaCorrect.gammaX",0.45)
            max.setAttr("FYXB_gammaCorrect.gammaY",0.45)
            max.setAttr("FYXB_gammaCorrect.gammaZ",0.45)
            max.setAttr('FYXB_gammaCorrect.value',0.25,0.08,0.12, type="double3")
        
        for e in FYXBSet:
            FYXBMembers = str(e)
            FYXBMembersLs = max.editDisplayLayerMembers(FYXBMembers,q=1,fullNames=1)
            FYXBSetls = max.ls(FYXBMembersLs)
            print FYXBSetls
            for d in FYXBSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='FYXB_maskSG')
                max.hyperShade(assign='FYXB_maskSG')
                max.select(cl=True)
            print "ID of FYXB is ok!"

    #chars_FXL  0.13,0.02,0.38
    FXLSet = max.ls("*"+"FXL"+"*","*"+":FXL"+"*",type="displayLayer")
    print FXLSet
    FXLMat = max.ls('FXL_mask',type="surfaceShader")
    print FXLMat 
    if len(FXLSet) >= True:
        if len(FXLMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'FXL_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='FXL_maskSG')
            max.connectAttr('FXL_mask.outColor','FXL_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'FXL_gammaCorrect')
            max.connectAttr ('FXL_gammaCorrect.outValue','FXL_mask.outColor',force=1)
            max.setAttr("FXL_gammaCorrect.gammaX",0.45)
            max.setAttr("FXL_gammaCorrect.gammaY",0.45)
            max.setAttr("FXL_gammaCorrect.gammaZ",0.45)
            max.setAttr('FXL_gammaCorrect.value',0.13,0.02,0.38, type="double3")
        
        for y in FXLSet:
            FXLMembers = str(y)
            FXLMembersLs = max.editDisplayLayerMembers(FXLMembers,q=1,fullNames=1)
            FXLSetls = max.ls(FXLMembersLs)
            print FXLSetls
            for d in FXLSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='FXL_maskSG')
                max.hyperShade(assign='FXL_maskSG')
                max.select(cl=True)
            print "ID of FXL is ok!"

    #chars_FGB  0.63,0.02,0.84
    FGBSet = max.ls("*"+"FGB"+"*","*"+":FGB"+"*",type="displayLayer")
    print FGBSet
    FGBMat = max.ls('FGB_mask',type="surfaceShader")
    print FGBMat 
    if len(FGBSet) >= True:
        if len(FGBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'FGB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='FGB_maskSG')
            max.connectAttr('FGB_mask.outColor','FGB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'FGB_gammaCorrect')
            max.connectAttr ('FGB_gammaCorrect.outValue','FGB_mask.outColor',force=1)
            max.setAttr("FGB_gammaCorrect.gammaX",0.45)
            max.setAttr("FGB_gammaCorrect.gammaY",0.45)
            max.setAttr("FGB_gammaCorrect.gammaZ",0.45)
            max.setAttr('FGB_gammaCorrect.value',0.63,0.02,0.84, type="double3")
        
        for FGB in FGBSet:
            FGBMembers = str(FGB)
            FGBMembersLs = max.editDisplayLayerMembers(FGBMembers,q=1,fullNames=1)
            FGBSetls = max.ls(FGBMembersLs)
            print FGBSetls
            for d in FGBSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='FGB_maskSG')
                max.hyperShade(assign='FGB_maskSG')
                max.select(cl=True)
            print "ID of FGB is ok!"

    #chars_LXQ  0.73,0.05,0.08
    LXQSet = max.ls("*"+"LXQ"+"*","*"+":LXQ"+"*",type="displayLayer")
    print LXQSet
    LXQMat = max.ls('LXQ_mask',type="surfaceShader")
    print LXQMat 
    if len(LXQSet) >= True:
        if len(LXQMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'LXQ_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='LXQ_maskSG')
            max.connectAttr('LXQ_mask.outColor','LXQ_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'LXQ_gammaCorrect')
            max.connectAttr ('LXQ_gammaCorrect.outValue','LXQ_mask.outColor',force=1)
            max.setAttr("LXQ_gammaCorrect.gammaX",0.45)
            max.setAttr("LXQ_gammaCorrect.gammaY",0.45)
            max.setAttr("LXQ_gammaCorrect.gammaZ",0.45)
            max.setAttr('LXQ_gammaCorrect.value',0.73,0.05,0.08, type="double3")
        
        for LXQ in LXQSet:
            LXQMembers = str(LXQ)
            LXQMembersLs = max.editDisplayLayerMembers(LXQMembers,q=1,fullNames=1)
            LXQSetls = max.ls(LXQMembersLs)
            print LXQSetls
            for d in LXQSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='LXQ_maskSG')
                max.hyperShade(assign='LXQ_maskSG')
                max.select(cl=True)
            print "ID of LXQ is ok!"

    #chars_NHG  0.67,0.45,0.02
    NHGSet = max.ls("*"+"NHG"+"*","*"+":NHG"+"*",type="displayLayer")
    print NHGSet
    NHGMat = max.ls('NHG_mask',type="surfaceShader")
    print NHGMat 
    if len(NHGSet) >= True:
        if len(NHGMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'NHG_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='NHG_maskSG')
            max.connectAttr('NHG_mask.outColor','NHG_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'NHG_gammaCorrect')
            max.connectAttr ('NHG_gammaCorrect.outValue','NHG_mask.outColor',force=1)
            max.setAttr("NHG_gammaCorrect.gammaX",0.45)
            max.setAttr("NHG_gammaCorrect.gammaY",0.45)
            max.setAttr("NHG_gammaCorrect.gammaZ",0.45)
            max.setAttr('NHG_gammaCorrect.value',0.67,0.45,0.02, type="double3")
        
        for NHG in NHGSet:
            NHGMembers = str(NHG)
            NHGMembersLs = max.editDisplayLayerMembers(NHGMembers,q=1,fullNames=1)
            NHGSetls = max.ls(NHGMembersLs)
            print NHGSetls
            for d in NHGSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='NHG_maskSG')
                max.hyperShade(assign='NHG_maskSG')
                max.select(cl=True)
            print "ID of NHG is ok!"

    #chars_XHDJS  0.34,0.43,0.62
    XHDJSSet = max.ls("*"+"XHDJS"+"*","*"+":XHDJS"+"*",type="displayLayer")
    print XHDJSSet
    XHDJSMat = max.ls('XHDJS_mask',type="surfaceShader")
    print XHDJSMat 
    if len(XHDJSSet) >= True:
        if len(XHDJSMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'XHDJS_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='XHDJS_maskSG')
            max.connectAttr('XHDJS_mask.outColor','XHDJS_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'XHDJS_gammaCorrect')
            max.connectAttr ('XHDJS_gammaCorrect.outValue','XHDJS_mask.outColor',force=1)
            max.setAttr("XHDJS_gammaCorrect.gammaX",0.45)
            max.setAttr("XHDJS_gammaCorrect.gammaY",0.45)
            max.setAttr("XHDJS_gammaCorrect.gammaZ",0.45)
            max.setAttr('XHDJS_gammaCorrect.value',0.34,0.43,0.62, type="double3")
        
        for XHDJS in XHDJSSet:
            XHDJSMembers = str(XHDJS)
            XHDJSMembersLs = max.editDisplayLayerMembers(XHDJSMembers,q=1,fullNames=1)
            XHDJSSetls = max.ls(XHDJSMembersLs)
            print XHDJSSetls
            for d in XHDJSSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='XHDJS_maskSG')
                max.hyperShade(assign='XHDJS_maskSG')
                max.select(cl=True)
            print "ID of XHDJS is ok!"
            
    #chars_XB  0.39,0.03,0.98
    XBSet = max.ls("*"+"XB"+"*","*"+":XB"+"*",type="displayLayer")
    print XBSet
    XBMat = max.ls('XB_mask',type="surfaceShader")
    print XBMat 
    if len(XBSet) >= True:
        if len(XBMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'XB_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='XB_maskSG')
            max.connectAttr('XB_mask.outColor','XB_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'XB_gammaCorrect')
            max.connectAttr ('XB_gammaCorrect.outValue','XB_mask.outColor',force=1)
            max.setAttr("XB_gammaCorrect.gammaX",0.45)
            max.setAttr("XB_gammaCorrect.gammaY",0.45)
            max.setAttr("XB_gammaCorrect.gammaZ",0.45)
            max.setAttr('XB_gammaCorrect.value',0.39,0.03,0.98, type="double3")
        
        for XB in XBSet:
            XBMembers = str(XB)
            XBMembersLs = max.editDisplayLayerMembers(XBMembers,q=1,fullNames=1)
            XBSetls = max.ls(XBMembersLs)
            print XBSetls
            for d in XBSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='XB_maskSG')
                max.hyperShade(assign='XB_maskSG')
                max.select(cl=True)
            print "ID of XB is ok!"            
            
    #chars_XH  0.59,0.09,0.01
    XHSet = max.ls("*"+"XH"+"*","*"+":XH"+"*",type="displayLayer")
    print XHSet
    XHMat = max.ls('XH_mask',type="surfaceShader")
    print XHMat 
    if len(XHSet) >= True:
        if len(XHMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'XH_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='XH_maskSG')
            max.connectAttr('XH_mask.outColor','XH_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'XH_gammaCorrect')
            max.connectAttr ('XH_gammaCorrect.outValue','XH_mask.outColor',force=1)
            max.setAttr("XH_gammaCorrect.gammaX",0.45)
            max.setAttr("XH_gammaCorrect.gammaY",0.45)
            max.setAttr("XH_gammaCorrect.gammaZ",0.45)
            max.setAttr('XH_gammaCorrect.value',0.59,0.09,0.01, type="double3")
        
        for XH in XHSet:
            XHMembers = str(XH)
            XHMembersLs = max.editDisplayLayerMembers(XHMembers,q=1,fullNames=1)
            XHSetls = max.ls(XHMembersLs)
            print XHSetls
            for d in XHSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='XH_maskSG')
                max.hyperShade(assign='XH_maskSG')
                max.select(cl=True)
            print "ID of XH is ok!"            
            
    #chars_ZZZ  0.55,0.99,0.01
    ZZZSet = max.ls("*"+"ZZZ"+"*","*"+":ZZZ"+"*",type="displayLayer")
    print ZZZSet
    ZZZMat = max.ls('ZZZ_mask',type="surfaceShader")
    print ZZZMat 
    if len(ZZZSet) >= True:
        if len(ZZZMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'ZZZ_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='ZZZ_maskSG')
            max.connectAttr('ZZZ_mask.outColor','ZZZ_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'ZZZ_gammaCorrect')
            max.connectAttr ('ZZZ_gammaCorrect.outValue','ZZZ_mask.outColor',force=1)
            max.setAttr("ZZZ_gammaCorrect.gammaX",0.45)
            max.setAttr("ZZZ_gammaCorrect.gammaY",0.45)
            max.setAttr("ZZZ_gammaCorrect.gammaZ",0.45)
            max.setAttr('ZZZ_gammaCorrect.value',0.58,0.99,0.01, type="double3")
        
        for ZZZ in ZZZSet:
            ZZZMembers = str(ZZZ)
            ZZZMembersLs = max.editDisplayLayerMembers(ZZZMembers,q=1,fullNames=1)
            ZZZSetls = max.ls(ZZZMembersLs)
            print ZZZSetls
            for d in ZZZSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='ZZZ_maskSG')
                max.hyperShade(assign='ZZZ_maskSG')
                max.select(cl=True)
            print "ID of ZZZ is ok!"
            
    #chars_ZHH  0.41,0.71,0.82
    ZHHSet = max.ls("*"+"ZHH"+"*","*"+":ZHH"+"*",type="displayLayer")
    print ZHHSet
    ZHHMat = max.ls('ZHH_mask',type="surfaceShader")
    print ZHHMat 
    if len(ZHHSet) >= True:
        if len(ZHHMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'ZHH_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='ZHH_maskSG')
            max.connectAttr('ZHH_mask.outColor','ZHH_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'ZHH_gammaCorrect')
            max.connectAttr ('ZHH_gammaCorrect.outValue','ZHH_mask.outColor',force=1)
            max.setAttr("ZHH_gammaCorrect.gammaX",0.45)
            max.setAttr("ZHH_gammaCorrect.gammaY",0.45)
            max.setAttr("ZHH_gammaCorrect.gammaZ",0.45)
            max.setAttr('ZHH_gammaCorrect.value',0.41,0.71,0.82, type="double3")
        
        for ZHH in ZHHSet:
            ZHHMembers = str(ZHH)
            ZHHMembersLs = max.editDisplayLayerMembers(ZHHMembers,q=1,fullNames=1)
            ZHHSetls = max.ls(ZHHMembersLs)
            print ZHHSetls
            for d in ZHHSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='ZHH_maskSG')
                max.hyperShade(assign='ZHH_maskSG')
                max.select(cl=True)
            print "ID of ZHH is ok!"            
            
    #chars_DFZ  0.66,0.96,0.06
    DFZSet = max.ls("*"+"DFZ"+"*","*"+":DFZ"+"*",type="displayLayer")
    print DFZSet
    DFZMat = max.ls('DFZ_mask',type="surfaceShader")
    print DFZMat 
    if len(DFZSet) >= True:
        if len(DFZMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'DFZ_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='DFZ_maskSG')
            max.connectAttr('DFZ_mask.outColor','DFZ_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'DFZ_gammaCorrect')
            max.connectAttr ('DFZ_gammaCorrect.outValue','DFZ_mask.outColor',force=1)
            max.setAttr("DFZ_gammaCorrect.gammaX",0.45)
            max.setAttr("DFZ_gammaCorrect.gammaY",0.45)
            max.setAttr("DFZ_gammaCorrect.gammaZ",0.45)
            max.setAttr('DFZ_gammaCorrect.value',0.66,0.96,0.06, type="double3")
        
        for DFZ in DFZSet:
            DFZMembers = str(DFZ)
            DFZMembersLs = max.editDisplayLayerMembers(DFZMembers,q=1,fullNames=1)
            DFZSetls = max.ls(DFZMembersLs)
            print DFZSetls
            for d in DFZSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='DFZ_maskSG')
                max.hyperShade(assign='DFZ_maskSG')
                max.select(cl=True)
            print "ID of DFZ is ok!"            
            
    #chars_HYL  1,0.5,0.5
    HYLSet = max.ls("*"+"HYL"+"*","*"+":HYL"+"*",type="displayLayer")
    print HYLSet
    HYLMat = max.ls('HYL_mask',type="surfaceShader")
    print HYLMat 
    if len(HYLSet) >= True:
        if len(HYLMat) == 0:
            max.shadingNode('surfaceShader',asShader=True, n = 'HYL_mask')
            max.sets(renderable=True,noSurfaceShader=True,em=True,n='HYL_maskSG')
            max.connectAttr('HYL_mask.outColor','HYL_maskSG.surfaceShader',f=1)            
            max.shadingNode('gammaCorrect',asUtility=True, n = 'HYL_gammaCorrect')
            max.connectAttr ('HYL_gammaCorrect.outValue','HYL_mask.outColor',force=1)
            max.setAttr("HYL_gammaCorrect.gammaX",0.45)
            max.setAttr("HYL_gammaCorrect.gammaY",0.45)
            max.setAttr("HYL_gammaCorrect.gammaZ",0.45)
            max.setAttr('HYL_gammaCorrect.value',1,0.5,0.5, type="double3")
        
        for HYL in HYLSet:
            HYLMembers = str(HYL)
            HYLMembersLs = max.editDisplayLayerMembers(HYLMembers,q=1,fullNames=1)
            HYLSetls = max.ls(HYLMembersLs)
            print HYLSetls
            for d in HYLSetls:
                max.select(d)                                                       
                max.sets(edit=1,forceElement='HYL_maskSG')
                max.hyperShade(assign='HYL_maskSG')
                max.select(cl=True)
            print "ID of HYL is ok!"            
            
            
            
            
            
                        
            
#Visit the home page    
def wed(*arg):      
    max.showHelp('http://241978389.blog.163.com/',absolute=1)

def mail(*arg):      
    max.showHelp('http://accounts.google.com/Login?hl=zh-cn',absolute=1)

#imageFormat____________________________________________________________________________________________________________________________________
def formats(item):
    if item=="Alias PIX":
        max.setAttr ("defaultRenderGlobals.imageFormat",6)
    elif item=="Cineon":
        max.setAttr ("defaultRenderGlobals.imageFormat",11)    
    elif item=="EPS":
        max.setAttr ("defaultRenderGlobals.imageFormat",9)
    elif item=="GIF":
        max.setAttr ("defaultRenderGlobals.imageFormat",9)            
    elif item=="JPEG":
        max.setAttr ("defaultRenderGlobals.imageFormat",8)
    elif item=="Maya IFF":
        max.setAttr ("defaultRenderGlobals.imageFormat",7)
        max.setAttr ("defaultRenderGlobals.imageFormat",4)
        max.optionMenuGrp("dateType", label = "Date Type:",e=1,sl=8)        
    elif item=="Maya16 IFF":
        max.setAttr ("defaultRenderGlobals.imageFormat",10)        
    elif item=="Quantel(yuv)":
        max.setAttr ("defaultRenderGlobals.imageFormat",12)        
    elif item=="RLA":
        max.setAttr ("defaultRenderGlobals.imageFormat",2)        
    elif item=="SGI)":
        max.setAttr ("defaultRenderGlobals.imageFormat",5)        
    elif item=="SGI16":
        max.setAttr ("defaultRenderGlobals.imageFormat",13)        
    elif item=="SoftImage":
        max.setAttr ("defaultRenderGlobals.imageFormat",1)
    elif item=="PSD":
        max.setAttr ("defaultRenderGlobals.imageFormat",31)        
    elif item=="Targa":
        max.setAttr ("defaultRenderGlobals.imageFormat",19)        
    elif item=="Tiff":
        max.setAttr ("defaultRenderGlobals.imageFormat",3)
    elif item=="Tiff16":
        max.setAttr ("miDefaultFramebuffer.datatype",16)
        max.setAttr ("defaultRenderGlobals.imageFormat",4)
        max.optionMenuGrp("dateType", label = "Date Type:",e=1,sl=8)                
    elif item=="Windows Bitmap":
        max.setAttr ("defaultRenderGlobals.imageFormat",20)        
    elif item=="PNG":
        max.setAttr ("defaultRenderGlobals.imageFormat",32)
    elif item=="OpenEXR":        
        max.setAttr ("miDefaultFramebuffer.datatype",5)
        dRG = pm.PyNode('defaultRenderGlobals')
        dRG.setAttr('imageFormat', 51)
        dRG.setAttr('imfkey', 'exr')
        mrG = pm.PyNode("mentalrayGlobals")
        mrG.setAttr("imageCompression", 4)
 
       
#imageBit________________________________________________________________________________________________________________________________________
def imagebit(item):
    if item=="RGB(Byte) 3x8 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",0)    
    elif item=="RGB(Short) 3x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",1)                    
    elif item=="RGB(Half) 3x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",17)  
    elif item=="RGB(Float) 3x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",4)
                 
    elif item=="RGBA(Byte) 4x8 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",2)
    elif item=="RGBE(Byte) 4x8 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",2)            
    elif item=="RGBA(Short) 4x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",3)                    
    elif item=="RGBA(Half) 4x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",16)  
    elif item=="RGBA(Float) 4x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",5)
                             
    elif item=="Alpha(Byte) 1x8 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",6)          
    elif item=="Alpha(Short) 1x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",7)                    
    elif item=="Alpha(Half) 1x16 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",18)  
    elif item=="Alpha(Float) 1x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",14)
    elif item=="Depth(Float) 1x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",8)          
                   
    elif item=="Coverage(Float) 1x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",13)  
    elif item=="Normal(Float) 3x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",9)  
    elif item=="Motion(Float) 3x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",10)  
    elif item=="label(Integer) 1x32 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",11)  
    elif item=="Bit 1 Bit":
        max.setAttr ("miDefaultFramebuffer.datatype",12)
         
#imagesSize____________________________________________________________________________________
def imageSize(item):
    if item=="320x240":
        max.setAttr ("defaultResolution.aspectLock", 1)      
        max.setAttr('defaultResolution.width',320)
        max.setAttr('defaultResolution.height',240)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='320',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='240',cw2=[35,60],e=1)

    elif item=="640x480":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',640)
        max.setAttr('defaultResolution.height',480)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='640',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='480',cw2=[35,60],e=1)
         
    elif item=="1k Square":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',1024)
        max.setAttr('defaultResolution.height',1024)
        max.setAttr('defaultResolution.deviceAspectRatio',1.000)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='1024',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='1024',cw2=[35,60],e=1)
               
    elif item=="2k Square":
        max.setAttr('defaultResolution.width',2048)
        max.setAttr('defaultResolution.height',2048)
        max.setAttr('defaultResolution.deviceAspectRatio',1.000)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='2048',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='2048',cw2=[35,60],e=1)
                 
    elif item=="3k Square":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',3072)
        max.setAttr('defaultResolution.height',3072)
        max.setAttr('defaultResolution.deviceAspectRatio',1.000)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='3072',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='3072',cw2=[35,60],e=1)
       
    elif item=="4k Square":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',4096)
        max.setAttr('defaultResolution.height',4096)
        max.setAttr('defaultResolution.deviceAspectRatio',1.000)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='4096',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='4096',cw2=[35,60],e=1)
               
    elif item=="8k Square":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',8192)
        max.setAttr('defaultResolution.height',8192)
        max.setAttr('defaultResolution.deviceAspectRatio',1.000)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='8192',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='8192',cw2=[35,60],e=1)
               
    elif item=="Full 1024":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',1024)
        max.setAttr('defaultResolution.height',768)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='1024',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='768',cw2=[35,60],e=1)  
               
    elif item=="Fill 1280/Screen":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',1280)
        max.setAttr('defaultResolution.height',1024)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='1280',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='1024',cw2=[35,60],e=1)
                 
    elif item=="HD 720":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',1280)
        max.setAttr('defaultResolution.height',720)
        max.setAttr('defaultResolution.deviceAspectRatio',1.777)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='1280',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='720',cw2=[35,60],e=1)
               
    elif item=="HD 1080":
        max.setAttr('defaultResolution.width',1920)
        max.setAttr('defaultResolution.height',1080)
        max.setAttr('defaultResolution.deviceAspectRatio',1.777)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='1920',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='1080',cw2=[35,60],e=1)

    elif item=="NTSC 4d":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',646)
        max.setAttr('defaultResolution.height',485)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.001)
        max.textFieldGrp('wh',l='Width:',tx='646',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='485',cw2=[35,60],e=1)
                         
    elif item=="PAL 768":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',768)
        max.setAttr('defaultResolution.height',576)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='768',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='576',cw2=[35,60],e=1)
         
    elif item=="PAL 780":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',780)
        max.setAttr('defaultResolution.height',576)
        max.setAttr('defaultResolution.deviceAspectRatio',1.333)
        max.setAttr('defaultResolution.pixelAspect',0.984)
        max.textFieldGrp('wh',l='Width:',tx='780',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='576',cw2=[35,60],e=1)      

    elif item=="2300x1294":
        max.setAttr ("defaultResolution.aspectLock", 1)
        max.setAttr('defaultResolution.width',2300)
        max.setAttr('defaultResolution.height',1294)
        max.setAttr('defaultResolution.deviceAspectRatio',1.777)
        max.setAttr('defaultResolution.pixelAspect',1.000)
        max.textFieldGrp('wh',l='Width:',tx='2300',cw2=[35,60],e=1)
        max.textFieldGrp('hh',l='Hight:',tx='1294',cw2=[35,60],e=1)      
                     
#Set frame/AnimationExt_____________________________________________________________________________
def frameAnimationExt(item):
    if item=="name.ext(Single Frame)":
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',0)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)

    elif item=="name_#.ext":
        #max.setAttr('defaultRenderGlobals.outFormatControl',0)
        max.setAttr('defaultRenderGlobals.animation',1)
        max.setAttr('defaultRenderGlobals.putFrameBeforeExt',1)
        max.setAttr('defaultRenderGlobals.periodInExt',2)
        max.setAttr('defaultRenderGlobals.extensionPadding',4)

#set printSereen____________________________________________________________________________________
def cappic(*arg):    
    cameraSel = max.ls(sl=True)
    if len(cameraSel)==0:
        max.confirmDialog (t ="eorre", m= "Please select camera" ,b='OK')
        print ('Please select camera'),
    else:
        cam=cameraSel[0]
        print cam
        max.setAttr("defaultRenderGlobals.imageFormat",32)
        ct = max.currentTime(q=1)  
        imagesWidth = int(max.textFieldGrp("txtFieldWidthCP",q=1,text=True))
        print imagesWidth  
        imagesHight = int(max.textFieldGrp("txtFieldHightCP",q=1,text=True))  
        print imagesHight
        imagesPath=max.textFieldGrp('tx_fiph',q=1,text=True)
        print imagesPath,
        imagesName=max.textFieldGrp('imageName',q=1,text=True)
       
        if max.checkBox('cbx_ucmn',q=1,v=1)== True:
            max.playblast(width=imagesWidth,height=imagesHight, p=100,fmt="image",v=0,cc=1,fo=1,os=1,st=ct,et=ct,fp=3,f="d:/"+cam,)
        elif max.checkBox ('cbx_ucmn',q=1, v=1) == 0:
            apname = max.textFieldGrp ('tx_fiph',q=1, tx=1)
            max.playblast(width=imagesWidth,height=imagesHight, p=100,fmt="image",v=0, cc=1,fo=1,os=1,st=ct,et=ct,fp=3,f=imagesPath+imagesName)
           

def openPath(*arg):
    max.textFieldGrp ('tx_fiph',e=1, l ="Enter Path:   " ,tx= "D:\\" ,cw2=[80,150],en= 0,)
    max.textFieldGrp ('imageName',e=1, l ="Image Name:" ,tx= "Camera/Character_Name" ,cw2=[80,150],en= 0,)
   
def closePath(*arg):
    max.textFieldGrp ('tx_fiph',e=1 ,l ="Enter Path:   " ,tx= "D:\works\mov6\images\\" ,cw2=[80,150],en=1,)
    max.textFieldGrp ('imageName',e=1, l ="Image Name:" ,tx= "Camera/Character_Name" ,cw2=[80,150],en= 1,)
   
def pictureSize(item):
    if item=="2300x1294":
        W='2300'
        H='1294'
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx=W,cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx=H,cw2=[40,60],e=1)
   
    elif item=="HD 1080 1920x1080":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='1920',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='1080',cw2=[40,60],e=1)
       
    elif item=="Full 1280/Screen 1280x1024":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='1280',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='1024',cw2=[40,60],e=1)  
   
    elif item=="HD 720 1280x720":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='1280',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='720',cw2=[40,60],e=1)
   
    elif item=="small icon 64x64":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='64',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='64',cw2=[40,60],e=1)
   
    elif item=="mid icon 128x128":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='128',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='128',cw2=[40,60],e=1)
   
    elif item=="big icon 256x256":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='256',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='256',cw2=[40,60],e=1)        
       
    elif item=="Full 1024 1024x768":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='1024',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='768',cw2=[40,60],e=1)
       
    elif item=="half Squrare 512x512":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='512',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='512',cw2=[40,60],e=1)
       
    elif item=="1k Square 1024x1024":
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx='1024',cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx='1024',cw2=[40,60],e=1)
       
    elif item=="2k Square 2048x2048":
        W='2048'
        H='2048'
        max.textFieldGrp('txtFieldWidthCP',l='Width:',tx=W,cw2=[47,60],e=1)
        max.textFieldGrp('txtFieldHightCP',l='Hight:',tx=H,cw2=[40,60],e=1)  
           
#chooseIcon_____________________________________________________________________________________________________________________________________________  
def chooseAll(*arg):
    if  max.iconTextCheckBox('allcx',q=1,v=1):        
        max.iconTextCheckBox('colorcx', v=1,e=1)
        max.iconTextCheckBox('specularcx', v=1,e=1)
        max.iconTextCheckBox('refletedcx', v=1,e=1)
        max.iconTextCheckBox('refraccx', v=1,e=1)
        max.iconTextCheckBox('aocx', v=1,e=1)
        max.iconTextCheckBox('fgaocx', v=1,e=1)
        max.iconTextCheckBox('linecx', v=1,e=1)
        max.iconTextCheckBox('zlinecx', v=1,e=1)
        max.iconTextCheckBox('facingcx', v=1,e=1)
        max.iconTextCheckBox('incidencecx', v=1,e=1)
        max.iconTextCheckBox('toonlcx',v=1,e=1)
        max.iconTextCheckBox('zdcx',v=1,e=1)
        max.iconTextCheckBox('sdcx',v=1,e=1)
        #max.iconTextCheckBox('aozcx',v=1,e=1)
        max.iconTextCheckBox('normalcx',v=1,e=1)
        #max.iconTextCheckBox('inormalcx', v=1,e=1)
        max.iconTextCheckBox('maskcx',v=1,e=1)
        max.iconTextCheckBox('tccx', v=1,e=1)
        max.iconTextCheckBox('hdrcx', v=1,e=1)
        max.iconTextCheckBox('mvcx', v=1,e=1)
        max.iconTextCheckBox('customcx', v=1,e=1)
        print ("Choies all!"),
    else :
        max.iconTextCheckBox('colorcx', v=0,e=1)
        max.iconTextCheckBox('specularcx', v=0,e=1)
        max.iconTextCheckBox('refletedcx', v=0,e=1)
        max.iconTextCheckBox('refraccx', v=0,e=1)
        max.iconTextCheckBox('aocx', v=0,e=1)
        max.iconTextCheckBox('fgaocx', v=0,e=1)
        max.iconTextCheckBox('linecx', v=0,e=1)
        max.iconTextCheckBox('zlinecx', v=0,e=1)
        max.iconTextCheckBox('facingcx', v=0,e=1)
        max.iconTextCheckBox('incidencecx', v=0,e=1)
        max.iconTextCheckBox('toonlcx',v=0,e=1)
        max.iconTextCheckBox('zdcx',v=0,e=1)
        max.iconTextCheckBox('sdcx',v=0,e=1)
        #max.iconTextCheckBox('aozcx',v=0,e=1)
        max.iconTextCheckBox('normalcx',v=0,e=1)
        #max.iconTextCheckBox('inormalcx', v=0,e=1)
        max.iconTextCheckBox('maskcx',v=0,e=1)
        max.iconTextCheckBox('tccx', v=0,e=1)
        max.iconTextCheckBox('hdrcx', v=0,e=1)
        max.iconTextCheckBox('mvcx', v=0,e=1) 
        max.iconTextCheckBox('customcx', v=0,e=1)
        print ("Clean all!"), 

def chooseAllAronld(*arg):
    if  max.iconTextCheckBox('arnoldAllcx',q=1,v=1):        
        max.iconTextCheckBox('arnoldAOcx', v=1,e=1)
        max.iconTextCheckBox('arnoldNcx', v=1,e=1)
        max.iconTextCheckBox('arnoldZcx', v=1,e=1)
        max.iconTextCheckBox('arnoldMVcx', v=1,e=1)        
        max.iconTextCheckBox('arnoldDfcx', v=1,e=1)
        max.iconTextCheckBox('arnoldSpcx', v=1,e=1)
        max.iconTextCheckBox('arnoldRfecx', v=1,e=1)
        max.iconTextCheckBox('arnoldRefraccx', v=1,e=1)
        max.iconTextCheckBox('arnoldsdcx', v=1,e=1)        
               
        print ("Choies all!"),
    else :
        max.iconTextCheckBox('arnoldAOcx', v=0,e=1)
        max.iconTextCheckBox('arnoldNcx', v=0,e=1)
        max.iconTextCheckBox('arnoldZcx', v=0,e=1)
        max.iconTextCheckBox('arnoldMVcx', v=0,e=1)        
        max.iconTextCheckBox('arnoldDfcx', v=0,e=1)
        max.iconTextCheckBox('arnoldSpcx', v=0,e=1)
        max.iconTextCheckBox('arnoldRfecx', v=0,e=1)
        max.iconTextCheckBox('arnoldRefraccx', v=0,e=1)
        max.iconTextCheckBox('arnoldsdcx', v=0,e=1)  
        print ("Clean all!"), 
        
def chooseAllRedShift(*arg):
    if  max.iconTextCheckBox('rsAllcx',q=1,v=1):
        max.iconTextCheckBox('rsAOcx', v=1,e=1)
        max.iconTextCheckBox('rsNcx', v=1,e=1)
        max.iconTextCheckBox('rsZcx', v=1,e=1)
        max.iconTextCheckBox('rsMVcx', v=1,e=1)        
        max.iconTextCheckBox('rsDfcx', v=1,e=1)
        max.iconTextCheckBox('rsRfecx', v=1,e=1)
        max.iconTextCheckBox('rsRfracx', v=1,e=1)
        max.iconTextCheckBox('rsSpcx', v=1,e=1)
        max.iconTextCheckBox('rssdcx', v=1,e=1)
        print ("Choies all!"),
    else :
        max.iconTextCheckBox('rsAOcx', v=0,e=1)
        max.iconTextCheckBox('rsNcx', v=0,e=1)
        max.iconTextCheckBox('rsZcx', v=0,e=1)
        max.iconTextCheckBox('rsMVcx', v=0,e=1) 
        max.iconTextCheckBox('rsDfcx', v=0,e=1)
        max.iconTextCheckBox('rsRfecx', v=0,e=1)
        max.iconTextCheckBox('rsRfracx', v=0,e=1)
        max.iconTextCheckBox('rsSpcx', v=0,e=1)
        max.iconTextCheckBox('rssdcx', v=0,e=1)       
        print ("Clean all!"), 
        
def selectUsualIcon(*arg):
     if  max.iconTextCheckBox('sucx',q=1,v=1):
         print "Selcet success!",
         max.iconTextCheckBox('colorcx', v=1,e=1)
         #max.iconTextCheckBox('specularcx', v=1,e=1)              
         max.iconTextCheckBox('linecx', v=1,e=1)
         #max.iconTextCheckBox('facingcx', v=1,e=1)
         max.iconTextCheckBox('toonlcx',v=1,e=1)
         max.iconTextCheckBox('zdcx',v=1,e=1)
         max.iconTextCheckBox('maskcx',v=1,e=1)
         max.iconTextCheckBox('arnoldAOcx', v=1,e=1)                
     else :
         max.iconTextCheckBox('colorcx', v=0,e=1)
         #max.iconTextCheckBox('specularcx', v=0,e=1)         
         max.iconTextCheckBox('linecx', v=0,e=1)
         #max.iconTextCheckBox('facingcx', v=0,e=1)
         max.iconTextCheckBox('toonlcx',v=0,e=1)
         max.iconTextCheckBox('zdcx',v=0,e=1)
         max.iconTextCheckBox('maskcx',v=0,e=1)
         max.iconTextCheckBox('arnoldAOcx', v=0,e=1)    
         print "Clean success!",
           
#about.....___________________________________________________________________________________________________________________________________________
def aboutInfo(*arg):
    max.window(t='About me',mnb =False ,mxb = False,sizeable =0)
    mainLayout=max.columnLayout(w=350,h=300)
    imagePath=max.internalVar(upd=1)+"icons/maxTools/chikinmak.png"
    b1=max.image(w=465,h=125,image=imagePath)
    max.text (align='left',l='    ChiKin Mak                           Maizhijian@foxmail.com   Phone:(+086)18620084979',h=18,w=465,fn='boldLabelFont',bgc=(0.15,0.15,0.15))    
    max.showWindow()
   
#import Some Flie_____________________________________________________________________________________________________________________________________
def importSomeFile(*arg):
    selectObjs=[]
    refFiles = max.fileDialog2 (fm=4,cap="Select Files to import")
    if len(refFiles) == 0:
        max.warning (l="No File to Import")
    else:
        result =max.promptDialog(
                        title='Import repeats',
                		message='Enter number:',
                		button=['OK', 'Cancel'],
                		defaultButton='OK',
                		cancelButton='Cancel',
                		dismissString='Cancel')
        print refFiles
   
        if result == "OK":
            nx = max.promptDialog (q=1 ,tx=1)
            n = int(nx)                      
            for refFiles in refFiles:                    
                secensName1=refFiles.split("/")
                print secensName1[-1]
                secensName2=secensName1[-1].split(".")
                print secensName2[0]
                selectObjs.append(secensName1[-1])
                print selectObjs*n
                nObjs = selectObjs*n
                path2=refFiles.split("/")
                print path2[-2]          
                path1=refFiles.split(path2[-2]+"/")
                print path1[0]    
               
        for i in range(len(nObjs)):
            print nObjs[i]            
            max.file(path1[0]+path2[-2]+"/"+nObjs[i],i = True,mnr=1,uns=1)
            print 'maxTools have finished %d repeats the import files.' %n,  

#cheakerModleUvMat
def cheakerModleUvMat(*arg):
    matSel = max.ls(sl=True)
    if len(matSel)==0:
           max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
           print ('Please select material!'),    
    else :
        uvMat=max.ls('ModelUV')
        if len(uvMat)==0:
            MatName = 'ModelUV'
            MatSG = 'ModelUV_SG'
            Name = 'ModelUV_node'
            myMat = max.shadingNode('lambert',asShader=True, n = MatName)
            myMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG)
            max.connectAttr(myMat+'.outColor',myMatSG+'.surfaceShader',f=1)
            max.setAttr(myMat+'.diffuse',0.8)
            UVP2dt = max.shadingNode('place2dTexture',au=1,n='uvP2dt')
            uvFile = max.shadingNode('file',au=1,n='uvFile')
            max.connectAttr( UVP2dt+'.outUV', uvFile+'.uvCoord',f=1)
            max.connectAttr( UVP2dt+'.coverage', uvFile+'.coverage',f=1)
            max.connectAttr( UVP2dt+'.outUvFilterSize', uvFile+'.uvFilterSize',f=1)
            max.connectAttr( UVP2dt+'.vertexCameraOne', uvFile+'.vertexCameraOne',f=1)
            max.connectAttr( UVP2dt+'.vertexUvThree', uvFile+'.vertexUvThree',f=1)
            max.connectAttr( UVP2dt+'.vertexUvTwo', uvFile+'.vertexUvTwo',f=1)
            max.connectAttr( UVP2dt+'.vertexUvOne', uvFile+'.vertexUvOne',f=1)
            max.connectAttr( UVP2dt+'.noiseUV', uvFile+'.noiseUV',f=1)
            max.connectAttr( UVP2dt+'.rotateUV', uvFile+'.rotateUV',f=1)
            max.connectAttr( UVP2dt+'.offset', uvFile+'.offset',f=1)
            max.connectAttr( UVP2dt+'.repeatUV', uvFile+'.repeatUV',f=1)
            max.connectAttr( UVP2dt+'.wrapV', uvFile+'.wrapV',f=1)
            max.connectAttr( UVP2dt+'.wrapU', uvFile+'.wrapU',f=1)
            max.connectAttr( UVP2dt+'.stagger', uvFile+'.stagger',f=1)
            max.connectAttr( UVP2dt+'.mirrorV', uvFile+'.mirrorV',f=1)
            max.connectAttr( UVP2dt+'.mirrorU', uvFile+'.mirrorU',f=1)
            max.connectAttr( UVP2dt+'.rotateFrame', uvFile+'.rotateFrame',f=1)
            max.connectAttr( UVP2dt+'.translateFrame', uvFile+'.translateFrame',f=1)
            max.connectAttr( uvFile+'.outColor', myMat+'.color',f=1)
            max.setAttr(uvFile+".filterType" ,0)
            max.setAttr(UVP2dt+".repeatU" ,15)
            max.setAttr(UVP2dt+".repeatV" ,15)
            max.setAttr(uvFile+".fileTextureName","C:\Program Files\Autodesk\Maya2014\icons\cheaker.png",type="string",)
        max.select(matSel)
        max.sets(edit=1,forceElement='ModelUV_SG')
        max.hyperShade(assign='ModelUV')
        max.select(cl=True)
   
#usualMat
def LambertMat(*arg):    
    Prefix=max.textFieldGrp("txtField",q=1,text=True)
    MatName = Prefix+"_01"
    MatSG = Prefix+'_SG_01'
    Name = Prefix+'_node_01'
    myMat = max.shadingNode('lambert',asShader=True, n = MatName)
    myMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG)
    max.connectAttr(myMat+'.outColor',myMatSG+'.surfaceShader',f=1)
    max.setAttr(myMat+'.diffuse',0.8)
    UVP2dt = max.shadingNode('place2dTexture',au=1,n='uvP2dt')
    uvFile = max.shadingNode('file',au=1,n='uvFile')            
    max.connectAttr( UVP2dt+'.outUV', uvFile+'.uvCoord',f=1)
    max.connectAttr( UVP2dt+'.coverage', uvFile+'.coverage',f=1)
    max.connectAttr( UVP2dt+'.outUvFilterSize', uvFile+'.uvFilterSize',f=1)
    max.connectAttr( UVP2dt+'.vertexCameraOne', uvFile+'.vertexCameraOne',f=1)
    max.connectAttr( UVP2dt+'.vertexUvThree', uvFile+'.vertexUvThree',f=1)
    max.connectAttr( UVP2dt+'.vertexUvTwo', uvFile+'.vertexUvTwo',f=1)
    max.connectAttr( UVP2dt+'.vertexUvOne', uvFile+'.vertexUvOne',f=1)
    max.connectAttr( UVP2dt+'.noiseUV', uvFile+'.noiseUV',f=1)
    max.connectAttr( UVP2dt+'.rotateUV', uvFile+'.rotateUV',f=1)
    max.connectAttr( UVP2dt+'.offset', uvFile+'.offset',f=1)
    max.connectAttr( UVP2dt+'.repeatUV', uvFile+'.repeatUV',f=1)
    max.connectAttr( UVP2dt+'.wrapV', uvFile+'.wrapV',f=1)
    max.connectAttr( UVP2dt+'.wrapU', uvFile+'.wrapU',f=1)
    max.connectAttr( UVP2dt+'.stagger', uvFile+'.stagger',f=1)
    max.connectAttr( UVP2dt+'.mirrorV', uvFile+'.mirrorV',f=1)
    max.connectAttr( UVP2dt+'.mirrorU', uvFile+'.mirrorU',f=1)
    max.connectAttr( UVP2dt+'.rotateFrame', uvFile+'.rotateFrame',f=1)
    max.connectAttr( UVP2dt+'.translateFrame', uvFile+'.translateFrame',f=1)
    max.connectAttr( uvFile+'.outColor', myMat+'.color',f=1)
    max.setAttr(uvFile+".filterType" ,0)

def BlinnMat(*arg):    
    Prefix=max.textFieldGrp("txtField",q=1,text=True)
    MatName = Prefix+"_01"
    MatSG = Prefix+'_SG_01'
    Name = Prefix+'_node_01'
    myMat = max.shadingNode('blinn',asShader=True, n = MatName)
    myMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG)
    max.connectAttr(myMat+'.outColor',myMatSG+'.surfaceShader',f=1)
    max.setAttr(myMat+'.diffuse',0.8)
    UVP2dt = max.shadingNode('place2dTexture',au=1,n='uvP2dt')
    uvFile = max.shadingNode('file',au=1,n='uvFile')            
    max.connectAttr( UVP2dt+'.outUV', uvFile+'.uvCoord',f=1)
    max.connectAttr( UVP2dt+'.coverage', uvFile+'.coverage',f=1)
    max.connectAttr( UVP2dt+'.outUvFilterSize', uvFile+'.uvFilterSize',f=1)
    max.connectAttr( UVP2dt+'.vertexCameraOne', uvFile+'.vertexCameraOne',f=1)
    max.connectAttr( UVP2dt+'.vertexUvThree', uvFile+'.vertexUvThree',f=1)
    max.connectAttr( UVP2dt+'.vertexUvTwo', uvFile+'.vertexUvTwo',f=1)
    max.connectAttr( UVP2dt+'.vertexUvOne', uvFile+'.vertexUvOne',f=1)
    max.connectAttr( UVP2dt+'.noiseUV', uvFile+'.noiseUV',f=1)
    max.connectAttr( UVP2dt+'.rotateUV', uvFile+'.rotateUV',f=1)
    max.connectAttr( UVP2dt+'.offset', uvFile+'.offset',f=1)
    max.connectAttr( UVP2dt+'.repeatUV', uvFile+'.repeatUV',f=1)
    max.connectAttr( UVP2dt+'.wrapV', uvFile+'.wrapV',f=1)
    max.connectAttr( UVP2dt+'.wrapU', uvFile+'.wrapU',f=1)
    max.connectAttr( UVP2dt+'.stagger', uvFile+'.stagger',f=1)
    max.connectAttr( UVP2dt+'.mirrorV', uvFile+'.mirrorV',f=1)
    max.connectAttr( UVP2dt+'.mirrorU', uvFile+'.mirrorU',f=1)
    max.connectAttr( UVP2dt+'.rotateFrame', uvFile+'.rotateFrame',f=1)
    max.connectAttr( UVP2dt+'.translateFrame', uvFile+'.translateFrame',f=1)
    max.connectAttr( uvFile+'.outColor', myMat+'.color',f=1)
    max.setAttr(uvFile+".filterType" ,0)

#closeSp
def closeSpecular(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else:        
        for i in matSel:
            max.setAttr (i+".specularColor", 0 ,0 ,0,type="double3")
            max.setAttr (i+".reflectivity",0)
            max.setAttr (i+".incandescence",0,0,0,type ='double3')
            max.setAttr (i+".ambientColor",1,1,1,type ='double3')
            max.setAttr (i+".diffuse",0)    
            print('OK'),


#layerTexture
def layerTexture(*arg):
    LTSG = 'LTSG_01'
    LTCName = 'layerTextrue_Color_01'
    ltName = "layerTextrue_01"
    #myLT = max.shadingNode('blinn',asShader=True, n = LTCName)
    myLT = max.shadingNode('surfaceShader',asShader=True, n = LTCName)
    myLTSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=LTSG)
    max.connectAttr(myLT+'.outColor',myLTSG+'.surfaceShader')
    #max.setAttr(myLT+'.specularColor',0,0,0, type="double3")
    #max.setAttr(myLT+'.diffuse',0)
    #max.setAttr(myLT+'.reflectivity',0)
    #max.setAttr(myLT+'.ambientColor',1,1,1,type="double3")
    LT = max.shadingNode('layeredTexture',asTexture=1,n=ltName)
    #max.connectAttr( LT+".outColor", myLT+".color",f=1)
    max.connectAttr( LT+".outColor", myLT+".outColor",f=1)
   
    refFiles = max.fileDialog2 (fm=4,cap="Select some textures to create layertexture of color",dialogStyle=2,okc="Select")
    if len(refFiles) == 0:
        max.warning (l="No image to create")
    else:
        print refFiles  
        for i in refFiles:
            print i            
            secensName1 = i.split("/")
            print secensName1[-1]
            secensName2 = secensName1[-1].split(".")
            print secensName2[0]
            name = secensName2[0]
            secensName3 = secensName2[0].split("_")
            print secensName3[-1]
            number = secensName3[-1]              
            n = int(number)
            print n                        
            s=str(number)
            print s[-1]
            print s[-2]
            P2dtName = "P2dt_"+name
            print P2dtName
            FileName = name
            U=s[-1]
            print U
            V=s[-2]
            print V        
           
            LTP2dt = max.shadingNode('place2dTexture',au=1,n=P2dtName)
            LTFile = max.shadingNode('file',au=1,n=FileName)
                   
            max.setAttr(LTFile+".defaultColorR",0)  
            max.setAttr(LTFile+".defaultColorG",0)
            max.setAttr(LTFile+".defaultColorB",0)                
            max.connectAttr( LTP2dt+'.outUV', LTFile+'.uvCoord',f=1)
            max.connectAttr( LTP2dt+'.coverage', LTFile+'.coverage',f=1)
            max.connectAttr( LTP2dt+'.outUvFilterSize', LTFile+'.uvFilterSize',f=1)
            max.connectAttr( LTP2dt+'.vertexCameraOne', LTFile+'.vertexCameraOne',f=1)
            max.connectAttr( LTP2dt+'.vertexUvThree', LTFile+'.vertexUvThree',f=1)
            max.connectAttr( LTP2dt+'.vertexUvTwo', LTFile+'.vertexUvTwo',f=1)
            max.connectAttr( LTP2dt+'.vertexUvOne', LTFile+'.vertexUvOne',f=1)
            max.connectAttr( LTP2dt+'.noiseUV', LTFile+'.noiseUV',f=1)
            max.connectAttr( LTP2dt+'.rotateUV', LTFile+'.rotateUV',f=1)
            max.connectAttr( LTP2dt+'.offset', LTFile+'.offset',f=1)
            max.connectAttr( LTP2dt+'.repeatUV', LTFile+'.repeatUV',f=1)
            max.connectAttr( LTP2dt+'.wrapV', LTFile+'.wrapV',f=1)
            max.connectAttr( LTP2dt+'.wrapU', LTFile+'.wrapU',f=1)
            max.connectAttr( LTP2dt+'.stagger', LTFile+'.stagger',f=1)
            max.connectAttr( LTP2dt+'.mirrorV', LTFile+'.mirrorV',f=1)
            max.connectAttr( LTP2dt+'.mirrorU', LTFile+'.mirrorU',f=1)
            max.connectAttr( LTP2dt+'.rotateFrame', LTFile+'.rotateFrame',f=1)
            max.connectAttr( LTP2dt+'.translateFrame', LTFile+'.translateFrame',f=1)
            max.setAttr(LTP2dt+".wrapU" ,0)
            max.setAttr(LTP2dt+".wrapV" ,0)
            max.setAttr(LTFile+".filterType",0)
            #max.setAttr(LTFile+".alphaIsLuminance",1)
           
            inputs= ".inputs[%d]"%int(s)
            print inputs
            max.connectAttr( LTFile+'.outColor', LT+inputs+".color" ,f=1,)        
            max.setAttr(LT+inputs+".blendMode" ,8)
   
            max.setAttr(LTP2dt+".translateFrameU" ,int(U))
            max.setAttr(LTP2dt+".translateFrameV" ,int(V))
            max.setAttr(LTFile+".fileTextureName",str(i),type="string")
            max.removeMultiInstance(LT+".inputs[0]",b = 1)    

def MRrayWitch(*arg):
    loadMentalRayPlugin()
    loadMentalRayPlugin()
    mel.eval('window -e -vis 0 unifiedRenderGlobalsWindow;')
    objSet_MRrayWitch = max.ls(sl=1,type="transform")
    print objSet_MRrayWitch
    if len(objSet_MRrayWitch)==0:
        max.confirmDialog (t ="Prompt", m= "Please select a object!" ,b='OK')
    else:    
        Files = max.fileDialog2 (fm=1,cap="Select a texture to create MRrayWitch",dialogStyle=2,okc="Select")
        print Files[0]
        if len(Files)==0:
            max.confirmDialog (t ="Prompt", m= "Please select an image!" ,b='OK')
        else:
            colorAlpha = max.shadingNode('mib_color_alpha',asShader=True, n = 'colorAlpha')
            cameramap = max.shadingNode('mip_cameramap',asShader=True, n = 'cameramap')
            rayswitch_environment = max.shadingNode('mip_rayswitch_environment',asShader=True, n='rayswitch')
            matteShadow = max.shadingNode('mip_matteshadow',asShader=True, n = 'matteShadow')
            matteShadowMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='matteShadowSG1')
            MRIblP2dt = max.shadingNode('place2dTexture',au=1,n='MRIblP2dt')
            MRIblFile = max.shadingNode('file',au=1,n='MRIblFile')
                               
            max.connectAttr( MRIblP2dt+'.outUV', MRIblFile+'.uvCoord',f=1)
            max.connectAttr( MRIblP2dt+'.coverage', MRIblFile+'.coverage',f=1)
            max.connectAttr( MRIblP2dt+'.outUvFilterSize', MRIblFile+'.uvFilterSize',f=1)
            max.connectAttr( MRIblP2dt+'.vertexCameraOne', MRIblFile+'.vertexCameraOne',f=1)
            max.connectAttr( MRIblP2dt+'.vertexUvThree', MRIblFile+'.vertexUvThree',f=1)
            max.connectAttr( MRIblP2dt+'.vertexUvTwo', MRIblFile+'.vertexUvTwo',f=1)
            max.connectAttr( MRIblP2dt+'.vertexUvOne', MRIblFile+'.vertexUvOne',f=1)
            max.connectAttr( MRIblP2dt+'.noiseUV', MRIblFile+'.noiseUV',f=1)
            max.connectAttr( MRIblP2dt+'.rotateUV', MRIblFile+'.rotateUV',f=1)
            max.connectAttr( MRIblP2dt+'.offset', MRIblFile+'.offset',f=1)
            max.connectAttr( MRIblP2dt+'.repeatUV', MRIblFile+'.repeatUV',f=1)
            max.connectAttr( MRIblP2dt+'.wrapV', MRIblFile+'.wrapV',f=1)
            max.connectAttr( MRIblP2dt+'.wrapU', MRIblFile+'.wrapU',f=1)
            max.connectAttr( MRIblP2dt+'.stagger', MRIblFile+'.stagger',f=1)
            max.connectAttr( MRIblP2dt+'.mirrorV', MRIblFile+'.mirrorV',f=1)
            max.connectAttr( MRIblP2dt+'.mirrorU', MRIblFile+'.mirrorU',f=1)
            max.connectAttr( MRIblP2dt+'.rotateFrame', MRIblFile+'.rotateFrame',f=1)
            max.connectAttr( MRIblP2dt+'.translateFrame', MRIblFile+'.translateFrame',f=1)
            max.setAttr(MRIblFile+".filterType",0)
            max.setAttr(colorAlpha+".factor",0)
            
            max.connectAttr (MRIblFile+'.outColor',cameramap+'.map',force=1)
            max.connectAttr (cameramap+'.outValue',rayswitch_environment+'.environment',force=1)
            max.connectAttr (cameramap+'.outValueA',rayswitch_environment+'.environmentA',force=1)
            max.connectAttr (colorAlpha+'.outValue',rayswitch_environment+'.background',force=1)
            max.connectAttr (colorAlpha+'.outValueA',rayswitch_environment+'.backgroundA',force=1)
            max.connectAttr (rayswitch_environment+'.outValue',matteShadow+'.background',force=1)  
            max.connectAttr (rayswitch_environment+'.outValueA',matteShadow+'.backgroundA',force=1)  
            max.connectAttr (matteShadow+'.message',matteShadowMatSG+'.miMaterialShader',force=1) 
            
            max.setAttr(MRIblFile+".useFrameExtension",1)
            MRMpEx = max.shadingNode('expression',asShader=True, n = 'mpExName')
            MRMpTime = max.shadingNode('time',asShader=True, n = 'exTime')
            max.connectAttr(MRMpTime+'.outTime',MRMpEx+'.time')
            max.connectAttr(MRMpEx+'.output[0]',MRIblFile+'.frameExtension')
            
            max.setAttr ( MRIblFile+'.fileTextureName', "%s"%(Files[0]),type = "string")
            
            max.select(cl=True)
            max.select(objSet_MRrayWitch[0])
            max.sets(edit=1,forceElement=matteShadowMatSG)
            max.hyperShade(assign=matteShadowMatSG)
            max.select(cl=True)
           
def RSrayWitch(*arg):
    loadsrPlugin()
    loadsrPlugin()
    mel.eval('window -e -vis 0 unifiedRenderGlobalsWindow;')
    objSet_RSrayWitch = max.ls(sl=1,type="transform")
    print objSet_RSrayWitch
    if len(objSet_RSrayWitch)==0:
        max.confirmDialog (t ="Prompt", m= "Please select a object!" ,b='OK')
    else:    
        Files = max.fileDialog2 (fm=1,cap="Select a texture to create MRrayWitch",dialogStyle=2,okc="Select")
        print Files[0]
        if len(Files)==0:
            max.confirmDialog (t ="Prompt", m= "Please select an image!" ,b='OK')
        else:
            cameramap = max.shadingNode('RedshiftCameraMap',asShader=True, n = 'RScameramap_01')
            rayswitch = max.shadingNode('RedshiftRaySwitch',asShader=True, n='RSrayswitch_01')
            matteShadow = max.shadingNode('RedshiftMatteShadowCatcher',asShader=True, n = 'RSMatteShadow_01')
            RSmatteShadowMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='RSmatteShadowSG_01')
                                     
            max.connectAttr (cameramap+'.outColor',rayswitch+'.giColor',force=1)
            max.connectAttr (cameramap+'.outColor',rayswitch+'.reflectionColor',force=1)
            max.connectAttr (cameramap+'.outColor',rayswitch+'.refractionColor',force=1)
            max.connectAttr (rayswitch+'.outColor',matteShadow+'.diffuse',force=1)
            max.connectAttr (rayswitch+'.outColor',matteShadow+'.background',force=1) 
            max.connectAttr (matteShadow+'.outColor',RSmatteShadowMatSG+'.surfaceShader',force=1)                   
            
            #set rayswitch
            max.setAttr(rayswitch+".cameraSwitchFrontBack",1)
            max.setAttr(rayswitch+".cameraColorBack",0,0,0, type = "double3")
            
            max.setAttr(rayswitch+".reflectionSwitch",1)
            max.setAttr(rayswitch+".reflectionSwitchFrontBack",1)
            max.setAttr(rayswitch+".reflectionColorBack",0,0,0, type = "double3")
            
            max.setAttr(rayswitch+".refractionSwitch",1)
            max.setAttr(rayswitch+".refractionSwitchFrontBack",1)
            max.setAttr(rayswitch+".refractionColorBack",0,0,0, type = "double3")
            
            max.setAttr(rayswitch+".giSwitch",1)
            max.setAttr(rayswitch+".giSwitchFrontBack",1)
            max.setAttr(rayswitch+".giColorBack",0,0,0, type = "double3")
            
            max.setAttr(rayswitch+".cameraColor",0,0,0, type = "double3")
            max.setAttr(cameramap+".tex0", str(Files[0]),type = "string")
    
            #set matteShadow                
            max.setAttr(matteShadow+".background_alpha",0)
            max.setAttr(matteShadow+".emissive_color",0,0,0, type = "double3")
            max.setAttr(matteShadow+".catch_diffuse",1)        
            
            max.setAttr(matteShadow+".refl_enabled",1)
            max.setAttr(matteShadow+".refl_color",0.2,0.2,0.2, type = "double3")
            max.setAttr(matteShadow+".reflectivity",0.5)
            max.setAttr(matteShadow+".refl_glossiness",0.5)
            
            max.setAttr(matteShadow+".ao_on",1)
            max.setAttr(matteShadow+".ao_dark",0.2,0.2,0.2, type = "double3")        
            
            max.select(cl=True)
            max.select(objSet_RSrayWitch[0])
            max.sets(edit=1,forceElement=RSmatteShadowMatSG)
            max.hyperShade(assign=RSmatteShadowMatSG)
            max.select(cl=True)
            
#Auto sequence
def selectSequenceFile(*arg):
    if  max.iconTextCheckBox('fileNode',q=1,v=1): 
        max.iconTextCheckBox('moveNode',v=0,e=1)
        max.checkBox ('UIS',e=1,en=1)
        max.checkBox ('UMS',e=1,en=0,v=0)  
        max.checkBox ('UR',e=1,en=0,v=0)
        max.intFieldGrp('RDM',e=1, numberOfFields=1, label='Random:', value1=1 ,en=0)
        max.intFieldGrp('TE',e=1, numberOfFields=2, label='Time echo:', value1=0 ,value2=0 , columnWidth2= [0,90],en=0)
        max.intFieldGrp('ST',e=1, numberOfFields=1, label='Start time:', extraLabel='frame', value1=0 ,en=0)
        max.intFieldGrp('UVR',e=1, numberOfFields=1, label='Uv Rotate:', extraLabel='angle', value1=0 ,en=1)

def selectSequenceMove(*arg):
    if  max.iconTextCheckBox('moveNode',q=1,v=1): 
        max.iconTextCheckBox('fileNode',v=0,e=1)
        max.checkBox ('UMS',e=1,en=1)
        max.checkBox ('UIS',e=1,en=0,v=0) 
        max.checkBox ('UR',e=1,en=0,v=0)               
        max.intFieldGrp('RDM',e=1, numberOfFields=1, label='Random:', value1=1 ,en=0)
        max.intFieldGrp('TE',e=1, numberOfFields=2, label='Time echo:', value1=0 ,value2=0 , columnWidth2= [0,90],en=0)
        max.intFieldGrp('ST',e=1, numberOfFields=1, label='Start time:', extraLabel='frame', value1=0 ,en=0)
        max.intFieldGrp('UVR',e=1, numberOfFields=1, label='Uv Rotate:', extraLabel='angle', value1=0 ,en=1)

def closeUMSPath(*arg): 
    max.checkBox ('UR',e=1,en=0)

def openUMSPath(*arg): 
    max.checkBox ('UR',e=1,en=1)

def closeURPath(*arg):  
    max.intFieldGrp('RDM',e=1,en=0)  
    max.intFieldGrp('TE',e=1,en=0) 
    max.intFieldGrp('ST',e=1,en=0) 

def openURPath(*arg): 
    max.intFieldGrp('RDM',e=1,en=1)
    max.intFieldGrp('TE',e=1,en=1)
    max.intFieldGrp('ST',e=1,en=1)

def windowsSFMtab(*arg):
    if max.window('windowssfm',ex=1):
       max.deleteUI('windowssfm')
    global windowsSFN
    windowsSFN = max.window('windowssfm',t='Random animation of paper Tools',mnb =False ,mxb = False,sizeable =0)
    mainLayout=max.columnLayout(w=250,h=300)
    max.text(align='left',l=' Please select icon and enter value:', backgroundColor=( 0.15 ,0.15,0.15),w=220,h=15)
    max.separator(h=5)
    
    max.rowColumnLayout( numberOfColumns=2, columnWidth=[(1, 110), (2, 110)])
    flITCB = max.iconTextCheckBox('fileNode', style='iconOnly', image1='icons/maxTools/sequenceImage.png',ann='Create Images Nodes: \nThe format of file name: \nXXX_1_01.png\nXXX_10_02.png\nXXX_100_03.png',cc=selectSequenceFile)
    movITCB = max.iconTextCheckBox('moveNode', style='iconOnly', image1='icons/maxTools/sequenceMoive.png',ann='Create Moives nodes: \nThe format of file name: \nXXX_1_01.mov\nXXX_10_02.mov\nXXX_100_03.mov',cc=selectSequenceMove)
    max.setParent("..")
    
    max.rowColumnLayout( numberOfRows=5 )
    max.checkBox ('UIS',l="Use Image Sequence",ofc=closeUMSPath,onc=openUMSPath,v=0,en=0)
    max.checkBox ('UMS',l="Use Movie Sequence",ofc=closeUMSPath,onc=openUMSPath,v=0,en=0)
    max.checkBox ('UR',l="Use Return",ofc=closeURPath,onc=openURPath,v=0,en=0)
    max.setParent("..")
    max.setParent("..")
    
    max.columnLayout(cat=["left",-87])
    max.intFieldGrp('RDM', numberOfFields=1, label='Random:', value1=1 ,en=0)
    max.intFieldGrp('TE', numberOfFields=2, label='Time echo:', value1=0 ,value2=0 , columnWidth2= [0,90],en=0)
    max.intFieldGrp('ST', numberOfFields=1, label='Start time:', extraLabel='frame', value1=0 ,en=0)
    max.intFieldGrp('UVR', numberOfFields=1, label='Uv Rotate:', extraLabel='angle', value1=0 ,en=0)
    max.setParent("..")
    
    max.rowColumnLayout( numberOfRows=1 )
    TLok=max.button('winTlOk',l='OK',w=110,command=sequenceFile)
    print TLok
    max.button(l='Cancel',w=110,command=('max.deleteUI(windowsSFN,window=True)'))
    
    max.setParent("..")
    max.showWindow(windowsSFN)  

def AtuoCamera(*arg):
    camm = max.camera(n="shot_test_001")
    print camm
    mel.eval('lookThroughModelPanel %s modelPanel4;'%camm[0])
    max.setAttr(camm[0]+".translateX",45)
    max.setAttr(camm[0]+".translateY",45)
    max.setAttr(camm[0]+".translateZ",60)
    max.setAttr(camm[0]+".rotateX",-30)
    max.setAttr(camm[0]+".rotateY",35)
    max.setAttr(camm[0]+".rotateY",35)
    max.setAttr(camm[1]+".farClipPlane",100000)

def addPropToLayer(*arg):
    selObj = max.ls(sl=1)
    #get aoLayer_______________________________________________________________________________________
    arnoldAOLayer = max.ls("*"+"arnold"+"*",type='renderLayer')
    if len(arnoldAOLayer)==True:         
        #select layer to edit 
        max.editRenderLayerGlobals(crl=arnoldAOLayer[0])
        #set aiOpaque
        for obj in selObj:
            max.setAttr(obj+".aiOpaque",0)
        #take selObj add layer 
        max.select(selObj)
        max.editRenderLayerMembers(arnoldAOLayer[0],selObj,noRecurse=1)
        
        #arnoldAOMat
        if max.ls('arnoldAO_01',type="aiAmbientOcclusion") == 0:       
            arnoldAOMatName = 'arnoldAO_01'
            arnoldAOMatSG = 'arnoldAOmatSG_01'
            occName = 'arnoldAOnode_01'
            myarnoldAOMat = max.shadingNode('aiAmbientOcclusion',asShader=True, n = arnoldAOMatName)
            global myarnoldAOMatSG
            myarnoldAOMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=arnoldAOMatSG)
            max.connectAttr(myarnoldAOMat+'.outColor',myarnoldAOMatSG+'.surfaceShader',f=1)
            max.setAttr (myarnoldAOMat+".samples",7)     
        
        #filter obj
        allShader_mask_aAO_02 =[]        
        for selC in selObj:
            print selC
            geo = max.ls(selC,s=1,o=1,dag=1)
            print geo
            shadingGrps= max.listConnections(geo[0],type="shadingEngine")
            print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            print sdg
            shadersMask =max.ls(sdg,materials=1)   
            print shadersMask[0]  
            allShader_mask_aAO_02.append(shadersMask[0])         
            
        print allShader_mask_aAO_02
        shaderA = max.ls(allShader_mask_aAO_02)
        shaderB = max.select(shaderA)
        shaderC= max.ls(sl=1)
        selShader = max.ls(shaderC,type="phong" and "lambert" ) 
        print selShader                            
        
        for u in selShader:         
            transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
            print u
            print transparencyPath  
            if transparencyPath!='':
                #create new material
                arnoldAOMatName = 'arnoldAO_alpha_01'
                arnoldAOMatSG = 'arnoldAOmatSG_alpha_01'
                occName = 'arnoldAOnode_alpha_01'
                myarnoldAOMat = max.shadingNode('aiAmbientOcclusion',asShader=True, n = arnoldAOMatName)
                aAOAplhaMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=arnoldAOMatSG)
                max.connectAttr(myarnoldAOMat+'.outColor ',aAOAplhaMatSG+'.surfaceShader',f=1)
                max.setAttr (myarnoldAOMat+".samples",7) 
                #get alpha node
                max.select(u)       
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,myarnoldAOMat+'.opacity',f=True)
                #give material
                max.editRenderLayerGlobals(crl=arnoldAOLayer[0])
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = aAOAplhaMatSG) 
                SelC = max.pickWalk(d="up")
                print SelC      
                for obj in SelC:
                    max.setAttr(obj+".aiOpaque",0)
                     
                max.select(cl=True)                              
                print "arnold AO Done!",
                
            else:               
                #getMat
                max.editRenderLayerGlobals(crl=arnoldAOLayer[0])
                max.select(cl=True)
                max.select(u)
                SelA = max.hyperShade( objects='')
                maSel=max.sets(edit=1,forceElement = 'arnoldAOmatSG_01')
                max.select(cl=True)             
                print "arnold AO Done!"
                
        mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
        max.select(cl=1)    
        
        #get MaskLayer_______________________________________________________________________________________
        MaskLayer = max.ls("*"+"Mask"+"*",type='renderLayer')
        print MaskLayer
        if len(MaskLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=MaskLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(MaskLayer[0],selObj,noRecurse=1)
            #hide obj
            qiObj = max.ls("Plane021","*"+":Plane021",
                             "Plane020","*"+":Plane020",
                             "Plane019","*"+":Plane019",
                             "Plane018","*"+":Plane018",
                             "Plane017","*"+":Plane017",
                             "Plane016","*"+":Plane016",)
            if len(qiObj)==1:
                hideObj = max.select(qiObj) 
                max.HideSelectedObjects(hideObj)                
                max.select(cl=1)
                               
            allShader_mask =[]
    
            for selC in selObj:
                print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                print sdg
                shadersMask =max.ls(sdg,materials=1)   
                print shadersMask[0]  
                allShader_mask.append(shadersMask[0])              
                
            print allShader_mask 
            shaderA = max.ls(allShader_mask)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            print selShader                     
            
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                print u
                print transparencyPath  
                if transparencyPath!='':
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    SelC =  max.pickWalk(d="up")
                    print SelC
                    SelB = max.ls(SelC,type="transform")
                    print SelB
                    max.select(SelB)
                    isDisplayLayer = max.listConnections(SelB[0],type="displayLayer")
                    print isDisplayLayer
                    
                    #create new material
                    MaskName = 'MakeColor1_01'
                    gammaName = 'GM_01'
                    ColorMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = MaskName)
                    ColorMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='MaskColorSG1')
                    max.connectAttr(ColorMyMaskMat+'.outColor', ColorMyMaskMatSG+'.surfaceShader',f=1)
                    
                    #layer material
                    layeredShaderC = max.shadingNode('layeredShader',asShader=True, n = 'Mask_alpha_01')
                    layeredShaderCSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Mask_alpha_SG_01')
                    max.connectAttr(layeredShaderC+'.outColor',layeredShaderCSG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderC+".compositingFlag", 1)
                    max.connectAttr( ColorMyMaskMat+'.outColor', layeredShaderC+'.inputs[0].color',f=1) 
                    
                    #select color
                    gammaA = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)
                    max.connectAttr (gammaA+'.outValue',ColorMyMaskMat+'.outColor',force=1)
                    max.setAttr(gammaA+".gammaX",0.45)
                    max.setAttr(gammaA+".gammaY",0.45)
                    max.setAttr(gammaA+".gammaZ",0.45)  
                    
                    if isDisplayLayer >= 1:
                        if isDisplayLayer[0] in max.ls("*sky_set","*:*sky_set",type="displayLayer"):                    
                            max.setAttr(gammaA+'.value',0,0,1, type="double3")
                            print "B>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                            
                        if isDisplayLayer[0] in max.ls("*floor_set","*:*floor_set",type="displayLayer"):                    
                            max.setAttr(gammaA+'.value',0,1,0, type="double3")                    
                            print "G>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"   
                            
                        if isDisplayLayer[0] in max.ls("*scenes_set","*:*scenes_set",type="displayLayer"):                    
                            max.setAttr(gammaA+'.value',1,0,0, type="double3")
                            print "R>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" 
                                               
                        if isDisplayLayer[0] in max.ls("P_*","*:P_*",type="displayLayer"):
                            max.setAttr(gammaA+'.value',0.44,0.77,0.66, type="double3") 
                            print "P>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
                             
                    else:
                        max.setAttr(gammaA+'.value',0.55,0.55,0.55, type="double3") 
                           
                    max.connectAttr( transparencyPath, layeredShaderC+'.inputs[0].transparency',f=1)
                    
                    #give material
                    #max.editRenderLayerGlobals(crl=MaskLayer[0])
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderCSG)
                    max.select(cl=True) 
                    
                    F = max.ls(type="file")
                    if len(F) > 0:
                        for fSel in F:
                            max.setAttr(fSel+".alphaIsLuminance",1)                
                    print "Mask Done",
                else:               
                    max.select(u)
                    SelD = max.hyperShade( objects='')
                    SelE =  max.pickWalk(d="up")
                    print SelE
                    SelF = max.ls(SelE,type="transform")
                    print SelF
                    #max.select(SelF)
                    isDisplayLayer = max.listConnections(SelF[0],type="displayLayer")
                    print isDisplayLayer
                    
                    MaskName = 'MakeColor1_01'
                    gammaName = 'GM_01'
                    ColorMyMaskMat = max.shadingNode('surfaceShader',asShader=True, n = MaskName)
                    ColorMyMaskMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='MaskColorSG1')
                    max.connectAttr(ColorMyMaskMat+'.outColor', ColorMyMaskMatSG+'.surfaceShader',f=1)
                    
                    #select color
                    gammaB = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)
                    max.connectAttr (gammaB+'.outValue',ColorMyMaskMat+'.outColor',force=1)
                    max.setAttr(gammaB+".gammaX",0.45)
                    max.setAttr(gammaB+".gammaY",0.45)
                    max.setAttr(gammaB+".gammaZ",0.45) 
                    
                    if isDisplayLayer >= 1:
                        if isDisplayLayer[0] in max.ls("*sky_set","*:*sky_set",type="displayLayer"):
                            #max.editRenderLayerGlobals(crl=MaskLayer)
                            max.select(cl=True)   
                            max.select(u)
                            SelA = max.hyperShade( objects='')
                            maSel=max.sets(edit=1,forceElement = 'BSG') 
                            max.select(cl=True) 
                        
                        if isDisplayLayer[0] in max.ls("*floor_set","*:*floor_set",type="displayLayer"):
                            #max.editRenderLayerGlobals(crl=MaskLayer)
                            max.select(cl=True)   
                            max.select(u)
                            SelA = max.hyperShade( objects='')
                            maSel=max.sets(edit=1,forceElement = 'GSG') 
                            max.select(cl=True)
                                
                        if isDisplayLayer[0] in max.ls("*scenes_set","*:*scenes_set",type="displayLayer"):
                            #max.editRenderLayerGlobals(crl=MaskLayer)
                            max.select(cl=True)   
                            max.select(u)
                            SelA = max.hyperShade( objects='')
                            maSel=max.sets(edit=1,forceElement = 'RSG') 
                            max.select(cl=True)
                             
                        if isDisplayLayer[0] in max.ls("P_*","*:P_*",type="displayLayer"):
                            #max.editRenderLayerGlobals(crl=MaskLayer)
                            max.select(cl=True)   
                            max.select(u)
                            SelA = max.hyperShade( objects='')
                            maSel=max.sets(edit=1,forceElement = 'PSG') 
                            max.select(cl=True)       
                    else:
                        #max.editRenderLayerGlobals(crl=MaskLayer)
                        max.select(cl=True)   
                        max.select(u)
                        SelA = max.hyperShade( objects='')
                        maSel=max.sets(edit=1,forceElement = 'OSG')  
                        max.select(cl=True) 
                        
                    print "Mask Done"
        
            mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
            max.select(cl=1)
            
        #get ToonLLayer_______________________________________________________________________________________
        TlLayer = max.ls("*"+"ToonL"+"*",type='renderLayer')
        if len(TlLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=TlLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(TlLayer[0],selObj,noRecurse=1)
            #filter obj
            allShader_mask_TL_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_mask_TL_02.append(shadersMask[0])              
            
            if max.ls('ZD_'+"*"+'_01')==0:
                ZDMatName = 'ZD_'+Prefix+'_01'
                ZDMatSG = Prefix+'_ZDSG_01'
                ZDName = Prefix+'_ZDnode_01'
                global myZdMat
                myZdMat = max.shadingNode('surfaceShader',asShader=True, n = ZDMatName)
                myZdMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=ZDMatSG)
                max.connectAttr(myZdMat+'.outColor',myZdMatSG+'.surfaceShader',f=1)
                max.addAttr(longName='camNear', attributeType="long",dv=1)
                max.addAttr(longName='camFar', attributeType="long",dv=1000)
                zd_sp = max.shadingNode('samplerInfo',au=1,n='zd_sp_01')
                zd_P2dt = max.shadingNode('place2dTexture',au=1,n='zd_P2dt_01')
                zd_Ramp = max.shadingNode('ramp',at=1,n='zd_Ramp_01')
                zd_sR=max.shadingNode('setRange',n='zd_sr_01',au=1)
                zd_db = max.shadingNode('distanceBetween',au=1,n='zd_db_01')
                max.connectAttr(zd_sp+'.pointCamera', zd_db+'.point1',f=1)
                max.connectAttr(zd_db+'.distance',zd_sR+'.valueX',f=1)  
                max.connectAttr(zd_sR+'.outValueX',zd_Ramp+'.vCoord',f=1)    
                max.connectAttr(zd_P2dt+'.outUV', zd_Ramp+'.uvCoord',f=1)
                max.connectAttr(zd_P2dt+'.outUvFilterSize',zd_Ramp+'.uvFilterSize',f=1)
                max.removeMultiInstance(zd_Ramp+'.colorEntryList[2]',b=True)  
                max.setAttr(zd_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(zd_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(zd_Ramp+'.interpolation',1)
                max.setAttr(zd_Ramp+'.colorEntryList[1].position',1)
                max.connectAttr(zd_Ramp+'.outColor', myZdMat+'.outColor',f=1)  
                max.setAttr(zd_sR+'.maxX',-1)
                max.setAttr(zd_sR+'.oldMinX',1)
                max.setAttr(zd_sR+'.oldMaxX',1000)
                max.connectAttr( myZdMat+'.camNear', zd_sR+'.oldMinX',f=1)
                max.connectAttr( myZdMat+'.camFar', zd_sR+'.oldMaxX',f=1)
            
                
            #print allShader_mask_TL_02 
            shaderA = max.ls(allShader_mask_TL_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            print selShader            
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    #create new material
                    max.select(selObj)
                    toonlMatName_A = 'ToonL_A_01'
                    toonlMat_A_SG = 'ToonLSG_A_01'
                    toonlName_A = 'toonlnode_A_01'
                    myToonlMat_A = max.shadingNode('lambert',asShader=True, n = toonlMatName_A)
                    myToonlMat_A_SG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=toonlMat_A_SG)
                    max.connectAttr(myToonlMat_A+'.outColor',myToonlMat_A_SG+'.surfaceShader',f=1)
                    max.setAttr(myToonlMat_A+'.diffuse',0)
                    max.setAttr(myToonlMat_A+'.ambientColor',1,1,1,type="double3")
                    ToonLsurflm_A = max.shadingNode('surfaceLuminance',au=1,n='ToonLsurflm_A')
                    ToonLP2dt_A = max.shadingNode('place2dTexture',au=1,n='ToonLP2dt_A')
                    ToonLRamp_A = max.shadingNode('ramp',at=1,n='ToonLRamp_A')
                    max.connectAttr( ToonLP2dt_A+'.outUV', ToonLRamp_A+'.uv',f=1)
                    max.connectAttr( ToonLP2dt_A+'.outUvFilterSize', ToonLRamp_A+'.uvFilterSize',f=1)
                    TLClamp_A = max.shadingNode('clamp',au=1,n='TLClamp_A')
                    max.setAttr(TLClamp_A+'.maxR',1)
                    max.connectAttr(ToonLsurflm_A+'.outValue', TLClamp_A+'.inputR',f=1)
                    max.connectAttr( TLClamp_A+'.outputR', ToonLRamp_A+'.vCoord',f=1)
                    max.removeMultiInstance(ToonLRamp_A+'.colorEntryList[2]',b=True)      
                    max.setAttr(ToonLRamp_A+'.colorEntryList[1].color',1,1,1, type="double3")
                    max.setAttr(ToonLRamp_A+'.colorEntryList[0].color',0,0,0, type="double3")      
                    max.setAttr(ToonLRamp_A+'.interpolation',0)
                    max.setAttr(ToonLRamp_A+'.colorEntryList[1].position',0.2)
                    max.connectAttr( ToonLRamp_A+'.outColor', myToonlMat_A+'.color',f=1)
                    
                    layeredShaderA = max.shadingNode('layeredShader',asShader=True, n = 'arnoldAO_alpha_01')
                    layeredShaderASG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='arnoldAO_alpha_SG_01')
                    max.connectAttr(layeredShaderA+'.outColor',layeredShaderASG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderA+".compositingFlag", 1)
                    max.connectAttr( myToonlMat_A+'.outColor', layeredShaderA+'.inputs[0].color',f=1)                                
                    
                    #get alpha node
                    max.select(u)       
                    transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                    #print transparencyPath
                    if transparencyPath!='':
                        max.connectAttr( transparencyPath, layeredShaderA+'.inputs[0].transparency',f=1)
                    #give material
                    #max.editRenderLayerGlobals(crl=toonlLayer)
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderASG) 
                    SelC = max.pickWalk(d="up")
                    #print SelC      
                    for obj in SelC:
                        max.setAttr(obj+".aiOpaque",0)
                         
                    max.select(cl=True)                              
                    print "arnold AO Done!",
                    
                else:               
                    #getMat
                    #max.editRenderLayerGlobals(crl=toonlLayer)
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = "*"+'_ZDSG_01')
                    max.select(cl=True)             
                    print "arnold AO Done!"
                    
            mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
            max.select(cl=1)              
                
        #get ZdLayer_______________________________________________________________________________________
        ZDLayer = max.ls("*"+"ZDepth"+"*",type='renderLayer')
        if len(ZDLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=ZDLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(ZDLayer[0],selObj,noRecurse=1)
            #filter obj
            allShader_ZD_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_ZD_02.append(shadersMask[0])              
                
            #print allShader_ZD_02 
            shaderA = max.ls(allShader_ZD_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            #print selShader            
            
            if len(max.ls('ZD_A_01','*ZD_A_01','*:*ZD_A_01','*:ZD_A_01',mat=1))==0:
                ZDMatName = 'ZD_A_01'
                ZDMatSG = 'ZD_A_SG_01'
                ZDName = 'ZDnode_A_01'
                myZdMat = max.shadingNode('surfaceShader',asShader=True, n = ZDMatName)
                myZdMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=ZDMatSG)
                max.connectAttr(myZdMat+'.outColor',myZdMatSG+'.surfaceShader',f=1)
                max.addAttr(longName='camNear', attributeType="long",dv=1)
                max.addAttr(longName='camFar', attributeType="long",dv=1000)
                zd_sp = max.shadingNode('samplerInfo',au=1,n='zd_sp_01')
                zd_P2dt = max.shadingNode('place2dTexture',au=1,n='zd_P2dt_01')
                zd_Ramp = max.shadingNode('ramp',at=1,n='zd_Ramp_01')
                zd_sR=max.shadingNode('setRange',n='zd_sr_01',au=1)
                zd_db = max.shadingNode('distanceBetween',au=1,n='zd_db_01')
                max.connectAttr(zd_sp+'.pointCamera', zd_db+'.point1',f=1)
                max.connectAttr(zd_db+'.distance',zd_sR+'.valueX',f=1)  
                max.connectAttr(zd_sR+'.outValueX',zd_Ramp+'.vCoord',f=1)    
                max.connectAttr(zd_P2dt+'.outUV', zd_Ramp+'.uvCoord',f=1)
                max.connectAttr(zd_P2dt+'.outUvFilterSize',zd_Ramp+'.uvFilterSize',f=1)
                max.removeMultiInstance(zd_Ramp+'.colorEntryList[2]',b=True)  
                max.setAttr(zd_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                max.setAttr(zd_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                max.setAttr(zd_Ramp+'.interpolation',1)
                max.setAttr(zd_Ramp+'.colorEntryList[1].position',1)
                max.connectAttr(zd_Ramp+'.outColor', myZdMat+'.outColor',f=1)  
                max.setAttr(zd_sR+'.maxX',-1)
                max.setAttr(zd_sR+'.oldMinX',1)
                max.setAttr(zd_sR+'.oldMaxX',1000)
                max.connectAttr( myZdMat+'.camNear', zd_sR+'.oldMinX',f=1)
                max.connectAttr( myZdMat+'.camFar', zd_sR+'.oldMaxX',f=1)
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    #create new material
                    ZDMatName_A = 'ZD_alpha_01'
                    ZDMat_A_SG = 'ZDSG_alpha_01'
                    ZD_A_Name = 'ZDnode_alpha_01'
                    myZdMatA = max.shadingNode('surfaceShader',asShader=True, n = ZDMatName_A)
                    myZdMatASG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=ZDMat_A_SG)
                    max.connectAttr(myZdMatA+'.outColor',myZdMatASG+'.surfaceShader',f=1)
                    max.addAttr(longName='camNear', attributeType="long",dv=1)
                    max.addAttr(longName='camFar', attributeType="long",dv=1000)
                    zd_A_sp = max.shadingNode('samplerInfo',au=1,n='zd_A_sp_01')
                    zd_A_P2dt = max.shadingNode('place2dTexture',au=1,n='zd_A_P2dt_01')
                    zd_A_Ramp = max.shadingNode('ramp',at=1,n='zd_A_Ramp_01')
                    zd_A_sR=max.shadingNode('setRange',n='zd_A_sR_01',au=1)
                    zd_A_db = max.shadingNode('distanceBetween',au=1,n='zd_A_db_01')
                    max.connectAttr(zd_A_sp+'.pointCamera', zd_A_db+'.point1',f=1)
                    max.connectAttr(zd_A_db+'.distance',zd_A_sR+'.valueX',f=1)  
                    max.connectAttr(zd_A_sR+'.outValueX',zd_A_Ramp+'.vCoord',f=1)    
                    max.connectAttr(zd_A_P2dt+'.outUV', zd_A_Ramp+'.uvCoord',f=1)
                    max.connectAttr(zd_A_P2dt+'.outUvFilterSize',zd_A_Ramp+'.uvFilterSize',f=1)
                    max.removeMultiInstance(zd_A_Ramp+'.colorEntryList[2]',b=True)  
                    max.setAttr(zd_A_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                    max.setAttr(zd_A_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                    max.setAttr(zd_A_Ramp+'.interpolation',1)
                    max.setAttr(zd_A_Ramp+'.colorEntryList[1].position',1)
                    max.connectAttr(zd_A_Ramp+'.outColor', myZdMatA+'.outColor',f=1)  
                    max.setAttr(zd_A_sR+'.maxX',-1)
                    max.setAttr(zd_A_sR+'.oldMinX',1)
                    max.setAttr(zd_A_sR+'.oldMaxX',1000)
                    max.connectAttr(myZdMatA+'.camNear', zd_A_sR+'.oldMinX',f=1)
                    max.connectAttr(myZdMatA+'.camFar', zd_A_sR+'.oldMaxX',f=1)
                    
                    layeredShaderB = max.shadingNode('layeredShader',asShader=True, n = 'Zdepth_alpha_01')
                    layeredShaderBSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Zdepth_alpha_SG_01')
                    max.connectAttr(layeredShaderB+'.outColor',layeredShaderBSG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderB+".compositingFlag", 1)
                    max.connectAttr( myZdMatA+'.outColor', layeredShaderB+'.inputs[0].color',f=1)                               
                    
                    #get alpha node
                    max.connectAttr(transparencyPath ,layeredShaderB+'.inputs[0].transparency',f=1)
                    
                    #give material
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderBSG)
                    max.select(cl=1)
                    
                    #connect
                    Zdmat = max.ls("ZD_shot"+"*","*:ZD_shot"+"*",type="surfaceShader")
                    print myZdMatA
                    #print Zdmat
                    if Zdmat>=1:
                        max.connectAttr (Zdmat[0]+".camFar",myZdMatA+".camFar",f=1)                               
                    
                else:               
                    #getMat
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    max.sets(edit=1,forceElement='ZD_A_SG_01')
                    Zdmat2 = max.ls("ZD_shot"+"*","*:ZD_shot"+"*",type="surfaceShader")
                    print Zdmat2
                    #print Zdmat
                    max.connectAttr (Zdmat2[0]+".camFar","ZD_A_01.camFar",f=1)  
                    max.select(cl=True) 
            
            mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
            max.select(cl=1)
            
        #get FCLayer_______________________________________________________________________________________
        FCLayer = max.ls("*"+"Facing"+"*",type='renderLayer')
        if len(FCLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=FCLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(FCLayer[0],selObj,noRecurse=1)
            #hide obj
            qiObj = max.ls("Plane021","*"+":Plane021",
                             "Plane020","*"+":Plane020",
                             "Plane019","*"+":Plane019",
                             "Plane018","*"+":Plane018",
                             "Plane017","*"+":Plane017",
                             "Plane016","*"+":Plane016",)
            if len(qiObj)==1:
                hideObj = max.select(qiObj) 
                max.HideSelectedObjects(hideObj)                
                max.select(cl=1)
                
            #facingMat
            facingXMatName = 'Facing_X_01'
            facingXMatSG = 'Facing_X_SG_01'
            facingXName = 'facingnode_X_01'
            myFacingXMat = max.shadingNode('lambert',asShader=True, n = facingXMatName)
            myFacingXMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=facingXMatSG)
            max.connectAttr(myFacingXMat+'.outColor',myFacingXMatSG+'.surfaceShader',f=1)
            max.setAttr(myFacingXMat+'.diffuse',0)
            max.setAttr(myFacingXMat+'.ambientColor',1,1,1,type="double3")
            fc_sp = max.shadingNode('samplerInfo',au=1,n='fc_sp_01')
            fc_P2dt = max.shadingNode('place2dTexture',au=1,n='fc_P2dt_01')
            fc_Ramp = max.shadingNode('ramp',at=1,n='fc_Ramp_01')
            max.connectAttr( fc_sp+'.facingRatio', fc_Ramp+'.vCoord',f=1)
            max.connectAttr( fc_P2dt+'.outUV', fc_Ramp+'.uvCoord',f=1)
            max.connectAttr( fc_P2dt+'.outUvFilterSize', fc_Ramp+'.uvFilterSize',f=1)
            max.removeMultiInstance(fc_Ramp+'.colorEntryList[2]',b=True)
            max.setAttr(fc_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
            max.setAttr(fc_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
            max.setAttr(fc_Ramp+'.interpolation',1)
            max.setAttr(fc_Ramp+'.colorEntryList[1].position',0)
            max.setAttr(fc_Ramp+'.colorEntryList[0].position',1)
            max.connectAttr(fc_Ramp+'.outColor', myFacingXMat+'.color',f=1)    
            
            #filter obj
            allShader_FC_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_FC_02.append(shadersMask[0])              
                
            #print allShader_FC_02 
            shaderA = max.ls(allShader_FC_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            #print selShader            
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    #create new material
                    max.select(selObj)
                    facingMatName = 'Facing_A_01'
                    facingMatSG = 'Facing_A_SG_01'
                    facingName = 'facingnode_A_01'
                    myFacing_A_Mat = max.shadingNode('lambert',asShader=True, n = facingMatName)
                    myFacing_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=facingMatSG)
                    max.connectAttr(myFacing_A_Mat+'.outColor',myFacing_A_MatSG+'.surfaceShader',f=1)
                    max.setAttr(myFacing_A_Mat+'.diffuse',0)
                    max.setAttr(myFacing_A_Mat+'.ambientColor',1,1,1,type="double3")
                    fc_sp = max.shadingNode('samplerInfo',au=1,n='fc_sp_01')
                    fc_P2dt = max.shadingNode('place2dTexture',au=1,n='fc_P2dt_01')
                    fc_Ramp = max.shadingNode('ramp',at=1,n='fc_Ramp_01')
                    max.connectAttr( fc_sp+'.facingRatio', fc_Ramp+'.vCoord',f=1)
                    max.connectAttr( fc_P2dt+'.outUV', fc_Ramp+'.uvCoord',f=1)
                    max.connectAttr( fc_P2dt+'.outUvFilterSize', fc_Ramp+'.uvFilterSize',f=1)
                    max.removeMultiInstance(fc_Ramp+'.colorEntryList[2]',b=True)
                    max.setAttr(fc_Ramp+'.colorEntryList[1].color',1,1,1, type="double3")
                    max.setAttr(fc_Ramp+'.colorEntryList[0].color',0,0,0, type="double3")      
                    max.setAttr(fc_Ramp+'.interpolation',1)
                    max.setAttr(fc_Ramp+'.colorEntryList[1].position',0)
                    max.setAttr(fc_Ramp+'.colorEntryList[0].position',1)
                    max.connectAttr(fc_Ramp+'.outColor', myFacing_A_Mat+'.color',f=1) 
                    
                    layeredShaderG = max.shadingNode('layeredShader',asShader=True, n = 'Facing_alpha_01')
                    layeredShaderGSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='Facing_alpha_SG_01')
                    max.connectAttr(layeredShaderG+'.outColor',layeredShaderGSG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderG+".compositingFlag", 1)
                    max.connectAttr( myFacing_A_Mat+'.outColor', layeredShaderG+'.inputs[0].color',f=1)                                
                    
                    #get alpha node
                    max.connectAttr( transparencyPath, layeredShaderG+'.inputs[0].transparency',f=1)
                    
                    #give material
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderGSG)              
                    max.select(cl=True)                                  
                    
                else:               
                    #getMat
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = facingXMatSG)
                    max.select(cl=True)
           
            mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')  
            max.select(cl=1)
            #removeSky()
               
        #get NRLayer_______________________________________________________________________________________
        NRLayer = max.ls("*"+"Normal"+"*",type='renderLayer')
        if len(NRLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=NRLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(NRLayer[0],selObj,noRecurse=1)
            
            #normalMat
            normalXMatName = 'Normal_X_01'
            normalXMatSG = 'NormalSG_X_01'
            normalXName = 'normalnode_X_01'
            mynormalXMat = max.shadingNode('surfaceShader',asShader=True, n = normalXMatName)
            mynormalXMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=normalXMatSG)
            max.connectAttr(mynormalXMat+'.outColor', mynormalXMatSG+'.surfaceShader',f=1)
            normalMibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n='nOcc_X_01')
            gammaName = "gammaCorrect_normal"
            myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
            max.setAttr (myGamma+".gammaX" ,0.45)
            max.setAttr (myGamma+".gammaY" ,0.45)
            max.setAttr (myGamma+".gammaZ" ,0.45)
            max.connectAttr(normalMibOcclusion+'.outValue',myGamma+'.value')
            max.connectAttr(myGamma+".outValue", mynormalXMat+'.outColor')
            max.setAttr(normalMibOcclusion+'.samples',32)
            max.setAttr(normalMibOcclusion+'.output_mode',3)                
            
            #filter obj
            allShader_NR_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_NR_02.append(shadersMask[0])              
                
            #print allShader_NR_02 
            shaderA = max.ls(allShader_NR_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            #print selShader            
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    #create new material
                    normalMatName = 'Normal_A_01'
                    normalMatSG = 'NormalSG_A_01'
                    normalName = 'normalnode_A_01'
                    mynormalMat_A = max.shadingNode('surfaceShader',asShader=True, n = normalMatName)
                    mynormalMat_A_SG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=normalMatSG)
                    max.connectAttr(mynormalMat_A+'.outColor', mynormalMat_A_SG+'.surfaceShader',f=1)
                    normalMibOcclusion = max.shadingNode('mib_amb_occlusion',at=1,n='nOcc_A_01')
                    gammaName = "gammaCorrect_normal"
                    myGamma = max.shadingNode('gammaCorrect',asUtility=True, n = gammaName)        
                    max.setAttr (myGamma+".gammaX" ,0.45)
                    max.setAttr (myGamma+".gammaY" ,0.45)
                    max.setAttr (myGamma+".gammaZ" ,0.45)
                    max.connectAttr(normalMibOcclusion+'.outValue',myGamma+'.value')
                    max.connectAttr(myGamma+".outValue", mynormalMat_A+'.outColor')
                    max.setAttr(normalMibOcclusion+'.samples',32)
                    max.setAttr(normalMibOcclusion+'.output_mode',3) 
                    
                    layeredShaderF = max.shadingNode('layeredShader',asShader=True, n = 'normal_alpha_01')
                    layeredShaderFSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='normal_alpha_SG_01')
                    max.connectAttr(layeredShaderF+'.outColor',layeredShaderFSG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderF+".compositingFlag", 1)
                    max.connectAttr( mynormalMat_A+'.outColor', layeredShaderF+'.inputs[0].color',f=1)                                
                    
                    #get alpha node
                    max.connectAttr( transparencyPath, layeredShaderF+'.inputs[0].transparency',f=1)
                    
                    #give material
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderFSG)              
                    max.select(cl=True)                                  
                    
                else:               
                    #getMat
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = 'NormalSG_X_01')
                    max.select(cl=True)     
                    
        #get SDLayer_______________________________________________________________________________________
        SDLayer = max.ls("*"+"Shadow"+"*",type='renderLayer')
        if len(SDLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=SDLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(SDLayer[0],selObj,noRecurse=1)
            
            #SDMat
            SDxMatName = 'Shadow_X_01'
            SDxMatSG = 'ShadowSG_X_01'
            SDxName = 'SDnode_X_01'
            mySDxMat = max.shadingNode('rampShader',asShader=True, n = SDxMatName)
            mySDxMatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SDxMatSG)
            max.connectAttr(mySDxMat+'.outColor', mySDxMatSG+'.surfaceShader',f=1)
            max.setAttr(mySDxMat+'.color[0].color_Color',0,0,0,type="double3")
            max.setAttr(mySDxMat+'.color[0].color_Interp',2)
            max.setAttr(mySDxMat+'.color[1].color_Position',1)
            max.setAttr(mySDxMat+'.color[1].color_Color',1,1,1,type="double3")
            max.setAttr(mySDxMat+'.color[1].color_Interp',2)
            max.setAttr(mySDxMat+'.diffuse',0)
            max.setAttr(mySDxMat+'.translucence',1)
            max.setAttr(mySDxMat+'.translucenceDepth',1000)
            max.setAttr(mySDxMat+'.specularity',0)
            max.setAttr(mySDxMat+'.eccentricity',0)
            max.setAttr(mySDxMat+'.reflectivity[0].reflectivity_Position',0)
            max.setAttr(mySDxMat+'.reflectivity[0].reflectivity_FloatValue',0)                        
            
            #filter obj
            allShader_SD_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_SD_02.append(shadersMask[0])              
                
            #print allShader_SD_02 
            shaderA = max.ls(allShader_SD_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            #print selShader            
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    #create new material
                    SDMatName = 'Shadow_A_01'
                    SDMatSG = 'ShadowSG_A_01'
                    SDName = 'SDnode_A_01'
                    mySD_A_Mat = max.shadingNode('rampShader',asShader=True, n = SDMatName)
                    mySD_A_MatSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=SDMatSG)
                    max.connectAttr(mySD_A_Mat+'.outColor', mySD_A_MatSG+'.surfaceShader',f=1)
                    max.setAttr(mySD_A_Mat+'.color[0].color_Color',0,0,0,type="double3")
                    max.setAttr(mySD_A_Mat+'.color[0].color_Interp',2)
                    max.setAttr(mySD_A_Mat+'.color[1].color_Position',1)
                    max.setAttr(mySD_A_Mat+'.color[1].color_Color',1,1,1,type="double3")
                    max.setAttr(mySD_A_Mat+'.color[1].color_Interp',2)
                    max.setAttr(mySD_A_Mat+'.diffuse',0)
                    max.setAttr(mySD_A_Mat+'.translucence',1)
                    max.setAttr(mySD_A_Mat+'.translucenceDepth',1000)
                    max.setAttr(mySD_A_Mat+'.specularity',0)
                    max.setAttr(mySD_A_Mat+'.eccentricity',0)
                    max.setAttr(mySD_A_Mat+'.reflectivity[0].reflectivity_Position',0)
                    max.setAttr(mySD_A_Mat+'.reflectivity[0].reflectivity_FloatValue',0) 
                    
                    layeredShaderE = max.shadingNode('layeredShader',asShader=True, n = 'SD_alpha_01')
                    layeredShaderESG = max.sets(renderable=True,noSurfaceShader=True,em=True,n='SD_alpha_SG_01')
                    max.connectAttr(layeredShaderE+'.outColor',layeredShaderESG+'.surfaceShader',f=1)
                    max.setAttr (layeredShaderE+".compositingFlag", 1)
                    max.connectAttr( mySD_A_Mat+'.outColor', layeredShaderE+'.inputs[0].color',f=1)                                
                    
                    #get alpha node
                    max.connectAttr( transparencyPath, layeredShaderE+'.inputs[0].transparency',f=1)
                    
                    #give material
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = layeredShaderESG)              
                    max.select(cl=True)                                  
                    
                else:               
                    #getMat
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = 'ShadowSG_X_01')
                    max.select(cl=True) 
                    
        #get lineLayer_______________________________________________________________________________________
        lineLayer = max.ls("*"+"Line"+"*",type='renderLayer')
        if len(lineLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=lineLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(lineLayer[0],selObj,noRecurse=1)
            
            #hide obj
            qiObj = max.ls("Plane021","*"+":Plane021",
                             "Plane020","*"+":Plane020",
                             "Plane019","*"+":Plane019",
                             "Plane018","*"+":Plane018",
                             "Plane017","*"+":Plane017",
                             "Plane016","*"+":Plane016",)
            if len(qiObj)==1:
                hideObj = max.select(qiObj) 
                max.HideSelectedObjects(hideObj)                
                max.select(cl=1)
         
            #filter obj
            allShader_Line_02 =[]        
            for selC in selObj:
                #print selC
                geo = max.ls(selC,s=1,o=1,dag=1)
                #print geo
                shadingGrps= max.listConnections(geo[0],type="shadingEngine")
                #print shadingGrps[0]
                sdg = max.listConnections(shadingGrps[0])
                #print sdg
                shadersMask =max.ls(sdg,materials=1)   
                #print shadersMask[0]  
                allShader_Line_02.append(shadersMask[0])              
                
            #print allShader_Line_02 
            shaderA = max.ls(allShader_Line_02)
            shaderB = max.select(shaderA)
            shaderC= max.ls(sl=1)
            selShader = max.ls(shaderC,type="phong" and "lambert" ) 
            #print selShader            
                    
            for u in selShader:         
                transparencyPath = max.connectionInfo(u+'.transparency',sfd=True)
                #print u
                #print transparencyPath  
                if transparencyPath!='':
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects=u)
                    SelG = max.ls(sl=1)
                    #print SelG
                    for l in SelG:
                        max.setAttr(l+".primaryVisibility",0)
                   
                else:               
                    #getMat
                    max.select(cl=True)
                    max.select(u)
                    SelA = max.hyperShade( objects='')
                    maSel=max.sets(edit=1,forceElement = 'shot_*_lineSG_*')
                    max.select(cl=True)                     
                    
        #get DFLayer_______________________________________________________________________________________
        DFLayer = max.ls("*"+"DiffMat"+"*",type='renderLayer')
        if len(DFLayer)==True: 
            #select layer to edit 
            max.editRenderLayerGlobals(crl=DFLayer[0])
            #take selObj in layer 
            max.select(selObj)
            max.editRenderLayerMembers(DFLayer[0],selObj,noRecurse=1)                    
                     
    print "APTL is complete!",
    
def TimeOffWindows(*arg):
    global TimeOffWindow
    TimeOffWindow = max.window(t='Planning shutdown',mnb =False ,mxb = False,sizeable =0)
    mainLayout=max.columnLayout(w=350,h=300)
    max.rowColumnLayout( numberOfRows=1 )
    max.frameLayout( label='Shutdown after time for your value',w=240 )
    max.columnLayout(cat=["left",-70])
    max.intFieldGrp( "day", label=' Day:    ', value1=0,)
    max.intFieldGrp( "hour", label=' Hour:    ', value1=0,)
    max.intFieldGrp( "minutes", label=' Minutes:    ', value1=10,)
    max.setParent("..")
    max.rowColumnLayout( numberOfRows=2 ,w=230)
    max.button(l='Cancel the plan',w=200,command = offShutDown )
    max.rowColumnLayout( numberOfRows=1 )
    wt=max.button('winTime',l='OK',w=118,command = shutDown )
    max.button(l='Cancel',w=118,command=('max.deleteUI(TimeOffWindow,window=True)'))
    max.setParent("..")
    max.setParent("..")
    max.setParent("..")
    max.showWindow(TimeOffWindow) 

def arnoldfalloff(*arg):
    matSel = max.ls(sl=1,mat=1)
    if len(matSel)==0:
        max.confirmDialog (t ="Prompt", m= "Please select a material!" ,b='OK')
        print ('Please select a material!'), 
    else:   
        for i in matSel:
            max.setAttr(i+".falloff",0.05)  
             
def twoDtransformbump(*arg):
    transLam = []
    objSelect = max.ls(sl=1)
    if len(objSelect)==0:
        max.confirmDialog (t ="Prompt", m= "Please select a geometry!" ,b='OK')
        print ('Please select a geometry!'), 
    else:  
        for q in objSelect:
            Geometry = max.ls(q,s=1,o=1,dag=1)
            #print Geometry
            shadingGrps= max.listConnections(Geometry[0],type="shadingEngine")
            #print shadingGrps[0]
            sdg = max.listConnections(shadingGrps[0])
            #print sdg
            shadersMask =max.ls(sdg,materials=1)   
            #print shadersMask[0]  
            transLam.append(shadersMask[0]) 
        print  transLam   
        
        for u in transLam:
            print (u)
            max.setAttr(u+".diffuse",0.8)
            nFile =max.listConnections(u,type="file")
            print nFile
            if nFile > 0:
                luminanceNode = max.shadingNode('luminance',asUtility=True, n = "luminance_01")
                bump2d = max.shadingNode('bump2d',asUtility=True, n = "bump2d_01")
                max.connectAttr( nFile[0]+".outColor",luminanceNode+".value",f=1)
                
                max.connectAttr( luminanceNode + ".outValue",bump2d + '.bumpValue',f=1)
                max.connectAttr( bump2d + ".outNormal",u + '.normalCamera',f=1)
                max.setAttr(bump2d+".bumpDepth",0.03)
        print "Material is done!" 


def cheakFaceModle(*arg):
    cheakFace = []
    noFace = []
    cheakModel = max.ls(sl=1)
    for cheakA in cheakModel:
        #print cheakA
        cheakB = max.ls(cheakA,s=1,o=1,dag=1)
        #print cheakB
        shadingGrps= max.listConnections(cheakB[0],type="shadingEngine")
        #print shadingGrps  
        
        if shadingGrps == None:    
            print ">>>>>   %s   <<<<< do not have a meterial"%cheakA
            noFace.append(cheakA)
            
        elif len(shadingGrps) > 1:
            print "multimaterial modle is >>>>>   %s  <<<<<"%cheakA
            cheakFace.append(cheakA)        
     
    if  len(noFace) > 0:
        selNo_A = max.ls('noMaterial',type="objectSet")
        if len(selNo_A) == 0 :  
            max.select(noFace) 
            createSetResultB = max.sets (name = "noMaterial")
            max.select(cl=1)
        else:
            max.select(selNo_A)    
    if  len(cheakFace) > 0: 
        selF_A = max.ls('cheakModleFace_multimaterial',type="objectSet")
        if len(selF_A) == 0:    
            max.select(cheakFace)
            createSetResultA = max.sets (name = "cheakModleFace_multimaterial")
            max.select(cl=1)    
            max.select(cheakFace) 
        else:
            max.select(cheakFace)    
    print "Cheak finish!",    

def fixColor(*arg):
    selMat = max.ls(sl=1,mat=1,s=1,o=1,dag=1)
    print selMat
    if selMat == 0:
        max.confirmDialog (t ="Prompt", m= "Please selcet a object!" ,b='OK')
    else:
        max.colorEditor()
        if max.colorEditor(query=True, result=True):
            RGB_values = max.colorEditor(query=True, rgb=True)
            HSV_values = max.colorEditor(query=True, hsv=True)
            alpha = max.colorEditor(query=True, alpha=True)
        else:
            print 'Editor was dismissed'    
        
        for sel in selMat:
            sufaceShader = max.listConnections(sel,type="surfaceShader")
            print sufaceShader
            GM = sufaceShader = max.listConnections(sufaceShader[0],type="gammaCorrect")
            print GM
            max.setAttr(GM[0]+".value",RGB_values[0],RGB_values[1],RGB_values[2],type = 'double3')


def shutDown(*arg):    
    Dv = max.intFieldGrp( "day",q=1,v=1)
    Hv = max.intFieldGrp( "hour",q=1,v=1)
    Mv = max.intFieldGrp( "minutes",q=1,v=1)
    
    Dt = Dv[0]*3600*24 
    Ht = Hv[0]*3600  
    Mt = Mv[0]*60
    
    allTIME =  Dt+Ht+Mt  
    print allTIME 
    time =  'shutdown -s -t %s'%allTIME
    print time
    command = str(time)
    os.system(command) 


def offShutDown(*arg):
    command ='shutdown -a'
    os.system(command) 


def sequenceFile(*arg):
    obj = max.ls(sl=1) 
    print obj
    
    refFiles = max.fileDialog2 (fm=4,cap="Select some textures to create layertexture of color",dialogStyle=2,okc="Select")
    if len(refFiles) == 0:
        max.warning (l="No image to create")
    else:
        print refFiles 
         
        for i in refFiles:
            print i            
            secensName1 = i.split("/")
            print secensName1[-1]
            secensName2 = secensName1[-1].split(".")
            print secensName2[0]
            name = secensName2[0]                
            P2dtName = "P2dt_"+name
            print P2dtName
            secensName3 = secensName2[0].split("_") 
            print secensName3
            fileFrame = secensName3[-2] 
            print fileFrame            
    
            if max.intFieldGrp('RDM',q=1,en=1)==1:
                randomNum = max.intFieldGrp('RDM',q=1,v=1)
                print randomNum
                for h in range(randomNum[0]): 
                    print h
                    randomNumA = h+1
                    print randomNumA  
                    
                    mpSgName = secensName2[0]+"_"+str(randomNumA)+'_mp_SG'
                    mpName = secensName2[0]+"_"+str(randomNumA)
                    mpLtName = secensName2[0]+"_"+str(randomNumA)+'_LT'
                    mpMovName = secensName2[0]+"_"+str(randomNumA)+'_MOV'
                    mpExName = secensName2[0]+"_"+str(randomNumA)+"_EX"
                    mpTimeName = secensName2[0]+"_"+str(randomNumA)+"_Time"
                                 
                    myMP = max.shadingNode('lambert',asShader=True, n = mpName)
                    myMPSG = max.sets(renderable=True,noSurfaceShader=True,em=True,n=mpSgName)
                    max.connectAttr(myMP+'.color',myMPSG+'.surfaceShader')
                    max.setAttr(myMP + ".diffuse" ,0)
                    max.setAttr( myMP + ".ambientColor",1,1,1,type = 'double3')
    
                    if max.iconTextCheckBox('fileNode', q=1,v=1)==1: #select file 
                        mpFl = max.shadingNode('file',asTexture=1,n=mpLtName)
                        P2dt = max.shadingNode('place2dTexture',au=1,n=mpLtName+'P2dt')
                        max.connectAttr( P2dt+'.outUV', mpFl+'.uvCoord',f=1)
                        max.connectAttr( P2dt+'.coverage', mpFl+'.coverage',f=1)
                        max.connectAttr( P2dt+'.outUvFilterSize', mpFl+'.uvFilterSize',f=1)
                        max.connectAttr( P2dt+'.vertexCameraOne', mpFl+'.vertexCameraOne',f=1)
                        max.connectAttr( P2dt+'.vertexUvThree', mpFl+'.vertexUvThree',f=1)
                        max.connectAttr( P2dt+'.vertexUvTwo', mpFl+'.vertexUvTwo',f=1)
                        max.connectAttr( P2dt+'.vertexUvOne', mpFl+'.vertexUvOne',f=1)
                        max.connectAttr( P2dt+'.noiseUV', mpFl+'.noiseUV',f=1)
                        max.connectAttr( P2dt+'.rotateUV', mpFl+'.rotateUV',f=1)
                        max.connectAttr( P2dt+'.offset', mpFl+'.offset',f=1)
                        max.connectAttr( P2dt+'.repeatUV', mpFl+'.repeatUV',f=1)
                        max.connectAttr( P2dt+'.wrapV', mpFl+'.wrapV',f=1)
                        max.connectAttr( P2dt+'.wrapU', mpFl+'.wrapU',f=1)
                        max.connectAttr( P2dt+'.stagger', mpFl+'.stagger',f=1)
                        max.connectAttr( P2dt+'.mirrorV', mpFl+'.mirrorV',f=1)
                        max.connectAttr( P2dt+'.mirrorU', mpFl+'.mirrorU',f=1)
                        max.connectAttr( P2dt+'.rotateFrame', mpFl+'.rotateFrame',f=1)
                        max.connectAttr( P2dt+'.translateFrame', mpFl+'.translateFrame',f=1)
                        max.connectAttr( mpFl+'.outColor', myMP+'.color',f=1)
                        max.connectAttr( mpFl+'.outTransparency', myMP+'.transparency',f=1)
                        #max.connectAttr( mpFl+'.outColor', myMP+'.outMatteOpacity',f=1)
                        max.setAttr(mpFl+".filterType" ,0)
                        max.setAttr (mpFl+'.fileTextureName',i,type = "string")
                        
                        if max.checkBox ('UIS',q=1,v=1)==1:#Sequence
                            max.setAttr(mpFl+".useFrameExtension",1)
                            myMpEx = max.shadingNode('expression',asShader=True, n = mpExName)
                            myMpTime = max.shadingNode('time',asShader=True, n = mpExName)
                            max.connectAttr(myMpTime+'.outTime',myMpEx+'.time')
                            max.connectAttr(myMpEx+'.output[0]',mpFl+'.frameExtension')
                            
                            if max.checkBox ('UR',q=1,v=1)==1:#Return 
                                timeEcho1 = int(max.intFieldGrp('TE',q=1,v1=1))
                                print timeEcho1
                                timeEcho2 = int(max.intFieldGrp('TE',q=1,v2=1))
                                print timeEcho2
                                timeEcho = int(random.uniform(int(timeEcho1),int(timeEcho2)))
                                print timeEcho
                                startTime = int(max.intFieldGrp('ST',q=1, value1=1))
                                print startTime   
                                print mpFl
                                print fileFrame           
                                mel.eval('expressionEditor EE mpFl "frameExtension";')
                                max.expression(myMpEx, e = 1, s = "%s.frameExtension=(frame-%s)%%%s+%s;" %(mpFl, timeEcho ,fileFrame ,startTime),o = "",ae = 1, uc = all)                        
                                
                                if max.intFieldGrp('UVR',q=1,en=1)==1:#UvRotate
                                    UvRotate = int(max.intFieldGrp('UVR',q=1, value1=1))
                                    print UvRotate
                                    max.setAttr(P2dt+".rotateUV", int(UvRotate))
                                       
                    if max.iconTextCheckBox('moveNode', q=1,v=1)==1: #select move
                        mpMove = max.shadingNode('movie',asTexture=True, n = mpMovName)
                        MP2dt = max.shadingNode('place2dTexture',au=1,n=mpMovName+'P2dt')
                        max.connectAttr( MP2dt+'.outUV', mpMove+'.uvCoord',f=1)
                        max.connectAttr( MP2dt+'.outUvFilterSize', mpMove+'.uvFilterSize',f=1)
                        max.connectAttr( mpMove+'.outColor', myMP+'.color',f=1)
                        max.connectAttr( mpMove+'.outTransparency', myMP+'.transparency',f=1)
                        #max.connectAttr( mpMove+'.outColor', myMP+'.outMatteOpacity',f=1)
                        max.setAttr(mpMove+".filterType" ,0)
                        max.setAttr (mpMove+'.fileTextureName',i,type = "string")
                        
                        if max.checkBox ('UMS',q=1,v=1)==1:#Sequence
                            max.setAttr(mpMove+".useFrameExtension",1)
                            myMpEx = max.shadingNode('expression',asShader=True, n = mpExName)
                            myMpTime = max.shadingNode('time',asShader=True, n = mpExName)
                            max.connectAttr(myMpTime+'.outTime',myMpEx+'.time')
                            max.connectAttr(myMpEx+'.output[0]',mpMove+'.frameExtension')
                            
                            if max.checkBox ('UR',q=1,v=1)==1:#Return  
                                timeEcho1 = int(max.intFieldGrp('TE',q=1,v1=1))
                                print timeEcho1
                                timeEcho2 = int(max.intFieldGrp('TE',q=1,v2=1))
                                print timeEcho2
                                timeEcho = int(random.uniform(int(timeEcho1),int(timeEcho2)))
                                print timeEcho
                                startTime = int(max.intFieldGrp('ST',q=1, value1=1))
                                print startTime 
                                print fileFrame  
                                print '(frame-%s)%% %s + %s' %(timeEcho ,fileFrame ,startTime)    
                                mel.eval('expressionEditor EE mpMove "frameExtension";')
                                max.expression(myMpEx, e = 1, s = "%s.frameExtension=(frame-%s)%%%s+%s;" %(mpMove, timeEcho ,fileFrame ,startTime),o = "",ae = 1, uc = all)  
                                
                                if max.intFieldGrp('UVR',q=1,en=1)==1:#UvRotate
                                    UvRotate = int(max.intFieldGrp('UVR',q=1, value1=1))
                                    print UvRotate
                                    max.setAttr(MP2dt+".rotateUV", int(UvRotate))      
    
        mat = max.ls("*_mp_SG",type = "shadingEngine")
        print mat
        numA = len(mat)
            
        for i in obj:
            max.select(i)
            numB = random.uniform(int(0),int(numA))
            numC = int(numB)
            print numC
            max.sets(edit=1,forceElement=mat[numC])
            max.hyperShade(assign=mat[numC])
            max.select(cl=True)
        #max.select(obj)
        mel.eval('EEcloseCB;')

def indirectLighting(*arg):
    prhName = 'ProductionRapidHair'
    ProductionRapidHair = max.shadingNode('mentalrayOptions',at=1,n=prhName)
    max.setAttr ("ProductionRapidHair.rayTracing",0)
    max.setAttr ("ProductionRapidHair.scanline",3)
    max.setAttr ("ProductionRapidHair.rapidSamplesCollect",6)
    max.setAttr ("ProductionRapidHair.rapidSamplesMotion",1)
    max.setAttr ("ProductionRapidHair.rapidSamplesShading",1)
    max.setAttr ("ProductionRapidHair.faces",2)
    max.setAttr ("ProductionRapidHair.shadowMethod",3)
    max.setAttr ("ProductionRapidHair.shadowMaps",3)
    max.setAttr ("ProductionRapidHair.biasShadowMaps",0.02)
    max.setAttr ("ProductionRapidHair.traceShadowMaps",0)
    max.setAttr ("ProductionRapidHair.windowShadowMaps",0)
    max.setAttr ("ProductionRapidHair.motionBlurShadowMaps",0)
    max.setAttr ("ProductionRapidHair.rebuildShadowMaps",1)
    max.setAttr ("ProductionRapidHair.motionBlur",0)
    max.setAttr ("ProductionRapidHair.contrastR",0.04)
    max.setAttr ("ProductionRapidHair.contrastG",0.03)
    max.setAttr ("ProductionRapidHair.contrastB",0.07)
    max.setAttr ("ProductionRapidHair.contrastA",0.10)
    max.setAttr ("ProductionRapidHair.minSamples",0)
    max.setAttr ("ProductionRapidHair.maxSamples",2)
    max.setAttr ("ProductionRapidHair.sampleLock",1)
    max.setAttr ("ProductionRapidHair.jitter",1)
    max.setAttr ("ProductionRapidHair.filter",1)
    max.setAttr ("ProductionRapidHair.filterWidth",1.145)
    max.setAttr ("ProductionRapidHair.filterHeight",1.145)
    max.setAttr ("ProductionRapidHair.minObjectSamples",-128)
    max.setAttr ("ProductionRapidHair.maxObjectSamples",127)
    max.setAttr ("ProductionRapidHair.volumeSamples",1)
   
    prfName = 'ProductionRapidFur'
    ProductionRapidFur = max.shadingNode('mentalrayOptions',at=1,n=prfName)
    max.setAttr ("ProductionRapidFur.rayTracing",0)
    max.setAttr ("ProductionRapidFur.scanline",3)
    max.setAttr ("ProductionRapidFur.rapidSamplesCollect",3)
    max.setAttr ("ProductionRapidFur.rapidSamplesMotion",1)
    max.setAttr ("ProductionRapidFur.rapidSamplesShading",0.25)
    max.setAttr ("ProductionRapidFur.faces",2)
    max.setAttr ("ProductionRapidFur.shadowMethod",3)
    max.setAttr ("ProductionRapidFur.shadowMaps",3)
    max.setAttr ("ProductionRapidFur.biasShadowMaps",0.02)
    max.setAttr ("ProductionRapidFur.traceShadowMaps",0)
    max.setAttr ("ProductionRapidFur.windowShadowMaps",0)
    max.setAttr ("ProductionRapidFur.motionBlurShadowMaps",0)
    max.setAttr ("ProductionRapidFur.rebuildShadowMaps",1)
    max.setAttr ("ProductionRapidFur.motionBlur",0)
    max.setAttr ("ProductionRapidFur.contrastR",0.04)
    max.setAttr ("ProductionRapidFur.contrastG",0.03)
    max.setAttr ("ProductionRapidFur.contrastB",0.07)
    max.setAttr ("ProductionRapidFur.contrastA",0.10)
    max.setAttr ("ProductionRapidFur.minSamples",0)
    max.setAttr ("ProductionRapidFur.maxSamples",2)
    max.setAttr ("ProductionRapidFur.sampleLock",1)
    max.setAttr ("ProductionRapidFur.jitter",1)
    max.setAttr ("ProductionRapidFur.filter",1)
    max.setAttr ("ProductionRapidFur.filterWidth",1.145)
    max.setAttr ("ProductionRapidFur.filterHeight",1.145)
    max.setAttr ("ProductionRapidFur.minObjectSamples",-128)
    max.setAttr ("ProductionRapidFur.maxObjectSamples",127)
    max.setAttr ("ProductionRapidFur.volumeSamples",1)
   
    pftName = 'ProductionFineTrace'
    ProductionFineTrace = max.shadingNode('mentalrayOptions',at=1,n=pftName)
    max.setAttr ("ProductionFineTrace.rayTracing",1)
    max.setAttr ("ProductionFineTrace.maxReflectionRays",1)
    max.setAttr ("ProductionFineTrace.maxRefractionRays",1)
    max.setAttr ("ProductionFineTrace.maxRayDepth",1)
    max.setAttr ("ProductionFineTrace.maxShadowRayDepth",2)
    max.setAttr ("ProductionFineTrace.scanline",0)
    max.setAttr ("ProductionFineTrace.faces",2)
    max.setAttr ("ProductionFineTrace.shadowMethod",1)
    max.setAttr ("ProductionFineTrace.shadowMaps",1)
    max.setAttr ("ProductionFineTrace.biasShadowMaps",0)
    max.setAttr ("ProductionFineTrace.traceShadowMaps",0)
    max.setAttr ("ProductionFineTrace.windowShadowMaps",0)
    max.setAttr ("ProductionFineTrace.motionBlurShadowMaps",0)
    max.setAttr ("ProductionFineTrace.rebuildShadowMaps",1)
    max.setAttr ("ProductionFineTrace.motionBlur",0)
    max.setAttr ("ProductionFineTrace.contrastR",0.02)
    max.setAttr ("ProductionFineTrace.contrastG",0.02)
    max.setAttr ("ProductionFineTrace.contrastB",0.02)
    max.setAttr ("ProductionFineTrace.contrastA",0.10)
    max.setAttr ("ProductionFineTrace.minSamples",1)
    max.setAttr ("ProductionFineTrace.maxSamples",2)
    max.setAttr ("ProductionFineTrace.sampleLock",1)
    max.setAttr ("ProductionFineTrace.jitter",1)
    max.setAttr ("ProductionFineTrace.filter",1)
    max.setAttr ("ProductionFineTrace.filterWidth",0.75)
    max.setAttr ("ProductionFineTrace.filterHeight",0.75)
    max.setAttr ("ProductionFineTrace.minObjectSamples",-128)
    max.setAttr ("ProductionFineTrace.maxObjectSamples",127)
    max.setAttr ("ProductionFineTrace.volumeSamples",1)
   
    prmName = 'ProductionRapidMotion'
    ProductionRapidMotion = max.shadingNode('mentalrayOptions',at=1,n=prmName)
    max.setAttr ("ProductionRapidMotion.rayTracing",1)
    max.setAttr ("ProductionRapidMotion.maxReflectionRays",10)
    max.setAttr ("ProductionRapidMotion.maxRefractionRays",10)
    max.setAttr ("ProductionRapidMotion.maxRayDepth",20)
    max.setAttr ("ProductionRapidMotion.maxShadowRayDepth",2)
    max.setAttr ("ProductionRapidMotion.scanline",3)
    max.setAttr ("ProductionRapidMotion.rapidSamplesCollect",8)
    max.setAttr ("ProductionRapidMotion.rapidSamplesMotion",1)
    max.setAttr ("ProductionRapidMotion.rapidSamplesShading",2)
    max.setAttr ("ProductionRapidMotion.faces",2)
    max.setAttr ("ProductionRapidMotion.shadowMethod",1)
    max.setAttr ("ProductionRapidMotion.shadowMaps",1)
    max.setAttr ("ProductionRapidMotion.biasShadowMaps",0)
    max.setAttr ("ProductionRapidMotion.traceShadowMaps",0)
    max.setAttr ("ProductionRapidMotion.windowShadowMaps",0)
    max.setAttr ("ProductionRapidMotion.motionBlurShadowMaps",1)
    max.setAttr ("ProductionRapidMotion.rebuildShadowMaps",1)
    max.setAttr ("ProductionRapidMotion.motionBlur",2)
    max.setAttr ("ProductionRapidMotion.motionBlurBy",2)
    max.setAttr ("ProductionRapidMotion.shutter",2)
    max.setAttr ("ProductionRapidMotion.shutterDelay",2)
    max.setAttr ("ProductionRapidMotion.timeContrastR",0.2)
    max.setAttr ("ProductionRapidMotion.timeContrastG",0.2)
    max.setAttr ("ProductionRapidMotion.timeContrastB",0.2)
    max.setAttr ("ProductionRapidMotion.timeContrastA",0.2)
    max.setAttr ("ProductionRapidMotion.motionSteps",1)
    max.setAttr ("ProductionRapidMotion.contrastR",0.1)
    max.setAttr ("ProductionRapidMotion.contrastG",0.1)
    max.setAttr ("ProductionRapidMotion.contrastB",0.1)
    max.setAttr ("ProductionRapidMotion.contrastA",0.10)
    max.setAttr ("ProductionRapidMotion.minSamples",0)
    max.setAttr ("ProductionRapidMotion.maxSamples",2)
    max.setAttr ("ProductionRapidMotion.sampleLock",1)
    max.setAttr ("ProductionRapidMotion.jitter",0)
    max.setAttr ("ProductionRapidMotion.filter",3)
    max.setAttr ("ProductionRapidMotion.filterWidth",1)
    max.setAttr ("ProductionRapidMotion.filterHeight",1)
    max.setAttr ("ProductionRapidMotion.minObjectSamples",-128)
    max.setAttr ("ProductionRapidMotion.maxObjectSamples",127)
    max.setAttr ("ProductionRapidMotion.volumeSamples",1)
   
    pmbName = 'ProductionMotionblur'
    ProductionMotionblur = max.shadingNode('mentalrayOptions',at=1,n=pmbName)
    max.setAttr ("ProductionMotionblur.rayTracing",1)
    max.setAttr ("ProductionMotionblur.maxReflectionRays",10)
    max.setAttr ("ProductionMotionblur.maxRefractionRays",10)
    max.setAttr ("ProductionMotionblur.maxRayDepth",20)
    max.setAttr ("ProductionMotionblur.maxShadowRayDepth",2)
    max.setAttr ("ProductionMotionblur.scanline",0)
   
    max.setAttr ("ProductionMotionblur.faces",2)
    max.setAttr ("ProductionMotionblur.shadowMethod",1)
    max.setAttr ("ProductionMotionblur.shadowMaps",1)
    max.setAttr ("ProductionMotionblur.biasShadowMaps",0)
    max.setAttr ("ProductionMotionblur.traceShadowMaps",0)
    max.setAttr ("ProductionMotionblur.windowShadowMaps",0)
    max.setAttr ("ProductionMotionblur.motionBlurShadowMaps",1)
    max.setAttr ("ProductionMotionblur.rebuildShadowMaps",1)
   
    max.setAttr ("ProductionMotionblur.motionBlur",2)
    max.setAttr ("ProductionMotionblur.motionBlurBy",1)
    max.setAttr ("ProductionMotionblur.shutter",1)
    max.setAttr ("ProductionMotionblur.shutterDelay",0)
    max.setAttr ("ProductionMotionblur.timeContrastR",0.2)
    max.setAttr ("ProductionMotionblur.timeContrastG",0.2)
    max.setAttr ("ProductionMotionblur.timeContrastB",0.2)
    max.setAttr ("ProductionMotionblur.timeContrastA",0.2)
    max.setAttr ("ProductionMotionblur.motionSteps",1)
   
    max.setAttr ("ProductionMotionblur.contrastR",0.1)
    max.setAttr ("ProductionMotionblur.contrastG",0.1)
    max.setAttr ("ProductionMotionblur.contrastB",0.1)
    max.setAttr ("ProductionMotionblur.contrastA",0.10)
    max.setAttr ("ProductionMotionblur.minSamples",0)
    max.setAttr ("ProductionMotionblur.maxSamples",2)
    max.setAttr ("ProductionMotionblur.sampleLock",1)
    max.setAttr ("ProductionMotionblur.jitter",0)
    max.setAttr ("ProductionMotionblur.filter",3)
    max.setAttr ("ProductionMotionblur.filterWidth",1)
    max.setAttr ("ProductionMotionblur.filterHeight",1)
   
    max.setAttr ("ProductionMotionblur.minObjectSamples",-128)
    max.setAttr ("ProductionMotionblur.maxObjectSamples",127)
    max.setAttr ("ProductionMotionblur.volumeSamples",1)
   
    PName = 'Production'
    Production = max.shadingNode('mentalrayOptions',at=1,n=PName)
    max.setAttr ("Production.rayTracing",1)
    max.setAttr ("Production.maxReflectionRays",10)
    max.setAttr ("Production.maxRefractionRays",10)
    max.setAttr ("Production.maxRayDepth",20)
    max.setAttr ("Production.maxShadowRayDepth",2)
    max.setAttr ("Production.scanline",0)
   
    max.setAttr ("Production.faces",2)
   
    max.setAttr ("Production.shadowMethod",1)
    max.setAttr ("Production.shadowMaps",1)
    max.setAttr ("Production.biasShadowMaps",0)
    max.setAttr ("Production.traceShadowMaps",0)
    max.setAttr ("Production.windowShadowMaps",0)
    max.setAttr ("Production.motionBlurShadowMaps",1)
    max.setAttr("Production.motionBlurShadowMaps",lock=True)
    max.setAttr ("Production.rebuildShadowMaps",1)
   
    max.setAttr ("Production.motionBlur",0)
   
    max.setAttr ("Production.contrastR",0.1)
    max.setAttr ("Production.contrastG",0.1)
    max.setAttr ("Production.contrastB",0.1)
    max.setAttr ("Production.contrastA",0.10)
    max.setAttr ("Production.minSamples",0)
    max.setAttr ("Production.maxSamples",2)
    max.setAttr ("Production.sampleLock",1)
    max.setAttr ("Production.jitter",0)
    max.setAttr ("Production.filter",3)
    max.setAttr ("Production.filterWidth",1)
    max.setAttr ("Production.filterHeight",1)
   
    max.setAttr ("Production.minObjectSamples",-128)
    max.setAttr ("Production.maxObjectSamples",127)
    max.setAttr ("Production.volumeSamples",1)
   
    pfgName = 'PreviewFinalGather'
    PreviewFinalGather = max.shadingNode('mentalrayOptions',at=1,n=pfgName)
    max.setAttr ("PreviewFinalGather.rayTracing",1)
    max.setAttr ("PreviewFinalGather.maxReflectionRays",2)
    max.setAttr ("PreviewFinalGather.maxRefractionRays",2)
    max.setAttr ("PreviewFinalGather.maxRayDepth",4)
    max.setAttr ("PreviewFinalGather.maxShadowRayDepth",2)
    max.setAttr ("PreviewFinalGather.scanline",0)
   
    max.setAttr ("PreviewFinalGather.faces",2)
   
    max.setAttr ("PreviewFinalGather.shadowMethod",1)
    max.setAttr ("PreviewFinalGather.shadowMaps",1)
    max.setAttr ("PreviewFinalGather.biasShadowMaps",0)
    max.setAttr ("PreviewFinalGather.traceShadowMaps",0)
    max.setAttr ("PreviewFinalGather.windowShadowMaps",0)
    max.setAttr ("PreviewFinalGather.motionBlurShadowMaps",1)
    max.setAttr ("PreviewFinalGather.motionBlurShadowMaps",lock=True)
    max.setAttr ("PreviewFinalGather.rebuildShadowMaps",1)
   
    max.setAttr ("PreviewFinalGather.motionBlur",0)
   
    max.setAttr ("PreviewFinalGather.finalGather",1)
    max.setAttr ("PreviewFinalGather.finalGatherFast",0)
    max.setAttr ("PreviewFinalGather.finalGatherRays",100)
    max.setAttr ("PreviewFinalGather.finalGatherMinRadius",0)
    max.setAttr ("PreviewFinalGather.finalGatherMaxRadius",0)
    max.setAttr ("PreviewFinalGather.finalGatherView",0)
    max.setAttr ("PreviewFinalGather.finalGatherTraceDiffuse",0)
    max.setAttr ("PreviewFinalGather.finalGatherTraceReflection",1)
    max.setAttr ("PreviewFinalGather.finalGatherTraceRefraction",1)
    max.setAttr ("PreviewFinalGather.finalGatherTraceDepth",2)
    max.setAttr ("PreviewFinalGather.finalGatherFalloffStart",0)
    max.setAttr ("PreviewFinalGather.finalGatherFalloffStop",0)
    max.setAttr ("PreviewFinalGather.finalGatherFilter",0)
    max.setAttr ("PreviewFinalGather.finalGatherRebuild",1)
   
    max.setAttr ("PreviewFinalGather.contrastR",0.1)
    max.setAttr ("PreviewFinalGather.contrastG",0.1)
    max.setAttr ("PreviewFinalGather.contrastB",0.1)
    max.setAttr ("PreviewFinalGather.contrastA",0.10)
    max.setAttr ("PreviewFinalGather.minSamples",-1)
    max.setAttr ("PreviewFinalGather.maxSamples",1)
    max.setAttr ("PreviewFinalGather.sampleLock",1)
    max.setAttr ("PreviewFinalGather.jitter",0)
    max.setAttr ("PreviewFinalGather.filter",2)
    max.setAttr ("PreviewFinalGather.filterWidth",1)
    max.setAttr ("PreviewFinalGather.filterHeight",1)
   
    max.setAttr ("PreviewFinalGather.minObjectSamples",-128)
    max.setAttr ("PreviewFinalGather.maxObjectSamples",127)
    max.setAttr ("PreviewFinalGather.volumeSamples",1)
   
   
   
    pgiName = 'PreviewGlobalIllum'
    PreviewGlobalIllum = max.shadingNode('mentalrayOptions',at=1,n=pgiName)
    max.setAttr ("PreviewGlobalIllum.rayTracing",1)
    max.setAttr ("PreviewGlobalIllum.maxReflectionRays",2)
    max.setAttr ("PreviewGlobalIllum.maxRefractionRays",2)
    max.setAttr ("PreviewGlobalIllum.maxRayDepth",4)
    max.setAttr ("PreviewGlobalIllum.maxShadowRayDepth",2)
    max.setAttr ("PreviewGlobalIllum.scanline",0)
   
    max.setAttr ("PreviewGlobalIllum.faces",2)
   
    max.setAttr ("PreviewGlobalIllum.shadowMethod",1)
    max.setAttr ("PreviewGlobalIllum.shadowMaps",1)
    max.setAttr ("PreviewGlobalIllum.biasShadowMaps",0)
    max.setAttr ("PreviewGlobalIllum.traceShadowMaps",0)
    max.setAttr ("PreviewGlobalIllum.windowShadowMaps",0)
    max.setAttr ("PreviewGlobalIllum.motionBlurShadowMaps",1)
    max.setAttr ("PreviewGlobalIllum.motionBlurShadowMaps",lock=True)
    max.setAttr ("PreviewGlobalIllum.rebuildShadowMaps",1)
   
    max.setAttr ("PreviewGlobalIllum.motionBlur",0)
   
    max.setAttr ("PreviewGlobalIllum.globalIllum",1)
    max.setAttr ("PreviewGlobalIllum.globalIllumAccuracy",500)
    max.setAttr ("PreviewGlobalIllum.globalIllumRadius",0)
    max.setAttr ("PreviewGlobalIllum.globalIllumScale",1,1,1,type='double3')
    max.setAttr ("PreviewGlobalIllum.maxReflectionPhotons",5)
    max.setAttr ("PreviewGlobalIllum.maxRefractionPhotons",5)
    max.setAttr ("PreviewGlobalIllum.maxPhotonDepth",5)
    max.setAttr ("PreviewGlobalIllum.photonVolumeAccuracy",30)
    max.setAttr ("PreviewGlobalIllum.photonVolumeRadius",0)
    max.setAttr ("PreviewGlobalIllum.photonAutoVolume",0)
    max.setAttr ("PreviewGlobalIllum.photonMapRebuild",1)
    max.setAttr ("PreviewGlobalIllum.photonMapVisualizer",0)
   
    max.setAttr ("PreviewGlobalIllum.finalGather",0)
   
    max.setAttr ("PreviewGlobalIllum.contrastR",0.1)
    max.setAttr ("PreviewGlobalIllum.contrastG",0.1)
    max.setAttr ("PreviewGlobalIllum.contrastB",0.1)
    max.setAttr ("PreviewGlobalIllum.contrastA",0.10)
    max.setAttr ("PreviewGlobalIllum.minSamples",-1)
    max.setAttr ("PreviewGlobalIllum.maxSamples",1)
    max.setAttr ("PreviewGlobalIllum.sampleLock",1)
    max.setAttr ("PreviewGlobalIllum.jitter",0)
    max.setAttr ("PreviewGlobalIllum.filter",2)
    max.setAttr ("PreviewGlobalIllum.filterWidth",1)
    max.setAttr ("PreviewGlobalIllum.filterHeight",1)
   
    max.setAttr ("PreviewGlobalIllum.minObjectSamples",-128)
    max.setAttr ("PreviewGlobalIllum.maxObjectSamples",127)
    max.setAttr ("PreviewGlobalIllum.volumeSamples",1)
   
    pcName = 'PreviewCaustics'
    PreviewCaustics = max.shadingNode('mentalrayOptions',at=1,n=pcName)
    max.setAttr ("PreviewCaustics.rayTracing",1)
    max.setAttr ("PreviewCaustics.maxReflectionRays",2)
    max.setAttr ("PreviewCaustics.maxRefractionRays",2)
    max.setAttr ("PreviewCaustics.maxRayDepth",4)
    max.setAttr ("PreviewCaustics.maxShadowRayDepth",2)
    max.setAttr ("PreviewCaustics.scanline",0)
   
    max.setAttr ("PreviewCaustics.faces",2)
   
    max.setAttr ("PreviewCaustics.shadowMethod",1)
    max.setAttr ("PreviewCaustics.shadowMaps",1)
    max.setAttr ("PreviewCaustics.biasShadowMaps",0)
    max.setAttr ("PreviewCaustics.traceShadowMaps",0)
    max.setAttr ("PreviewCaustics.windowShadowMaps",0)
    max.setAttr ("PreviewCaustics.motionBlurShadowMaps",1)
    max.setAttr ("PreviewCaustics.motionBlurShadowMaps",lock=True)
    max.setAttr ("PreviewCaustics.rebuildShadowMaps",1)
   
    max.setAttr ("PreviewCaustics.motionBlur",0)
   
    max.setAttr ("PreviewCaustics.caustics",1)
    max.setAttr ("PreviewCaustics.causticFilterType",0)
    max.setAttr ("PreviewCaustics.causticFilterKernel",1.1)
    max.setAttr ("PreviewCaustics.causticAccuracy",100)
    max.setAttr ("PreviewCaustics.causticRadius",1)
    max.setAttr ("PreviewCaustics.causticScale",1,1,1,type='double3')
   
    max.setAttr ("PreviewCaustics.globalIllum",0)
    max.setAttr ("PreviewCaustics.globalIllumAccuracy",500)
    max.setAttr ("PreviewCaustics.globalIllumRadius",0)
    max.setAttr ("PreviewCaustics.globalIllumScale",1,1,1,type='double3')
    max.setAttr ("PreviewCaustics.globalIllumAccuracy",lock=True)
    max.setAttr ("PreviewCaustics.globalIllumRadius",lock=True)
    max.setAttr ("PreviewCaustics.globalIllumScale",lock=True)
    max.setAttr ("PreviewCaustics.maxReflectionPhotons",5)
    max.setAttr ("PreviewCaustics.maxRefractionPhotons",5)
    max.setAttr ("PreviewCaustics.maxPhotonDepth",5)
    max.setAttr ("PreviewCaustics.photonVolumeAccuracy",30)
    max.setAttr ("PreviewCaustics.photonVolumeRadius",0)
    max.setAttr ("PreviewCaustics.photonAutoVolume",0)
    max.setAttr ("PreviewCaustics.photonMapRebuild",1)
    max.setAttr ("PreviewCaustics.photonMapVisualizer",0)
   
    max.setAttr ("PreviewCaustics.finalGather",0)
   
    max.setAttr ("PreviewCaustics.contrastR",0.1)
    max.setAttr ("PreviewCaustics.contrastG",0.1)
    max.setAttr ("PreviewCaustics.contrastB",0.1)
    max.setAttr ("PreviewCaustics.contrastA",0.1)
    max.setAttr ("PreviewCaustics.minSamples",-1)
    max.setAttr ("PreviewCaustics.maxSamples",1)
    max.setAttr ("PreviewCaustics.sampleLock",1)
    max.setAttr ("PreviewCaustics.jitter",0)
    max.setAttr ("PreviewCaustics.filter",2)
    max.setAttr ("PreviewCaustics.filterWidth",1)
    max.setAttr ("PreviewCaustics.filterHeight",1)
   
    max.setAttr ("PreviewCaustics.minObjectSamples",-128)
    max.setAttr ("PreviewCaustics.maxObjectSamples",127)
    max.setAttr ("PreviewCaustics.volumeSamples",1)
   
    prmnName = 'PreviewRapidMotion'
    PreviewRapidMotion = max.shadingNode('mentalrayOptions',at=1,n=prmnName)
    max.setAttr ("PreviewRapidMotion.rayTracing",1)
    max.setAttr ("PreviewRapidMotion.maxReflectionRays",2)
    max.setAttr ("PreviewRapidMotion.maxRefractionRays",2)
    max.setAttr ("PreviewRapidMotion.maxRayDepth",4)
    max.setAttr ("PreviewRapidMotion.maxShadowRayDepth",2)
    max.setAttr ("PreviewRapidMotion.scanline",3)
    max.setAttr ("PreviewRapidMotion.rapidSamplesCollect",3)
    max.setAttr ("PreviewRapidMotion.rapidSamplesMotion",1)
    max.setAttr ("PreviewRapidMotion.rapidSamplesShading",1)
    max.setAttr ("PreviewRapidMotion.faces",2)
   
    max.setAttr ("PreviewRapidMotion.shadowMethod",1)
    max.setAttr ("PreviewRapidMotion.shadowMaps",1)
    max.setAttr ("PreviewRapidMotion.biasShadowMaps",0)
    max.setAttr ("PreviewRapidMotion.traceShadowMaps",0)
    max.setAttr ("PreviewRapidMotion.windowShadowMaps",0)
    max.setAttr ("PreviewRapidMotion.motionBlurShadowMaps",1)
    max.setAttr ("PreviewRapidMotion.rebuildShadowMaps",1)
   
    max.setAttr ("PreviewRapidMotion.motionBlur",1)
    max.setAttr ("PreviewRapidMotion.motionBlurBy",1)
    max.setAttr ("PreviewRapidMotion.shutter",1)
    max.setAttr ("PreviewRapidMotion.shutterDelay",0)
    max.setAttr ("PreviewRapidMotion.timeContrastR",0.5)
    max.setAttr ("PreviewRapidMotion.timeContrastG",0.5)
    max.setAttr ("PreviewRapidMotion.timeContrastB",0.5)
    max.setAttr ("PreviewRapidMotion.timeContrastA",0.5)
    max.setAttr ("PreviewRapidMotion.motionSteps",1)
   
    max.setAttr ("PreviewRapidMotion.caustics",0)
   
    max.setAttr ("PreviewRapidMotion.globalIllum",0)
   
    max.setAttr ("PreviewRapidMotion.finalGather",0)
   
    max.setAttr ("PreviewRapidMotion.contrastR",0.1)
    max.setAttr ("PreviewRapidMotion.contrastG",0.1)
    max.setAttr ("PreviewRapidMotion.contrastB",0.1)
    max.setAttr ("PreviewRapidMotion.contrastA",0.1)
    max.setAttr ("PreviewRapidMotion.minSamples",-1)
    max.setAttr ("PreviewRapidMotion.maxSamples",1)
    max.setAttr ("PreviewRapidMotion.sampleLock",1)
    max.setAttr ("PreviewRapidMotion.jitter",0)
    max.setAttr ("PreviewRapidMotion.filter",2)
    max.setAttr ("PreviewRapidMotion.filterWidth",1)
    max.setAttr ("PreviewRapidMotion.filterHeight",1)
   
    max.setAttr ("PreviewRapidMotion.minObjectSamples",-128)
    max.setAttr ("PreviewRapidMotion.maxObjectSamples",127)
    max.setAttr ("PreviewRapidMotion.volumeSamples",1)
   
    pmbrName = 'PreviewMotionblur'
    PreviewMotionblur = max.shadingNode('mentalrayOptions',at=1,n=pmbrName)
    max.setAttr ("PreviewMotionblur.rayTracing",1)
    max.setAttr ("PreviewMotionblur.maxReflectionRays",2)
    max.setAttr ("PreviewMotionblur.maxRefractionRays",2)
    max.setAttr ("PreviewMotionblur.maxRayDepth",4)
    max.setAttr ("PreviewMotionblur.maxShadowRayDepth",2)
    max.setAttr ("PreviewMotionblur.scanline",0)
   
    max.setAttr ("PreviewMotionblur.faces",2)
   
    max.setAttr ("PreviewMotionblur.shadowMethod",1)
    max.setAttr ("PreviewMotionblur.shadowMaps",1)
    max.setAttr ("PreviewMotionblur.biasShadowMaps",0)
    max.setAttr ("PreviewMotionblur.traceShadowMaps",0)
    max.setAttr ("PreviewMotionblur.windowShadowMaps",0)
    max.setAttr ("PreviewMotionblur.motionBlurShadowMaps",1)
    max.setAttr ("PreviewMotionblur.rebuildShadowMaps",1)
   
    max.setAttr ("PreviewMotionblur.motionBlur",1)
    max.setAttr ("PreviewMotionblur.motionBlurBy",1)
    max.setAttr ("PreviewMotionblur.shutter",1)
    max.setAttr ("PreviewMotionblur.shutterDelay",0)
    max.setAttr ("PreviewMotionblur.timeContrastR",0.5)
    max.setAttr ("PreviewMotionblur.timeContrastG",0.5)
    max.setAttr ("PreviewMotionblur.timeContrastB",0.5)
    max.setAttr ("PreviewMotionblur.timeContrastA",0.5)
    max.setAttr ("PreviewMotionblur.motionSteps",1)
   
    max.setAttr ("PreviewMotionblur.caustics",0)
   
    max.setAttr ("PreviewMotionblur.globalIllum",0)
   
    max.setAttr ("PreviewMotionblur.finalGather",0)
   
    max.setAttr ("PreviewMotionblur.contrastR",0.1)
    max.setAttr ("PreviewMotionblur.contrastG",0.1)
    max.setAttr ("PreviewMotionblur.contrastB",0.1)
    max.setAttr ("PreviewMotionblur.contrastA",0.1)
    max.setAttr ("PreviewMotionblur.minSamples",-1)
    max.setAttr ("PreviewMotionblur.maxSamples",1)
    max.setAttr ("PreviewMotionblur.sampleLock",1)
    max.setAttr ("PreviewMotionblur.jitter",0)
    max.setAttr ("PreviewMotionblur.filter",2)
    max.setAttr ("PreviewMotionblur.filterWidth",1)
    max.setAttr ("PreviewMotionblur.filterHeight",1)
   
    max.setAttr ("PreviewMotionblur.minObjectSamples",-128)
    max.setAttr ("PreviewMotionblur.maxObjectSamples",127)
    max.setAttr ("PreviewMotionblur.volumeSamples",1)
   
    pvName = 'Preview'
    Preview = max.shadingNode('mentalrayOptions',at=1,n=pvName)
    max.setAttr ("Preview.rayTracing",1)
    max.setAttr ("Preview.maxReflectionRays",2)
    max.setAttr ("Preview.maxRefractionRays",2)
    max.setAttr ("Preview.maxRayDepth",4)
    max.setAttr ("Preview.maxShadowRayDepth",2)
    max.setAttr ("Preview.scanline",0)
   
    max.setAttr ("Preview.faces",2)
   
    max.setAttr ("Preview.shadowMethod",1)
    max.setAttr ("Preview.shadowMaps",1)
    max.setAttr ("Preview.biasShadowMaps",0)
    max.setAttr ("Preview.traceShadowMaps",0)
    max.setAttr ("Preview.windowShadowMaps",0)
    max.setAttr ("Preview.motionBlurShadowMaps",1)
    max.setAttr ("Preview.motionBlurShadowMaps",lock=True)
    max.setAttr ("Preview.rebuildShadowMaps",1)
   
    max.setAttr ("Preview.motionBlur",0)
   
    max.setAttr ("Preview.caustics",0)
   
    max.setAttr ("Preview.globalIllum",0)
   
    max.setAttr ("Preview.finalGather",0)
   
    max.setAttr ("Preview.contrastR",0.1)
    max.setAttr ("Preview.contrastG",0.1)
    max.setAttr ("Preview.contrastB",0.1)
    max.setAttr ("Preview.contrastA",0.1)
    max.setAttr ("Preview.minSamples",-1)
    max.setAttr ("Preview.maxSamples",1)
    max.setAttr ("Preview.sampleLock",1)
    max.setAttr ("Preview.jitter",0)
    max.setAttr ("Preview.filter",2)
    max.setAttr ("Preview.filterWidth",1)
    max.setAttr ("Preview.filterHeight",1)
   
    max.setAttr ("Preview.minObjectSamples",-128)
    max.setAttr ("Preview.maxObjectSamples",127)
    max.setAttr ("Preview.volumeSamples",1)
   
   
   
    drmName = 'DraftRapidMotion'
    DraftRapidMotion = max.shadingNode('mentalrayOptions',at=1,n=drmName)
    max.setAttr ("DraftRapidMotion.rayTracing",1)
    max.setAttr ("DraftRapidMotion.maxReflectionRays",1)
    max.setAttr ("DraftRapidMotion.maxRefractionRays",1)
    max.setAttr ("DraftRapidMotion.maxRayDepth",2)
    max.setAttr ("DraftRapidMotion.maxShadowRayDepth",2)
    max.setAttr ("DraftRapidMotion.scanline",3)
    max.setAttr ("DraftRapidMotion.rapidSamplesCollect",1)
    max.setAttr ("DraftRapidMotion.rapidSamplesMotion",1)
    max.setAttr ("DraftRapidMotion.rapidSamplesShading",0.25)
    max.setAttr ("DraftRapidMotion.faces",2)
   
    max.setAttr ("DraftRapidMotion.shadowMethod",1)
    max.setAttr ("DraftRapidMotion.shadowMaps",1)
    max.setAttr ("DraftRapidMotion.biasShadowMaps",0)
    max.setAttr ("DraftRapidMotion.traceShadowMaps",0)
    max.setAttr ("DraftRapidMotion.windowShadowMaps",0)
    max.setAttr ("DraftRapidMotion.motionBlurShadowMaps",1)
    max.setAttr ("DraftRapidMotion.rebuildShadowMaps",1)
   
    max.setAttr ("DraftRapidMotion.motionBlur",1)
    max.setAttr ("DraftRapidMotion.motionBlurBy",1)
    max.setAttr ("DraftRapidMotion.shutter",1)
    max.setAttr ("DraftRapidMotion.shutterDelay",0)
    max.setAttr ("DraftRapidMotion.timeContrastR",1)
    max.setAttr ("DraftRapidMotion.timeContrastG",1)
    max.setAttr ("DraftRapidMotion.timeContrastB",1)
    max.setAttr ("DraftRapidMotion.timeContrastA",1)
    max.setAttr ("DraftRapidMotion.motionSteps",1)
   
    max.setAttr ("DraftRapidMotion.caustics",0)
   
    max.setAttr ("DraftRapidMotion.globalIllum",0)
   
    max.setAttr ("DraftRapidMotion.finalGather",0)
   
    max.setAttr ("DraftRapidMotion.contrastR",0.1)
    max.setAttr ("DraftRapidMotion.contrastG",0.1)
    max.setAttr ("DraftRapidMotion.contrastB",0.1)
    max.setAttr ("DraftRapidMotion.contrastA",0.1)
    max.setAttr ("DraftRapidMotion.minSamples",-2)
    max.setAttr ("DraftRapidMotion.maxSamples",0)
    max.setAttr ("DraftRapidMotion.sampleLock",1)
    max.setAttr ("DraftRapidMotion.jitter",0)
    max.setAttr ("DraftRapidMotion.filter",1)
    max.setAttr ("DraftRapidMotion.filterWidth",1)
    max.setAttr ("DraftRapidMotion.filterHeight",1)
   
    max.setAttr ("DraftRapidMotion.minObjectSamples",-128)
    max.setAttr ("DraftRapidMotion.maxObjectSamples",127)
    max.setAttr ("DraftRapidMotion.volumeSamples",1)
   
    dmbName = 'DraftMotionBlur'
    DraftMotionBlur = max.shadingNode('mentalrayOptions',at=1,n=dmbName)
    max.setAttr ("DraftMotionBlur.rayTracing",1)
    max.setAttr ("DraftMotionBlur.maxReflectionRays",1)
    max.setAttr ("DraftMotionBlur.maxRefractionRays",1)
    max.setAttr ("DraftMotionBlur.maxRayDepth",2)
    max.setAttr ("DraftMotionBlur.maxShadowRayDepth",2)
    max.setAttr ("DraftMotionBlur.scanline",0)
   
    max.setAttr ("DraftMotionBlur.faces",2)
   
    max.setAttr ("DraftMotionBlur.shadowMethod",1)
    max.setAttr ("DraftMotionBlur.shadowMaps",1)
    max.setAttr ("DraftMotionBlur.biasShadowMaps",0)
    max.setAttr ("DraftMotionBlur.traceShadowMaps",0)
    max.setAttr ("DraftMotionBlur.windowShadowMaps",0)
   
    max.setAttr ("DraftMotionBlur.motionBlurShadowMaps",1)
    max.setAttr ("DraftMotionBlur.rebuildShadowMaps",1)
   
    max.setAttr ("DraftMotionBlur.motionBlur",1)
    max.setAttr ("DraftMotionBlur.motionBlurBy",1)
    max.setAttr ("DraftMotionBlur.shutter",1)
    max.setAttr ("DraftMotionBlur.shutterDelay",0)
    max.setAttr ("DraftMotionBlur.timeContrastR",1)
    max.setAttr ("DraftMotionBlur.timeContrastG",1)
    max.setAttr ("DraftMotionBlur.timeContrastB",1)
    max.setAttr ("DraftMotionBlur.timeContrastA",1)
    max.setAttr ("DraftMotionBlur.motionSteps",1)
   
    max.setAttr ("DraftMotionBlur.caustics",0)
   
    max.setAttr ("DraftMotionBlur.globalIllum",0)
   
    max.setAttr ("DraftMotionBlur.finalGather",0)
   
    max.setAttr ("DraftMotionBlur.contrastR",0.1)
    max.setAttr ("DraftMotionBlur.contrastG",0.1)
    max.setAttr ("DraftMotionBlur.contrastB",0.1)
    max.setAttr ("DraftMotionBlur.contrastA",0.1)
    max.setAttr ("DraftMotionBlur.minSamples",-2)
    max.setAttr ("DraftMotionBlur.maxSamples",0)
    max.setAttr ("DraftMotionBlur.sampleLock",1)
    max.setAttr ("DraftMotionBlur.jitter",0)
    max.setAttr ("DraftMotionBlur.filter",1)
    max.setAttr ("DraftMotionBlur.filterWidth",1)
    max.setAttr ("DraftMotionBlur.filterHeight",1)
   
    max.setAttr ("DraftMotionBlur.minObjectSamples",-128)
    max.setAttr ("DraftMotionBlur.maxObjectSamples",127)
    max.setAttr ("DraftMotionBlur.volumeSamples",1)
   
    DName = 'Drafte'
    Draft = max.shadingNode('mentalrayOptions',at=1,n=DName)
   
    max.setAttr ("Drafte.rayTracing",1)
    max.setAttr ("Drafte.maxReflectionRays",1)
    max.setAttr ("Drafte.maxRefractionRays",1)
    max.setAttr ("Drafte.maxRayDepth",2)
    max.setAttr ("Drafte.maxShadowRayDepth",2)
    max.setAttr ("Drafte.scanline",0)
   
    max.setAttr ("Drafte.faces",2)
   
    max.setAttr ("Drafte.shadowMethod",1)
    max.setAttr ("Drafte.shadowMaps",1)
    max.setAttr ("Drafte.biasShadowMaps",0)
    max.setAttr ("Drafte.traceShadowMaps",0)
    max.setAttr ("Drafte.windowShadowMaps",0)
    max.setAttr ("Drafte.motionBlurShadowMaps",1)
    max.setAttr ("Drafte.motionBlurShadowMaps",lock=True)
    max.setAttr ("Drafte.rebuildShadowMaps",1)
   
    max.setAttr ("Drafte.motionBlur",0)
   
    max.setAttr ("Drafte.caustics",0)
   
    max.setAttr ("Drafte.globalIllum",0)
   
    max.setAttr ("Drafte.finalGather",0)
   
    max.setAttr ("Drafte.contrastR",0.1)
    max.setAttr ("Drafte.contrastG",0.1)
    max.setAttr ("Drafte.contrastB",0.1)
    max.setAttr ("Drafte.contrastA",0.1)
    max.setAttr ("Drafte.minSamples",-2)
    max.setAttr ("Drafte.maxSamples",0)
    max.setAttr ("Drafte.sampleLock",1)
    max.setAttr ("Drafte.jitter",0)
    max.setAttr ("Drafte.filter",1)
    max.setAttr ("Drafte.filterWidth",1)
    max.setAttr ("Drafte.filterHeight",1)
   
    max.setAttr ("Drafte.minObjectSamples",-128)
    max.setAttr ("Drafte.maxObjectSamples",127)
    max.setAttr ("Drafte.volumeSamples",1)
   
   
   
    cpName = 'miContourPreset'
    miContourPreset = max.shadingNode('mentalrayOptions',at=1,n=cpName)
    max.setAttr ("miContourPreset.rayTracing",1)
    max.setAttr ("miContourPreset.maxReflectionRays",1)
    max.setAttr ("miContourPreset.maxRefractionRays",1)
    max.setAttr ("miContourPreset.maxRayDepth",2)
    max.setAttr ("miContourPreset.maxShadowRayDepth",2)
    max.setAttr ("miContourPreset.scanline",0)
    max.setAttr ("miContourPreset.faces",2)
   
    max.setAttr ("miContourPreset.shadowMethod",1)
    max.setAttr ("miContourPreset.shadowMaps",1)
    max.setAttr ("miContourPreset.biasShadowMaps",0)
    max.setAttr ("miContourPreset.traceShadowMaps",0)
    max.setAttr ("miContourPreset.windowShadowMaps",0)
    max.setAttr ("miContourPreset.motionBlurShadowMaps",1)
    max.setAttr ("miContourPreset.motionBlurShadowMaps",lock=True)
    max.setAttr ("miContourPreset.rebuildShadowMaps",1)
   
    max.setAttr ("miContourPreset.motionBlur",0)
   
    max.setAttr ("miContourPreset.caustics",0)
   
    max.setAttr ("miContourPreset.globalIllum",0)
   
    max.setAttr ("miContourPreset.finalGather",0)
   
    max.setAttr ("miContourPreset.contrastR",0.1)
    max.setAttr ("miContourPreset.contrastG",0.1)
    max.setAttr ("miContourPreset.contrastB",0.1)
    max.setAttr ("miContourPreset.contrastA",0.1)
    max.setAttr ("miContourPreset.minSamples",-2)
    max.setAttr ("miContourPreset.maxSamples",0)
    max.setAttr ("miContourPreset.sampleLock",1)
    max.setAttr ("miContourPreset.jitter",0)
    max.setAttr ("miContourPreset.filter",1)
    max.setAttr ("miContourPreset.filterWidth",1)
    max.setAttr ("miContourPreset.filterHeight",1)
   
    max.setAttr ("miContourPreset.minObjectSamples",-128)
    max.setAttr ("miContourPreset.maxObjectSamples",127)
    max.setAttr ("miContourPreset.volumeSamples",1)
   
    max.connectAttr(ProductionRapidHair+".message",'mentalrayItemsList.options[16]',force=True)
    max.connectAttr(ProductionRapidFur+".message",'mentalrayItemsList.options[15]',force=True)
    max.connectAttr(ProductionFineTrace+".message",'mentalrayItemsList.options[14]',force=True)
    max.connectAttr(ProductionRapidMotion+".message",'mentalrayItemsList.options[13]',force=True)
    max.connectAttr(ProductionMotionblur+".message",'mentalrayItemsList.options[12]',force=True)
    max.connectAttr(Production+".message",'mentalrayItemsList.options[11]',force=True)
    max.connectAttr(PreviewFinalGather+".message",'mentalrayItemsList.options[10]',force=True)
    max.connectAttr(PreviewGlobalIllum+".message",'mentalrayItemsList.options[9]',force=True)
    max.connectAttr(PreviewCaustics+".message",'mentalrayItemsList.options[8]',force=True)
    max.connectAttr(PreviewRapidMotion+".message",'mentalrayItemsList.options[7]',force=True)
   
    max.connectAttr(PreviewMotionblur+".message",'mentalrayItemsList.options[6]',force=True)
    max.connectAttr(Preview+".message",'mentalrayItemsList.options[5]',force=True)
    max.connectAttr(DraftRapidMotion+".message",'mentalrayItemsList.options[4]',force=True)
    max.connectAttr(DraftMotionBlur+".message",'mentalrayItemsList.options[3]',force=True)
    max.connectAttr(Draft+".message",'mentalrayItemsList.options[2]',force=True)
    max.connectAttr(miContourPreset+".message",'mentalrayItemsList.options[1]',force=True)
   
#OneoLam
def OnetoLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               anisotropicToLam()
            if max.nodeType(x)=='blinn':
               BinToLam()
            if max.nodeType(x)=='phong':
               PToLam()      
            if max.nodeType(x)=='phongE':
               phongEToLam()  
            if max.nodeType(x)=='surfaceShader':
               surfaceShaderToLam()
            print('Transform complete'),
   
def anisotropicToLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='anisotropic':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('lambert',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)                    
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
               
def BinToLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='blinn':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('lambert',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)    
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),

def PToLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phong':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('lambert',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                             
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)        
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    


def phongEToLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phongE':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('lambert',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                             
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                                           
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
           
def surfaceShaderToLam(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)          
            if max.nodeType(x)=='surfaceShader':
                R1 = max.getAttr(x+'.outColorR')
                G1 = max.getAttr(x+'.outColorG')
                B1 = max.getAttr(x+'.outColorB')
                tR1 = max.getAttr(x+'.outTransparencyR')
                tG1 = max.getAttr(x+'.outTransparencyG')
                tB1 = max.getAttr(x+'.outTransparencyB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')

                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.outColor',sfd=True)
                outTransparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)            
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('lambert',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
                max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                                                                             
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if outTransparencyPath!='':
                    max.connectAttr(outTransparencyPath,x+'.transparency',f=True)  
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)      
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                                             
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                   
                   
#OneoBlinn
def OnetoBlinn(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               anisotropicToBln()
            if max.nodeType(x)=='lambert':
               LmbToBln()
            if max.nodeType(x)=='phong':
               PToBln()      
            if max.nodeType(x)=='phongE':
               phongEToBln()  
            if max.nodeType(x)=='surfaceShader':
               surfaceShaderToBln()
            print('Transform complete'),

def anisotropicToBln(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='anisotropic':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')                
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('blinn',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
               
def LmbToBln(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='lambert':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')

               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')              
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('blinn',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)    
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                   
                    print('Transform complete'),

def PToBln(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phong':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('blinn',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    

def phongEToBln(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phongE':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('blinn',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
           

def surfaceShaderToBln(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)          
            if max.nodeType(x)=='surfaceShader':
                R1 = max.getAttr(x+'.outColorR')
                G1 = max.getAttr(x+'.outColorG')
                B1 = max.getAttr(x+'.outColorB')
                tR1 = max.getAttr(x+'.outTransparencyR')
                tG1 = max.getAttr(x+'.outTransparencyG')
                tB1 = max.getAttr(x+'.outTransparencyB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                scR1 = max.getAttr(x+'.miSpecularColorR')
                scG1 = max.getAttr(x+'.miSpecularColorG')
                scB1 = max.getAttr(x+'.miSpecularColorB')

                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                miReflectivity = max.getAttr(x+'.miReflectivity')
               
                imagePath1 = max.connectionInfo(x+'.outColor',sfd=True)
                outTransparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)            
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                miSpecularColorPath = max.connectionInfo(x+'.miSpecularColor',sfd=True)
                miReflectivityPath = max.connectionInfo(x+'.miReflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('blinn',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
                max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.miSpecularColor',scR1,scG1,scB1,type="double3")
                                                                             
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.miReflectivity',miReflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if outTransparencyPath!='':
                    max.connectAttr(outTransparencyPath,x+'.transparency',f=True)  
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)      
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if miSpecularColorPath !='':
                    max.connectAttr(miSpecularColorPath ,x+'.miSpecularColor',f=True)      
                if miReflectivityPath !='':
                    max.connectAttr(miReflectivityPath ,x+'.miReflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                                                                     
#OneoPhong
def OnetoPhong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               anisotropicToPhong()
            if max.nodeType(x)=='lambert':
               LmbToPhong()
            if max.nodeType(x)=='blinn':
               BlinnToPhong()      
            if max.nodeType(x)=='phongE':
               phongETophong()  
            if max.nodeType(x)=='surfaceShader':
               surfaceShaderTophong()
            print('Transform complete'),

def anisotropicToPhong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='anisotropic':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')                
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phong',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
               
def LmbToPhong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='lambert':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')

               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')              
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phong',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)    
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                   
                    print('Transform complete'),

def BlinnToPhong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='blinn':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phong',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    

def phongETophong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phongE':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phong',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
           

def surfaceShaderTophong(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)          
            if max.nodeType(x)=='surfaceShader':
                R1 = max.getAttr(x+'.outColorR')
                G1 = max.getAttr(x+'.outColorG')
                B1 = max.getAttr(x+'.outColorB')
                tR1 = max.getAttr(x+'.outTransparencyR')
                tG1 = max.getAttr(x+'.outTransparencyG')
                tB1 = max.getAttr(x+'.outTransparencyB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                scR1 = max.getAttr(x+'.miSpecularColorR')
                scG1 = max.getAttr(x+'.miSpecularColorG')
                scB1 = max.getAttr(x+'.miSpecularColorB')

                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                miReflectivity = max.getAttr(x+'.miReflectivity')
               
                imagePath1 = max.connectionInfo(x+'.outColor',sfd=True)
                outTransparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)            
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                miSpecularColorPath = max.connectionInfo(x+'.miSpecularColor',sfd=True)
                miReflectivityPath = max.connectionInfo(x+'.miReflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phong',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
                max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.miSpecularColor',scR1,scG1,scB1,type="double3")
                                                                             
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.miReflectivity',miReflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if outTransparencyPath!='':
                    max.connectAttr(outTransparencyPath,x+'.transparency',f=True)  
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)      
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if miSpecularColorPath !='':
                    max.connectAttr(miSpecularColorPath ,x+'.miSpecularColor',f=True)      
                if miReflectivityPath !='':
                    max.connectAttr(miReflectivityPath ,x+'.miReflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),                    
                   
#OneoPhongE
def OnetoPhongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               anisotropicToPhongE()
            if max.nodeType(x)=='lambert':
               LmbToPhongE()
            if max.nodeType(x)=='phong':
               phongToPhongE()      
            if max.nodeType(x)=='blinn':
               BlinnToPhongE()  
            if max.nodeType(x)=='surfaceShader':
               surfaceShaderTophongE()
            print('Transform complete'),

def anisotropicToPhongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='anisotropic':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')                
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phongE',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    

def OnetoSurfaceShader(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               SurfaceShader()
            if max.nodeType(x)=='lambert':
               SurfaceShader()
            if max.nodeType(x)=='phong':
               SurfaceShader()      
            if max.nodeType(x)=='blinn':
               SurfaceShader()  
            if max.nodeType(x)=='phongE':
               SurfaceShader()
               print('Transform complete'),    
            
def SurfaceShader(*arg):
    matSel = max.ls(sl=True,mat=True) 
    print matSel   
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        print objSel
        #max.select(matSel,r=True)
        for x in matSel:
            #max.select(matSel,r=True) 
            R1 = max.getAttr(x+'.colorR')
            G1 = max.getAttr(x+'.colorG')
            B1 = max.getAttr(x+'.colorB')
            tR1 = max.getAttr(x+'.transparencyR')
            tG1 = max.getAttr(x+'.transparencyG')
            tB1 = max.getAttr(x+'.transparencyB')
            #aR1 = max.getAttr(x+'.ambientColorR')
            #aG1 = max.getAttr(x+'.ambientColorG')
            #aB1 = max.getAttr(x+'.ambientColorB')
           
            diffuse = max.getAttr(x+'.diffuse')
            translucence = max.getAttr(x+'.translucence')
            #glowIntensity = max.getAttr(x+'.glowIntensity')
            #matteOpacity = max.getAttr(x+'.matteOpacity')
           
            imagePath1 = max.connectionInfo(x+'.color',sfd=True)
            transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
            #ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
            #glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)                
            #matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)            
           
            oldMat1=max.rename(x,x+'_old')
            shading=max.select(oldMat1)        
            shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
            oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
            MatName1 = x      
            MatSG1 = x+'SG'
            myMat1 = max.shadingNode('surfaceShader',asShader=True, n = MatName1)
            myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
            max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
           
            max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
            max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
               
            if imagePath1!='':
                max.connectAttr(imagePath1,x+'.outColor',f=True)
            if transparencyPath!='':
                max.connectAttr(transparencyPath,x+'.outTransparency',f=True)             
                                   
            max.select(oldMat1,r=True)    
            objSelA=max.hyperShade( objects='' )            
            maSel=max.sets(edit=1,forceElement=myMatSG1)
            if len(maSel)==0:            
                max.select(oldMat1)
                max.delete(oldMat1)
                max.select(oldMatSg)
                max.delete(oldMatSg)
                max.select(myMat1)  
                mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')             
                print('Transform complete'),
            else:
                max.hyperShade(assign=myMatSG1)
                max.select(cl=True)
                max.select(oldMat1)
                max.delete(oldMat1)
                max.select(oldMatSg)
                max.delete(oldMatSg)
                max.select(myMat1)
                mel.eval('hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");')
                print('Transform complete'),  
               
def LmbToPhongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='lambert':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')              
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phongE',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)    
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                   
                    print('Transform complete'),

def BlinnToPhongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='blinn':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phongE',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    

def phongToPhongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phong':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phongE',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
           

def surfaceShaderTophongE(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)          
            if max.nodeType(x)=='surfaceShader':
                R1 = max.getAttr(x+'.outColorR')
                G1 = max.getAttr(x+'.outColorG')
                B1 = max.getAttr(x+'.outColorB')
                tR1 = max.getAttr(x+'.outTransparencyR')
                tG1 = max.getAttr(x+'.outTransparencyG')
                tB1 = max.getAttr(x+'.outTransparencyB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                scR1 = max.getAttr(x+'.miSpecularColorR')
                scG1 = max.getAttr(x+'.miSpecularColorG')
                scB1 = max.getAttr(x+'.miSpecularColorB')

                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                miReflectivity = max.getAttr(x+'.miReflectivity')
               
                imagePath1 = max.connectionInfo(x+'.outColor',sfd=True)
                outTransparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)            
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                miSpecularColorPath = max.connectionInfo(x+'.miSpecularColor',sfd=True)
                miReflectivityPath = max.connectionInfo(x+'.miReflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('phongE',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
                max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.miSpecularColor',scR1,scG1,scB1,type="double3")
                                                                             
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.miReflectivity',miReflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if outTransparencyPath!='':
                    max.connectAttr(outTransparencyPath,x+'.transparency',f=True)  
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)      
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if miSpecularColorPath !='':
                    max.connectAttr(miSpecularColorPath ,x+'.miSpecularColor',f=True)      
                if miReflectivityPath !='':
                    max.connectAttr(miReflectivityPath ,x+'.miReflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),                    
                       
def OnetoAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        for x in matSel:
            max.select(matSel,r=True)      
            if max.nodeType(x)=='anisotropic':
               PhongEToAnisotropic()
            if max.nodeType(x)=='lambert':
               LmbToAnisotropic()
            if max.nodeType(x)=='phong':
               phongToAnisotropic()      
            if max.nodeType(x)=='blinn':
               BlinnToAnisotropic()  
            if max.nodeType(x)=='surfaceShader':
               surfaceShaderToAnisotropic()
            print('Transform complete'),

def PhongEToAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phongE':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')                
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('anisotropic',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
               
def LmbToAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='lambert':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
               
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')              
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('anisotropic',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)    
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                   
                    print('Transform complete'),

def BlinnToAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='blinn':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('anisotropic',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    

def phongToAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)        
            if max.nodeType(x)=='phong':
                R1 = max.getAttr(x+'.colorR')
                G1 = max.getAttr(x+'.colorG')
                B1 = max.getAttr(x+'.colorB')
                tR1 = max.getAttr(x+'.transparencyR')
                tG1 = max.getAttr(x+'.transparencyG')
                tB1 = max.getAttr(x+'.transparencyB')
                aR1 = max.getAttr(x+'.ambientColorR')
                aG1 = max.getAttr(x+'.ambientColorG')
                aB1 = max.getAttr(x+'.ambientColorB')
                iR1 = max.getAttr(x+'.incandescenceR')
                iG1 = max.getAttr(x+'.incandescenceG')
                iB1 = max.getAttr(x+'.incandescenceB')
                eR1 = max.getAttr(x+'.vrEdgeColorR')
                eG1 = max.getAttr(x+'.vrEdgeColorG')
                eB1 = max.getAttr(x+'.vrEdgeColorB')
                idR1 = max.getAttr(x+'.miIrradianceR')
                idG1 = max.getAttr(x+'.miIrradianceG')
                idB1 = max.getAttr(x+'.miIrradianceB')
                icR1 = max.getAttr(x+'.miIrradianceColorR')
                icG1 = max.getAttr(x+'.miIrradianceColorG')
                icB1 = max.getAttr(x+'.miIrradianceColorB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                hsR1 = max.getAttr(x+'.hardwareShaderR')
                hsG1 = max.getAttr(x+'.hardwareShaderG')
                hsB1 = max.getAttr(x+'.hardwareShaderB')
                scR1 = max.getAttr(x+'.specularColorR')
                scG1 = max.getAttr(x+'.specularColorG')
                scB1 = max.getAttr(x+'.specularColorB')
                rcR1 = max.getAttr(x+'.reflectedColorR')
                rcG1 = max.getAttr(x+'.reflectedColorG')
                rcB1 = max.getAttr(x+'.reflectedColorB')
               
                diffuse = max.getAttr(x+'.diffuse')
                translucence = max.getAttr(x+'.translucence')
                translucenceDepth = max.getAttr(x+'.translucenceDepth')
                translucenceFocus = max.getAttr(x+'.translucenceFocus')
                hideSource = max.getAttr(x+'.hideSource')
                glowIntensity = max.getAttr(x+'.glowIntensity')
                matteOpacity = max.getAttr(x+'.matteOpacity')
                refractions = max.getAttr(x+'.refractions')
                refractiveIndex = max.getAttr(x+'.refractiveIndex')
                refractionLimit = max.getAttr(x+'.refractionLimit')
                lightAbsorbance = max.getAttr(x+'.lightAbsorbance')
                surfaceThickness = max.getAttr(x+'.surfaceThickness')
                shadowAttenuation = max.getAttr(x+'.shadowAttenuation')
                chromaticAberration = max.getAttr(x+'.chromaticAberration')
                vrFillObject = max.getAttr(x+'.vrFillObject')
                vrEdgeStyle = max.getAttr(x+'.vrEdgeStyle')
                vrHiddenEdges = max.getAttr(x+'.vrHiddenEdges')
                vrHiddenEdgesOnTransparent = max.getAttr(x+'.vrHiddenEdgesOnTransparent')
                vrOutlinesAtIntersections = max.getAttr(x+'.vrOutlinesAtIntersections')                
                miScatterRadius = max.getAttr(x+'.miScatterRadius')
                miScatterAccuracy = max.getAttr(x+'.miScatterAccuracy')
                miScatterFalloff = max.getAttr(x+'.miScatterFalloff')
                miScatterLimit = max.getAttr(x+'.miScatterLimit')
                miScatterCache = max.getAttr(x+'.miScatterCache')
                miRefractionBlur = max.getAttr(x+'.miRefractionBlur')
                miRefractionBlurLimit = max.getAttr(x+'.miRefractionBlurLimit')
                miRefractionRays = max.getAttr(x+'.miRefractionRays')
                miDeriveFromMaya = max.getAttr(x+'.miDeriveFromMaya')
                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                reflectivity = max.getAttr(x+'.reflectivity')
               
                imagePath1 = max.connectionInfo(x+'.color',sfd=True)
                transparencyPath = max.connectionInfo(x+'.transparency',sfd=True)
                ambientColorPath = max.connectionInfo(x+'.ambientColor',sfd=True)
                incandescencePath = max.connectionInfo(x+'.incandescence',sfd=True)
                bumppath = max.connectionInfo(x+'.normalCamera',sfd=True)
                diffusePath = max.connectionInfo(x+'.diffuse',sfd=True)
                translucencePath = max.connectionInfo(x+'.translucence',sfd=True)
                translucenceDepthPath = max.connectionInfo(x+'.translucenceDepth',sfd=True)
                translucenceFocusPath = max.connectionInfo(x+'.translucenceFocus',sfd=True)                
                glowIntensityPath = max.connectionInfo(x+'.glowIntensity',sfd=True)
                refractiveIndexPath = max.connectionInfo(x+'.refractiveIndex',sfd=True)                
                matteOpacityPath = max.connectionInfo(x+'.matteOpacity',sfd=True)
                refractionLimitPath = max.connectionInfo(x+'.refractionLimit',sfd=True)
                lightAbsorbancePath = max.connectionInfo(x+'.lightAbsorbance',sfd=True)
                surfaceThicknessPath = max.connectionInfo(x+'.surfaceThickness',sfd=True)
                shadowAttenuationPath = max.connectionInfo(x+'.shadowAttenuation',sfd=True)                
                vrEdgeColorPath = max.connectionInfo(x+'.vrEdgeColor',sfd=True)
                vrEdgePriorityPath = max.connectionInfo(x+'.vrEdgePriority',sfd=True)                
                miIrradiancePath = max.connectionInfo(x+'.miIrradiance',sfd=True)
                miScatterRadiusPath = max.connectionInfo(x+'.miScatterRadius',sfd=True)                
                miIrradianceColorPath = max.connectionInfo(x+'.miIrradianceColor',sfd=True)
                miScatterColorPath = max.connectionInfo(x+'.miScatterColor',sfd=True)
                miScatterAccuracyPath = max.connectionInfo(x+'.miScatterAccuracy',sfd=True)                
                miScatterLimitPath = max.connectionInfo(x+'.miScatterLimit',sfd=True)
                miScatterCachePath = max.connectionInfo(x+'.miScatterCache',sfd=True)
                miRefractionBlurPath = max.connectionInfo(x+'.miRefractionBlur',sfd=True)
                miRefractionBlurLimitPath = max.connectionInfo(x+'.miRefractionBlurLimit',sfd=True)
                miRefractionRaysPath = max.connectionInfo(x+'.miRefractionRays',sfd=True)                
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                hardwareShaderPath = max.connectionInfo(x+'.hardwareShader',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                specularColorPath = max.connectionInfo(x+'.specularColor',sfd=True)
                reflectedColorPath = max.connectionInfo(x+'.reflectedColor',sfd=True)
                reflectivityPath = max.connectionInfo(x+'.reflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('anisotropic',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.color',R1,G1,B1,type="double3")
                max.setAttr(x+'.transparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.ambientColor',aR1,aG1,aB1,type="double3")
                max.setAttr(x+'.incandescence',iR1,iG1,iB1,type="double3")
                max.setAttr(x+'.vrEdgeColor',eR1,eG1,eB1,type="double3")                
                max.setAttr(x+'.miIrradiance',idR1,idG1,idB1,type="double3")                
                max.setAttr(x+'.miIrradianceColor',icR1,icG1,icB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.hardwareShader',hsR1,hsG1,hsB1,type="double3")
                max.setAttr(x+'.specularColor',scR1,scG1,scB1,type="double3")
                max.setAttr(x+'.reflectedColor',rcR1,rcG1,rcB1,type="double3")
                                                               
                max.setAttr(x+'.diffuse',diffuse)
                max.setAttr(x+'.translucence',translucence)
                max.setAttr(x+'.translucenceDepth',translucenceDepth)
                max.setAttr(x+'.translucenceFocus',translucenceFocus)
                max.setAttr(x+'.hideSource',hideSource)
                max.setAttr(x+'.glowIntensity',glowIntensity)
                max.setAttr(x+'.matteOpacity',matteOpacity)
                max.setAttr(x+'.refractions',refractions)
                max.setAttr(x+'.refractiveIndex',refractiveIndex)
                max.setAttr(x+'.refractionLimit',refractionLimit)
                max.setAttr(x+'.lightAbsorbance',lightAbsorbance)
                max.setAttr(x+'.surfaceThickness',surfaceThickness)
                max.setAttr(x+'.shadowAttenuation',shadowAttenuation)
                max.setAttr(x+'.chromaticAberration',chromaticAberration)
                max.setAttr(x+'.vrFillObject',vrFillObject)
                max.setAttr(x+'.vrEdgeStyle',vrEdgeStyle)
                max.setAttr(x+'.vrHiddenEdges',vrHiddenEdges)
                max.setAttr(x+'.vrHiddenEdgesOnTransparent',vrHiddenEdgesOnTransparent)
                max.setAttr(x+'.vrOutlinesAtIntersections',vrOutlinesAtIntersections)                
                max.setAttr(x+'.miScatterRadius',miScatterRadius)
                max.setAttr(x+'.miScatterAccuracy',miScatterAccuracy)
                max.setAttr(x+'.miScatterFalloff',miScatterFalloff)
                max.setAttr(x+'.miScatterLimit',miScatterLimit)
                max.setAttr(x+'.miScatterCache',miScatterCache)
                max.setAttr(x+'.miRefractionBlur',miRefractionBlur)
                max.setAttr(x+'.miRefractionBlurLimit',miRefractionBlurLimit)                
                max.setAttr(x+'.miRefractionRays',miRefractionRays)
                max.setAttr(x+'.miDeriveFromMaya',miDeriveFromMaya)
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.reflectivity',reflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if transparencyPath!='':
                    max.connectAttr(transparencyPath,x+'.transparency',f=True)
                if ambientColorPath !='':
                    max.connectAttr(ambientColorPath ,x+'.ambientColor ',f=True)
                if incandescencePath !='':
                    max.connectAttr(incandescencePath ,x+'.incandescence',f=True)    
                if bumppath!='':
                    max.connectAttr(bumppath,x+'.normalCamera',f=True)                    
                if diffusePath !='':
                    max.connectAttr(diffusePath ,x+'.diffuse',f=True)
                if translucencePath !='':
                    max.connectAttr(translucencePath ,x+'.translucence',f=True)    
                if translucenceDepthPath !='':
                    max.connectAttr(translucenceDepthPath ,x+'.translucenceDepth',f=True)    
                if translucenceFocusPath !='':
                    max.connectAttr(translucenceFocusPath ,x+'.translucenceFocus',f=True)                    
                if glowIntensityPath !='':
                    max.connectAttr(glowIntensityPath ,x+'.glowIntensity',f=True)    
                if refractiveIndexPath !='':
                    max.connectAttr(refractiveIndexPath ,x+'.refractiveIndex',f=True)    
                if matteOpacityPath !='':
                    max.connectAttr(bumppath,x+'.matteOpacity',f=True)    
                if refractionLimitPath !='':
                    max.connectAttr(refractionLimitPath ,x+'.refractionLimit',f=True)    
                if lightAbsorbancePath !='':
                    max.connectAttr(lightAbsorbancePath ,x+'.lightAbsorbance',f=True)    
                if surfaceThicknessPath !='':
                    max.connectAttr(surfaceThicknessPath ,x+'.surfaceThickness',f=True)    
                if shadowAttenuationPath !='':
                    max.connectAttr(shadowAttenuationPath ,x+'.shadowAttenuation',f=True)    
                if vrEdgeColorPath !='':
                    max.connectAttr(vrEdgeColorPath ,x+'.vrEdgeColor',f=True)    
                if vrEdgePriorityPath !='':
                    max.connectAttr(vrEdgePriorityPath ,x+'.vrEdgePriority ',f=True)    
                if miIrradiancePath !='':
                    max.connectAttr(miIrradiancePath ,x+'.miIrradiance',f=True)    
                if miScatterRadiusPath !='':
                    max.connectAttr(miScatterRadiusPath ,x+'.miScatterRadius',f=True)    
                if miIrradianceColorPath !='':
                    max.connectAttr(miIrradianceColorPath ,x+'.miIrradianceColor',f=True)    
                if miScatterColorPath !='':
                    max.connectAttr(miScatterColorPath ,x+'.miScatterColor',f=True)    
                if miScatterAccuracyPath !='':
                    max.connectAttr(miScatterAccuracyPath ,x+'.miScatterAccuracy',f=True)    
                if miScatterLimitPath !='':
                    max.miScatterLimitPath (miScatterLimitPath ,x+'.miScatterLimit',f=True)    
                if miScatterCachePath !='':
                    max.connectAttr(miScatterCachePath ,x+'.miScatterCache',f=True)    
                if miRefractionBlurPath !='':
                    max.connectAttr(miRefractionBlurPath ,x+'.miRefractionBlur',f=True)    
                if miRefractionBlurLimitPath !='':
                    max.connectAttr(miRefractionBlurLimitPath ,x+'.miRefractionBlurLimit',f=True)    
                if miRefractionRaysPath !='':
                    max.connectAttr(miRefractionRaysPath ,x+'.miRefractionRays',f=True)    
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)    
                if hardwareShaderPath !='':
                    max.connectAttr(hardwareShaderPath ,x+'.hardwareShader',f=True)    
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if specularColorPath !='':
                    max.connectAttr(specularColorPath ,x+'.specularColor',f=True)    
                if reflectedColorPath !='':
                    max.connectAttr(reflectedColorPath ,x+'.reflectedColor',f=True)    
                if reflectivityPath !='':
                    max.connectAttr(reflectivityPath ,x+'.reflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),    
           
def surfaceShaderToAnisotropic(*arg):
    matSel = max.ls(sl=True,mat=True)    
    if len(matSel)==0:
       max.confirmDialog (t ="Prompt", m= "Please select material!" ,b='OK')
       print ('Please select material!'),    
    else :
        objSel=max.hyperShade( objects='' )
        max.select(matSel,r=True)
        for x in matSel:
            max.select(matSel,r=True)          
            if max.nodeType(x)=='surfaceShader':
                R1 = max.getAttr(x+'.outColorR')
                G1 = max.getAttr(x+'.outColorG')
                B1 = max.getAttr(x+'.outColorB')
                tR1 = max.getAttr(x+'.outTransparencyR')
                tG1 = max.getAttr(x+'.outTransparencyG')
                tB1 = max.getAttr(x+'.outTransparencyB')
                mR1 = max.getAttr(x+'.miColorR')
                mG1 = max.getAttr(x+'.miColorG')
                mB1 = max.getAttr(x+'.miColorB')
                mitR1 = max.getAttr(x+'.miTransparencyR')
                mitG1 = max.getAttr(x+'.miTransparencyG')
                mitB1 = max.getAttr(x+'.miTransparencyB')
                scR1 = max.getAttr(x+'.miSpecularColorR')
                scG1 = max.getAttr(x+'.miSpecularColorG')
                scB1 = max.getAttr(x+'.miSpecularColorB')

                miRefractiveIndex = max.getAttr(x+'.miRefractiveIndex')
                miRefractions = max.getAttr(x+'.miRefractions')
                miAbsorbs = max.getAttr(x+'.miAbsorbs')
                miDiffuse = max.getAttr(x+'.miDiffuse')
                miTranslucence = max.getAttr(x+'.miTranslucence')
                miTranslucenceFocus = max.getAttr(x+'.miTranslucenceFocus')
                miFrameBufferWriteOperation = max.getAttr(x+'.miFrameBufferWriteOperation')
                miFrameBufferWriteFlags = max.getAttr(x+'.miFrameBufferWriteFlags')
                miFrameBufferWriteFactor = max.getAttr(x+'.miFrameBufferWriteFactor')
                caching = max.getAttr(x+'.caching')  
                nodeState = max.getAttr(x+'.nodeState')
                materialAlphaGain = max.getAttr(x+'.materialAlphaGain')
                miReflectivity = max.getAttr(x+'.miReflectivity')
               
                imagePath1 = max.connectionInfo(x+'.outColor',sfd=True)
                outTransparencyPath = max.connectionInfo(x+'.outTransparency',sfd=True)            
                miRefractiveIndexPath = max.connectionInfo(x+'.miRefractiveIndex',sfd=True)
                miDiffusePath = max.connectionInfo(x+'.miDiffuse',sfd=True)                
                miColorPath = max.connectionInfo(x+'.miColor',sfd=True)
                miTransparencyPath = max.connectionInfo(x+'.miTransparency',sfd=True)
                miTranslucencePath = max.connectionInfo(x+'.miTranslucence',sfd=True)
                miTranslucenceFocusPath = max.connectionInfo(x+'.miTranslucenceFocus',sfd=True)
                miNormalCameraPath = max.connectionInfo(x+'.miNormalCamera',sfd=True)                
                miFrameBufferWriteFactorPath = max.connectionInfo(x+'.miFrameBufferWriteFactor',sfd=True)
                materialAlphaGainPath = max.connectionInfo(x+'.materialAlphaGain',sfd=True)
                miSpecularColorPath = max.connectionInfo(x+'.miSpecularColor',sfd=True)
                miReflectivityPath = max.connectionInfo(x+'.miReflectivity',sfd=True)
               
                oldMat1=max.rename(x,x+'_old')
                shading=max.select(oldMat1)        
                shadingGrps = max.ls(max.listConnections(oldMat1,t="shadingEngine"))
                oldMatSg=max.rename(shadingGrps[0],shadingGrps[0]+'_old')
                MatName1 = x      
                MatSG1 = x+'SG'
                myMat1 = max.shadingNode('anisotropic',asShader=True, n = MatName1)
                myMatSG1 = max.sets(renderable=True,noSurfaceShader=True,em=True,n=MatSG1)
                max.connectAttr(myMat1+'.outColor',myMatSG1+'.surfaceShader',f=1)
               
                max.setAttr(x+'.outColor',R1,G1,B1,type="double3")
                max.setAttr(x+'.outTransparency',tR1,tG1,tB1,type="double3")
                max.setAttr(x+'.miColor',mR1,mG1,mB1,type="double3")
                max.setAttr(x+'.miTransparency',mitR1,mitG1,mitB1,type="double3")
                max.setAttr(x+'.miSpecularColor',scR1,scG1,scB1,type="double3")
                                                                             
                max.setAttr(x+'.miRefractiveIndex',miRefractiveIndex)
                max.setAttr(x+'.miRefractions',miRefractions)
                max.setAttr(x+'.miAbsorbs',miAbsorbs)
                max.setAttr(x+'.miDiffuse',miDiffuse)
                max.setAttr(x+'.miTranslucence',miTranslucence)
                max.setAttr(x+'.miTranslucenceFocus',miTranslucenceFocus)
                max.setAttr(x+'.miFrameBufferWriteOperation',miFrameBufferWriteOperation)
                max.setAttr(x+'.miFrameBufferWriteFlags',miFrameBufferWriteFlags)
                max.setAttr(x+'.miFrameBufferWriteFactor',miFrameBufferWriteFactor)
                max.setAttr(x+'.caching',caching)
                max.setAttr(x+'.nodeState',nodeState)
                max.setAttr(x+'.materialAlphaGain',materialAlphaGain)
                max.setAttr(x+'.miReflectivity',miReflectivity)
               
                if imagePath1!='':
                    max.connectAttr(imagePath1,x+'.color',f=True)
                if outTransparencyPath!='':
                    max.connectAttr(outTransparencyPath,x+'.transparency',f=True)  
                if miRefractiveIndexPath !='':
                    max.connectAttr(miRefractiveIndexPath ,x+'.miRefractiveIndex',f=True)    
                if miDiffusePath !='':
                    max.connectAttr(miDiffusePath ,x+'.miDiffuse',f=True)    
                if miColorPath !='':
                    max.connectAttr(miColorPath ,x+'.miColor',f=True)    
                if miTransparencyPath !='':
                    max.connectAttr(miTransparencyPath ,x+'.miTransparency',f=True)    
                if miTranslucencePath !='':
                    max.connectAttr(miTranslucencePath ,x+'.miTranslucence',f=True)    
                if miTranslucenceFocusPath !='':
                    max.connectAttr(miTranslucenceFocusPath ,x+'.miTranslucenceFocus',f=True)    
                if miNormalCameraPath !='':
                    max.connectAttr(miNormalCameraPath ,x+'.miNormalCamera',f=True)    
                if miFrameBufferWriteFactorPath !='':
                    max.connectAttr(miFrameBufferWriteFactorPath ,x+'.miFrameBufferWriteFactor',f=True)      
                if materialAlphaGainPath !='':
                    max.connectAttr(materialAlphaGainPath ,x+'.materialAlphaGain',f=True)
                if miSpecularColorPath !='':
                    max.connectAttr(miSpecularColorPath ,x+'.miSpecularColor',f=True)      
                if miReflectivityPath !='':
                    max.connectAttr(miReflectivityPath ,x+'.miReflectivity',f=True)          
                                       
                max.select(oldMat1,r=True)    
                objSelA=max.hyperShade( objects='' )            
                maSel=max.sets(edit=1,forceElement=myMatSG1)
                if len(maSel)==0:            
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),
                else:
                    max.hyperShade(assign=myMatSG1)
                    max.select(cl=True)
                    max.select(oldMat1)
                    max.delete(oldMat1)
                    max.select(oldMatSg)
                    max.delete(oldMatSg)
                    max.select(myMat1)
                    print('Transform complete'),

#Chinese
def Chinese(*arg):
    max.confirmDialog (t ="Prompt", m= "Sorry!Only provide source code version" ,b='OK')

def bakeSimulationOptions(*arg):
    camName = max.ls(sl=1)
    s = max.intFieldGrp("sTime",q=1,v=1)
    print s[0]
    e = max.intFieldGrp("eTime",q=1,v=1)
    print e[0]
    max.bakeResults (camName,simulation=True ,t=(s[0],e[0]) ,sampleBy=True ,disableImplicitControl=True ,preserveOutsideKeys=True ,sparseAnimCurveBake=0 ,removeBakedAttributeFromLayer=0 ,bakeOnOverrideLayer=0 ,minimizeRotation=True ,controlPoints=0 ,shape=True)

#Auto close
def check_exsit(*process_name):
    import win32com.client
    WMI = win32com.client.GetObject('winmgmts:')
    processCodeCov = WMI.ExecQuery('select * from Win32_Process where Name="%s"' % process_name)
    if len(processCodeCov) > 0:
        return False
    else:
        return True
        if(check_exsit('mayabatch.exe') == False):
            while(True):
                if(check_exsit('mayabatch.exe')):
                    ###print 'shutdown!'
                    os.system('shutdown -s -f -t 10')
                    break
                else:
                    print 'mayabatch.exe...wating'
                    time.sleep(3)
        else:
            print ("mayabatch.exe...no found...exit")
            
   
#windows_____________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
#____________________________________________________________________________________________________________________________________________________________________________________________________________________________
   
def C01(*arg):
    #Renamer
    max.frameLayout( label='Revise Attributes',cll=1,cl = 0,w=256)
    max.columnLayout() 
    max.frameLayout( label='Renamer',cll=1,cl = 0,w=256)
    max.columnLayout()    
    max.textFieldButtonGrp( 'input_A',l='Find', adj=2,text='', bl='Select', bc=find , cw=[1,50],w=257)
    max.textFieldButtonGrp( 'input_B',l='Replace', adj=2, text='', bl='Replace', bc=replace , cw=[1,50],w=257)
    max.textFieldButtonGrp( 'input_C',l='Prefix', adj=2, text='', bl='Add', bc=add_prefix , cw=[1,50],w=257)
    max.textFieldButtonGrp( 'input_D',l='Suffix', adj=2,text='', bl='Add', bc=add_suffix , cw=[1,50],w=257)
    max.button(l='blendShape rename',bgc=(0.42,0.42,0.42),w=252,c=blendShapeRename)
    max.setParent( '..' )
    max.setParent( '..' )
    
    #UV Translate
    max.frameLayout( label='UV Translate',cll=1,cl = 0,w=256 )
    max.columnLayout()
    max.rowColumnLayout( numberOfColumns=4, columnAttach=(10, 'left', 10), columnWidth=[(1,30), (3,30)] ,w=250)
    max.text( label='U' )
    max.textField('input_U_T',tx="0",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.text( label='V' )
    max.textField('input_V_T',tx="0",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.button(l='Set',bgc=(0.42,0.42,0.42),w=252,c=UVtranslate)
    
    max.setParent( '..' )
    max.button(l='Batch TransferUV',bgc=(0.42,0.42,0.42),w=252,c=Batch_transferUV)
    max.setParent( '..' )
    max.setParent( '..' )
   
    #Render Stats
    max.frameLayout( label='Render Stats', cll=1,cl = 0,w=256 )
    max.columnLayout()
    CS=max.checkBox('cs',l="Casts Shadows",w=250,cc=castsShadows,v=1)
    RS=max.checkBox('rs',l="Receive Shadows",w=250,cc=receiveShadows,v=1)
    MB=max.checkBox('mb',l="Motion Blur",w=250,cc=motionBlur,v=1)
    PV=max.checkBox('pv',l="Primary Visibility",w=250,cc=primaryVisibility,v=1)
    SS=max.checkBox('ss',l="Smooth Shading",w=250,cc=smoothShading,v=1)
    VILE=max.checkBox('vile',l="visble In Reflections",w=250,cc=visibleInReflections,v=1)
    VIRA=max.checkBox('vira',l="visble In Refractions",w=250,cc=visibleInRefractions,v=1)
    DS=max.checkBox('ds',l="Double Sided",w=250,cc=doubleSided,v=1)
    max.setParent( '..' )
    max.setParent( '..' )
   
    #Subdivision Level
    max.frameLayout( label='Subdivision Level',cll=1,cl = 0,w=256)
    max.columnLayout()
   
    max.text(l='Preview Division Levels:')
    max.intSliderGrp( 'input01', field=True,minValue=0, maxValue=4, fieldMinValue=0,fieldMaxValue=4,w=255,cc=PDL )
    max.button(l='Set',bgc=(0.42,0.42,0.42),w=252,c=PDL)
    max.checkBox('UPLFR',l="Use Preview Level for Rendering",w=250,cc=UPLFR,v=1)
    max.text(l='Render Division Levels:')
    max.intSliderGrp( 'input02', field=True,minValue=0, maxValue=4, fieldMinValue=0,fieldMaxValue=4,w=255,cc=RDL )
    max.button(l='Set',bgc=(0.42,0.42,0.42),w=252,c=RDL)
   
    #Extra Controls
    max.frameLayout( label='Extra Controls',cll=1,cl = 0,w=256 )
    max.columnLayout()
    collection1 = max.radioCollection()
    max.columnLayout()
    max.optionMenuGrp( l='Boundary Rules',columnWidth=(1, 80),cc=boundaryRules,bgc=(0.25,0.25,0.25),w=250,)
    max.menuItem( label='Legacy' )
    max.menuItem( label='Crease All' )
    max.menuItem( label='Crease Edges' )
   
    rb1 = max.radioButton( l="Do not smooth",bgc=(0.25,0.25,0.25),w=250,onc=noteB )
    rb2 = max.radioButton( l="Smooth internal",bgc=(0.25,0.25,0.25),w=250,onc=noteC ,sl=1)
    rb3 = max.radioButton( l="Smooth all",bgc=(0.25,0.25,0.25),w=250,onc=noteD )
    
    max.checkBox(l="Smooth UVs",bgc=(0.25,0.25,0.25),w=252,onc=SmoothUVs,ofc=notSmoothUVs,v=1)
    max.checkBox(l="Propagate Edge hardness",bgc=(0.25,0.25,0.25),w=252,onc=propagateEdgeHardness,ofc=notpropagateEdgeHardness)
    max.checkBox(l="Geometry borders",bgc=(0.25,0.25,0.25),w=252,onc=genmetryBorders,ofc=notgenmetryBorders)
    max.checkBox(l="Hard edges",bgc=(0.25,0.25,0.25),w=252,onc=hardedges,ofc=nothardedges)
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )    
    
    #Arnold
    max.frameLayout( label='Arnold',cll=1,cl = 0,w=256 )
    max.columnLayout()
    max.checkBox('aiss',l="Self Shadows",w=250,cc=AISS,v=1)
    max.checkBox('aio',l="Opaque",w=250,cc=AIO,v=1)
    max.checkBox('aivid',l="Visible In Diffuse",w=250,cc=AIVID,v=1)
    max.checkBox('aivig',l="Visible In Glossy",w=250,cc=AIVIG,v=1)
    
    max.checkBox('aiet',l="Export Tangents",w=250,cc=AIET,v=0)
    max.checkBox('aievc',l="Export Vertex Color",w=250,cc=AIEVC,v=0)
    max.checkBox('aierp',l="Export Reference Positions",w=250,cc=AIERP,v=1)
    max.checkBox('aiern',l="Export Reference Normals",w=250,cc=AIERN,v=0)
    max.checkBox('aiert',l="Export Reference Tangents",w=250,cc=AIERT,v=0)
   
    max.setParent( '..' )
    max.setParent( '..' )
    
    #Intelligent Command
    max.frameLayout( label='Intelligent Command',cll=1,cl = 0,w=256 )
    max.columnLayout()
    max.button(l='Set to face',bgc=(0.42,0.42,0.42),w=248,c=noteH) 
    max.button(l='Check model of face',bgc=(0.42,0.42,0.42),w=248,c=cheakFaceModle)   
    max.button(l='Automatic create sets',bgc=(0.42,0.42,0.42),w=248,c=create_noSmooth_set)
    max.button(l='Automatic transparency sets',bgc=(0.42,0.42,0.42),w=248,c=Auto_Transparency)
    max.button(l='Delete empty group',bgc=(0.42,0.42,0.42),w=248,c=DelEG)
    max.setParent( '..' )
    max.setParent( '..' )
   
    max.setParent( '..' )
    max.setParent( '..' )
    #mainLayout=max.columnLayout(w=250)
    #imagePathB=max.internalVar(upd=1)+"icons/maxTools/ideaNodeforpy_B.jpg"
    #b2=max.image(w=259,h=62,image=imagePathB) 
    
    max.columnLayout()
    max.frameLayout( label='Scenes Optimization', cll=1,cl = 0,w=254)
    max.columnLayout()
    max.frameLayout( label='Reference replacement', cll=1,cl = 1,w=254)
    max.columnLayout()
    
    #High <-> Low
    max.frameLayout( label='High <-> Low', cll=1,cl = 1,w=254 )
    max.columnLayout()
    max.text (align='left',l=' Please make sure the references on the same \n folder, select groups of top and click the button to\n replace references.')
    max.separator(style='none',h=5,w=250)
    max.button(l="Replace",bgc=(0.42,0.42,0.42),c=conversionFile,w=248,ann='For example: \nThe file name is "s_A_01_high" and "s_A_01_low"\nThe group name mast same with file name,It likes "s_A_01_high" and "s_A_01_low"')
    max.setParent( '..' )
    max.setParent( '..' )
    
    #TypeA <-> TypeB
    max.frameLayout( label='TypeA <-> TypeB', cll=1,cl = 1,w=254 )
    max.columnLayout()
    max.separator(style='none',h=5,w=250)
    max.text (align='left',l=' Please enter the references path:')
    max.separator(style='none',h=2,w=250)
    filePathA=max.textFieldGrp ('FileAPath',l ="originalName:" ,tx= "s_building_01_low" ,cw2=[65,178],en= 1,ann='Please enter file of select the group')
    max.text (align='left',l ="replace Path:" ,)
    filePathB=max.textField ('  replacePath',tx= "D:\works\mov6\scenes\simple\s_building_02_low.mb",w=248,en= 1,ann='Please enter file of replace path')
    max.rowColumnLayout(numberOfColumns=2)#columnWidth=[(1, 50), (2, 50), (3, 50),(4, 50), (5, 50)]
    max.button(l="GetName",bgc=(0.42,0.42,0.42),c=getName,w=58)
    max.button(l="Replace",bgc=(0.42,0.42,0.42),c=conversionType,w=188,ann='1.Please make sure the references on the same folder,\n2.The group name mast same with file name,It likes "s_A_01_high" and "s_A_01_low"\n3.You must select the top group and get its name, It likes "s_A_01_high",\n4. Enter "s_A_01_high" in originalName.\n5.Enter replace file path in originalName,It likes "D:\work\\test\scenes\reference_test\s_A_02_low.mb"')
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
   
    #Random TRS
    max.frameLayout( label='Random TRS', cll=1,cl = 1,w=254 )
    max.columnLayout()
    max.text(l='  Please enter a values:')#,fn='fixedWidthFont'
   
    max.rowColumnLayout( numberOfColumns=4, columnAttach=(10, 'left', 10), columnWidth=[(1,30), (3,30)] ,w=250)
    max.text( label='Min' )
    Min = max.textField('input_Min_T',tx="0.01",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.text( label='Max' )
    Max = max.textField('input_Max_T',tx="1.00",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.setParent( '..' )
   
    max.rowColumnLayout( numberOfColumns=3,columnAttach=(10, 'left', 10), columnWidth=[(1,75),(2, 75),(3, 75)] ,w=250)
    txCheckBox=max.checkBox('txcb',l="translateX",w=50)
    tyCheckBox=max.checkBox('tycb',l="translateY",w=50)
    tzCheckBox=max.checkBox('tzcb',l="translateZ",w=50)
    max.setParent( '..' )
   
    max.button(l="Translate Set",bgc=(0.42,0.42,0.42),c=randomTranslate,w=250)
    max.text(l='  Please enter a values:')#,fn='fixedWidthFont'
   
    max.rowColumnLayout( numberOfColumns=4, columnAttach=(10, 'left', 10), columnWidth=[(1,30), (3,30)] ,w=250)
    max.text( label='Min' )
    Min = max.textField('input_Min_R',tx="1.00",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.text( label='Max' )
    Max = max.textField('input_Max_R',tx="360.00",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.setParent( '..' )
   
    max.rowColumnLayout( numberOfColumns=4,columnAttach=(10, 'left', 50), columnWidth=[(1,60),(2, 60),(3, 60),(4, 60)] ,w=250)
    rxCheckBox=max.checkBox('rxcb',l="rotateX",w=50)
    ryCheckBox=max.checkBox('rycb',l="rotateY",w=50)
    rzCheckBox=max.checkBox('rzcb',l="rotateZ",w=50)
    r90CheckBox=max.checkBox('r90cb',l="rotate90",w=70)
   
    max.button(l="Rotate Set",bgc=(0.42,0.42,0.42),c=randomRotate,w=250)
    max.setParent( '..' )   
   
    max.text(l='  Please enter a values:')#,fn='fixedWidthFont'
    max.rowColumnLayout( numberOfColumns=4, columnAttach=(10, 'left', 10), columnWidth=[(1,30), (3,30)] ,w=250)
    max.text( label='Min' )
    Min = max.textField('input_Min_S',tx="1.00",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.text( label='Max' )
    Max = max.textField('input_Max_S',tx="10.00",fn='fixedWidthFont',bgc=(0.15,0.15,0.15),w=70 )
    max.setParent( '..' )
   
    max.rowColumnLayout( numberOfColumns=4,columnAttach=(10, 'left', 50), columnWidth=[(1,60),(2, 60),(3, 60),(4, 60)] ,w=250)
    sxCheckBox=max.checkBox('sxcb',l="scaleX",w=50)
    syCheckBox=max.checkBox('sycb',l="scaleY",w=50)
    szCheckBox=max.checkBox('szcb',l="scaleZ",w=50)
    sxyzCheckBox=max.checkBox('sxyzcb',l="scaleXYZ",w=70)
    max.setParent( '..' )
   
    max.rowColumnLayout( numberOfColumns=1,w=250)
   
    max.button(l="Scale Set",bgc=(0.42,0.42,0.42),c=randomScale,w=250)
    max.button(l="Back",bgc=(0.42,0.42,0.42),w=250,c=back)
    max.button(l="CFH",bgc=(0.42,0.42,0.42),w=250,c=CFH,ann='Center pivot,Freeze transformations,Delete history')
    max.setParent( '..' ) 
      
    max.setParent( '..' )
    max.setParent( '..' )
   
    #Constrain
    max.frameLayout( label='Constrain', cll=1,cl = 1,w=254 )
    max.columnLayout()
    max.button(l='Geometry Constrain',bgc=(0.42,0.42,0.42),w=250,c=noteE)
    max.button(l='Normal Constrain',bgc=(0.42,0.42,0.42),w=250,c=noteF)
    max.button(l='Remove Constrain',bgc=(0.42,0.42,0.42),w=250,c=noteG)
    max.button(l='Delete Constrain',bgc=(0.42,0.42,0.42),w=250,c=noteI)
   
    max.setParent( '..' )
    max.setParent( '..' )
    
    #Bake Simulation
    max.frameLayout( label='Bake Simulation', cll=1,cl = 1,w=254 )
    max.columnLayout()
    max.intFieldGrp("sTime",l="Stare time:",cw2=[60,100],value1=1)
    max.intFieldGrp("eTime",l="End time:",cw2=[60,100],value1=24)
    max.button(l='Bake Simulation',bgc=(0.42,0.42,0.42),w=250,c=bakeSimulationOptions)
    max.button(l='camConnect',bgc=(0.42,0.42,0.42),w=250,c=noteM)
    max.setParent( '..' )
    max.setParent( '..' )
   
    #PrintScreen
    max.frameLayout( label='PrintScreen', cll=1,cl = 1,w=254 )
    max.columnLayout()
    tx_capi = max.text (l='PrintScreen path (  Default path in "D:\\"  )')
    max.rowColumnLayout( numberOfRows=5 )
    cbxucmn=max.checkBox ('cbx_ucmn',l="Use camera name for imageName",onc=openPath,ofc=closePath,v=1)
    max.separator(h=5,w=250)
    imageName=max.textFieldGrp ('imageName',l ="Image Name:" ,tx= "Camera/Character_Name" ,cw2=[80,150],en= 0,)
    imagePath=max.textFieldGrp ('tx_fiph',l ="Save Path:    " ,tx= "D:\\" ,cw2=[80,150],en= 0,ann='Please enter save path')
   
    max.rowColumnLayout( numberOfRows=1 )
    picFormatMenu = max.optionMenuGrp(cc=pictureSize ,cw2 = (79, 200),w=300, label = "Image Size:   ", ann = "The image size for the render will be:")
    max.menuItem(label = "HD 1080 1920x1080")
    max.menuItem(label = "small icon 64x64")
    max.menuItem(label = "mid icon 128x128")
    max.menuItem(label = "big icon 256x256")
    max.menuItem(label = "half Squrare 512x512")  
    max.menuItem(label = "1k Square 1024x1024")
    max.menuItem(label = "2k Square 2048x2048")
    max.menuItem(label = "Full 1024 1024x768")
    max.menuItem(label = "Full 1280 1280x1024")
    max.menuItem(label = "HD 720 1280x720")
    max.menuItem(label = "HD 1080 1920x1080")
    max.setParent( '..' )
    max.setParent( '..' )
    max.rowColumnLayout( numberOfRows=1 )
    W='1920'
    H='1080'
   
    txtFieldWidthCP = max.textFieldGrp('txtFieldWidthCP',l='Width:',tx=W,cw2=[47,60],editable=True,ann='image width')
    txtFieldHightCP = max.textFieldGrp('txtFieldHightCP',l='Hight:',tx=H,cw2=[50,65],editable=True,ann='image hight')
    max.setParent( '..' )
    max.button (l="PrintScreen",w= 250,h =40,c=cappic,ann='Generate a picture!')
   
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )       
    max.setParent( '..' )
    max.setParent( '..' ) 
   

def C02(*arg):
    max.columnLayout()
    max.setParent( '..' )

       
def C03(*arg):  
    max.frameLayout( label='Render Option', w=254 )
    max.columnLayout()
    
    tNum = max.textFieldGrp("tNum",l='Track number:',tx='Track_000',h=20,cw2=[75,165],editable=True,cc=tNumChange,ann="Enter track of number\n For example: 'Track_001'\n                       'Track_010'\n                       'Track_100'")
    txtField = max.textFieldGrp("txtField",l='Prefix name:',tx='shot_000',h=20,cw2=[75,165],editable=True,cc=txtFieldChange,ann="Enter character of seense name")    
    max.separator(h=6,w=250,style='none' )
    
    max.frameLayout (l="Additional settings ",cll=1,cl = 0, w=254)
    max.rowColumnLayout( numberOfColumns=6, columnWidth=[(1, 40), (2, 40), (3, 40),(4, 40), (5, 40), (6, 40)] )
   
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/anisotropic.png', label='TransAni',ann='One key transform Anisotropic\n //  blinn to anisotropic // \n //  lambert to anisotropic // \n //  phong to anisotropic // \n //  phongE to anisotropic // \n //  surfaceShader to anisotropic //', c=OnetoAnisotropic)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/LB.png', label='TransBin',ann='One key transform Blinn\n //  anisotropic to blinn // \n //  lambert to blinn // \n //  phong to blinn // \n //  phongE to blinn // \n //  surfaceShader to blinn //', c=OnetoBlinn)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/BL.png', label='TransLam',ann='One key transform Lambert\n //  anisotropic to lambert // \n //  blinn to lambert // \n //  phong to lambert // \n //  phongE to lambert // \n //  surfaceShader to lambert //', c=OnetoLam)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/phong.png', label='TransPg',ann='One key transform Phong\n //  anisotropic to phong // \n //  blinn to phong // \n //  lambert to phong // \n //  phongE to phong // \n //  surfaceShader to phong //', c=OnetoPhong)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/phongE.png', label='TransPgE',ann='One key transform PhongE\n //  anisotropic to phongE // \n //  lambert to phongE // \n //  phong to phongE // \n //  blinn to phongE // \n //  surfaceShader to phongE //', c=OnetoPhongE)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/surface.png', label='TransSfac',ann='One key transform surfaceShader\n //  anisotropic to surfaceShader // \n //  lambert to surfaceShader // \n //  phong to surfaceShader // \n //  blinn to surfaceShader // \n //  phongE to surfaceShader //', c=OnetoSurfaceShader)
   
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/usualmat.png', label='Lambert',ann='Create usual Lambert', c=LambertMat)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/blinnMat.png', label='Blinn',ann='Create usual Blinn', c=BlinnMat)
    
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/closesp.png', label='CloseSP',ann='Close specular', c=closeSpecular)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/layerTexture.png', label='LT',ann='Create layerTexture material', c=layerTexture)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/cheakericon.png', label='UVmat',ann='Create CheakUVmat', c=cheakerModleUvMat)
    #max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/mvcamset.png', label='MvCam',ann='Set camrea of motion vector \n //  Use to motionBlur in Nuke  //', c=selChooseCamB)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/rapt.png', label='PAOP',ann='Create random animation of paper  //', c=windowsSFMtab)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/auto cam.png', label='TestCam',ann='Create camera of test  //', c=AtuoCamera)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/directionTL.png', label='AutoTL',ann='Create camera of test  //', c=windowsTLtab)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/mrraywitch.png', label='MRMS',ann='Create Mentalray matter shadow  //\nFirst at all ,you need to rewrite mentalrayCustomNodeClass.mel .\n"$enableMIPShaders == 1 ) ||"\naddress:"C:\Program Files\Autodesk\mentalrayForMaya2014\scripts" \nThe Second ,load Mentalray in maya.\nThe third,please select a obj', c=MRrayWitch)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/rsraywitch.png', label='RSMS',ann='Create Redshift matter shadow  //\nFirst at all ,you need to select redshift render .', c=RSrayWitch)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/APTL.png', label='APTL',ann='Take a modle in diffence layer and give diffence material', c=addPropToLayer)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/cheakface.png', label='CheckF',ann='Check face of model ', c=cheakFaceModle) 
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/gammacolor.png', label='CGC',ann='Change gamma color ', c=fixColor)  
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/shutdown.png', label='SD',ann='Planning shutdown', c=TimeOffWindows)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/2DTo3D.png', label='2DTo3D',ann='2DTo3D', c=twoDtransformbump)
    max.iconTextButton(style='iconAndTextVertical', image1='icons/maxTools/arnold_falloff.png', label='AFO',ann='arnold falloff 0.05', c=arnoldfalloff)
     
    max.setParent( '..' )
    max.setParent( '..' )
    
    #mentalray
    max.frameLayout (l="Mentalray",cll=1,cl = 0, w=254)
    max.text (align='left',l='   Mentalray',h=22,fn='boldLabelFont',bgc=(0.15,0.15,0.15))
    max.rowColumnLayout( numberOfColumns=5, columnWidth=[(1, 50), (2, 50), (3, 50),(4, 50), (5, 50)],)
    colorITCB = max.iconTextCheckBox('colorcx', style='iconAndTextVertical', image1='icons/maxTools/color.png', label='Color',ann='Create diffMat renderlayer:\nCreate Color RenderPass:')
    specularITCB = max.iconTextCheckBox('specularcx', style='iconAndTextVertical', image1='icons/maxTools/specular.png', label='Specular',ann='Create renderpass of specular renderlayer: \nCreate renderpass of refraction renderlayer:\nCreate renderpass of refleted renderlayer:\n// It need to batch render implementtation effect! //')
    refletedITCB = max.iconTextCheckBox('refletedcx', style='iconAndTextVertical', image1='icons/maxTools/refleted.png', label='Refleted',ann='Create refleted renderlayer')
    refractionITCB = max.iconTextCheckBox('refraccx', style='iconAndTextVertical', image1='icons/maxTools/refraction.png', label='refraction',ann='Create refraction  renderlayer')
    aoITCB = max.iconTextCheckBox('aocx', style='iconAndTextVertical', image1='icons/maxTools/ao.png', label='AO',ann='Create occ renderlayer')
    FGaoITCB = max.iconTextCheckBox('fgaocx', style='iconAndTextVertical', image1='icons/maxTools/fgao.png', label='FGAO',ann='Create FinalGathering AO renderlayer')
    lineITCB = max.iconTextCheckBox('linecx', style='iconAndTextVertical', image1='icons/maxTools/line.png', label='Line',ann='Create line renderlayer')
    ZlineITCB = max.iconTextCheckBox('zlinecx', style='iconAndTextVertical', image1='icons/maxTools/zline.png', label='ZLine',ann='Create Zline renderlayer')
    facingITCB = max.iconTextCheckBox('facingcx', style='iconAndTextVertical', image1='icons/maxTools/facing.png', label='facing',ann='Create facing renderlayer')
    incidenceITCB = max.iconTextCheckBox('incidencecx', style='iconAndTextVertical', image1='icons/maxTools/incidence.png', label='incidence',ann='Create incidence renderlayer')
    toonlITCB = max.iconTextCheckBox('toonlcx', style='iconAndTextVertical', image1='icons/maxTools/toonl.png', label='ToonL',ann='Create toonl renderlayer')
    zdITCB = max.iconTextCheckBox('zdcx', style='iconAndTextVertical', image1='icons/maxTools/zd.png', label='ZDepth',ann='Create zdepth renderlayer:\nzd_sr.Old MinX=Cam Near\nzd_sr.Old MaxX=Cam Far')
    sdITCB = max.iconTextCheckBox('sdcx', style='iconAndTextVertical', image1='icons/maxTools/sd.png', label='Shadow',ann='Create shadow renderlayer')
    #aozITCB = max.iconTextCheckBox('aozcx', style='iconAndTextVertical', image1='icons/maxTools/aoz.png', label='AOz',ann='Create Occlusion Zdepth renderlayer:\n SRA.Old MinX=Cam Near\n SRA.Old MaxX=Cam Far\n SRB.Old MinX=Point World Y Near\n SRB.Old MaxX=Point World Y Far')
    normalITCB = max.iconTextCheckBox('normalcx', style='iconAndTextVertical', image1='icons/maxTools/normal.png', label='Normal',ann='Create normal renderlayer')
    #inormalITCB = max.iconTextCheckBox('inormalcx', style='iconAndTextVertical', image1='icons/maxTools/invert_normal.png', label='I.Normal',ann='Create invert normal renderlayer')    
    maskITCB = max.iconTextCheckBox('maskcx', style='iconAndTextVertical', image1='icons/maxTools/mask.png', label='Mask',ann='Create mask renderlayer:\ndefault mat:Black')
    tcITCB = max.iconTextCheckBox('tccx', style='iconAndTextVertical', image1='icons/maxTools/3C.png', label='TColor',ann='Create Three Color renderlayer')
    #max.setParent( '..' )
    #max.separator('..')
    #max.rowColumnLayout( numberOfColumns=5, columnWidth=[(1, 50), (2, 50), (3, 50),(4, 50), (5, 50)] )
    mvITCB = max.iconTextCheckBox('mvcx', style='iconAndTextVertical', image1='icons/maxTools/motionblur.png', label=' MotionV',ann='Creart motion vector renderlayer \n //  Use to motionBlur in Nuke  //')
    hdrITCB = max.iconTextCheckBox('hdrcx', style='iconAndTextVertical', image1='icons/maxTools/hdr.png', label='IBL',ann='Creart Image Based Lighting renderlayer')
    #skyITCB = max.iconTextCheckBox('skycx', style='iconAndTextVertical', image1='icons/maxTools/sky.png', label='PSS',ann='Creart Physical Sun and Sky renderlayer')
    customITCB = max.iconTextCheckBox('customcx', style='iconAndTextVertical', image1='icons/maxTools/custom.png', label='custom',ann='Creart custom renderlayer')
    allITCB = max.iconTextCheckBox('allcx', style='iconAndTextVertical', image1='icons/maxTools/all.png', label=' SelectAll',cc=chooseAll,ann='Select all or clear all!')
    max.setParent( '..' )
    max.setParent( '..' )
    
    #Arnold
    max.frameLayout (l="Aronld",cll=1,cl = 0, w=254)
    max.text (align='left',l='   Arnold ',h=22,fn='boldLabelFont',bgc=(0.15,0.15,0.15))
    max.rowColumnLayout( numberOfColumns=5, columnWidth=[(1, 50), (2, 50), (3, 50),(4, 50), (5, 50)])
    arnoldcolorITCB = max.iconTextCheckBox('arnoldDfcx', style='iconAndTextVertical', image1='icons/maxTools/color.png', label='Color',ann='Create diffMat AOVs')
    arnoldspecularITCB = max.iconTextCheckBox('arnoldSpcx', style='iconAndTextVertical', image1='icons/maxTools/specular.png', label='Specular',ann='Create specular AOVs')
    arnoldrefletedITCB = max.iconTextCheckBox('arnoldRfecx', style='iconAndTextVertical', image1='icons/maxTools/refleted.png', label='Refleted',ann='Create refleted AOVs')
    arnoldrefractionITCB = max.iconTextCheckBox('arnoldRefraccx', style='iconAndTextVertical', image1='icons/maxTools/refraction.png', label='refraction',ann='Create refraction  AOVs')
    arnoldAOITCB = max.iconTextCheckBox('arnoldAOcx', style='iconAndTextVertical', image1='icons/maxTools/ao.png', label='AO',ann='Create arnold AO renderlayer')    
    arnoldZITCB = max.iconTextCheckBox('arnoldZcx', style='iconAndTextVertical', image1='icons/maxTools/zd.png', label='ZDepth',ann='Create arnold ZDepth renderpass')
    arnoldsdITCB = max.iconTextCheckBox('arnoldsdcx', style='iconAndTextVertical', image1='icons/maxTools/sd.png', label='Shadow',ann='Create shadow AOVs')
    arnoldNITCB = max.iconTextCheckBox('arnoldNcx', style='iconAndTextVertical', image1='icons/maxTools/normal.png', label='Normal',ann='Create arnold normal renderpass')
    arnoldMVITCB = max.iconTextCheckBox('arnoldMVcx', style='iconAndTextVertical', image1='icons/maxTools/motionblur.png', label='MotionV',ann='Create arnold motion vector renderpass')    
    aAllITCB = max.iconTextCheckBox('arnoldAllcx', style='iconAndTextVertical', image1='icons/maxTools/all.png', label=' SelectAll',cc=chooseAllAronld,ann='Select all or clear all!')
    #loadAAOITCB = max.iconTextButton('loadAAOcx', style='iconAndTextVertical', image1='icons/maxTools/loadAAO.png', c=loadAAo,label='loadAAO',ann='load arnold AO renderlayer')    
    max.setParent( '..' )
    max.setParent( '..' )
    
    #redshife
    max.frameLayout (l="Redshife",cll=1,cl = 1, w=254)
    max.text (align='left',l='   Redshift ',h=22,fn='boldLabelFont',bgc=(0.15,0.15,0.15))
    max.rowColumnLayout( numberOfColumns=5, columnWidth=[(1, 50), (2, 50), (3, 50),(4, 50), (5, 50)])
    rscolorITCB = max.iconTextCheckBox('rsDfcx', style='iconAndTextVertical', image1='icons/maxTools/color.png', label='Color',ann='Create diffMat AOVs')
    rsspecularITCB = max.iconTextCheckBox('rsSpcx', style='iconAndTextVertical', image1='icons/maxTools/specular.png', label='Specular',ann='Create specular AOVs')
    rsrefletedITCB = max.iconTextCheckBox('rsRfecx', style='iconAndTextVertical', image1='icons/maxTools/refleted.png', label='Refleted',ann='Create refleted AOVs')
    rsrefractionITCB = max.iconTextCheckBox('rsRfracx', style='iconAndTextVertical', image1='icons/maxTools/refraction.png', label='refraction',ann='Create refleted AOVs')
    rsAOITCB = max.iconTextCheckBox('rsAOcx', style='iconAndTextVertical', image1='icons/maxTools/arnoldAO.png', label='AO',ann='Create reshift AO AOVs')    
    rsZITCB = max.iconTextCheckBox('rsZcx', style='iconAndTextVertical', image1='icons/maxTools/zd.png', label='ZDepth',ann='Create reshift ZDepth AOVs')
    rssdITCB = max.iconTextCheckBox('rssdcx', style='iconAndTextVertical', image1='icons/maxTools/sd.png', label='Shadow',ann='Create shadow AOVs')
    rsNITCB = max.iconTextCheckBox('rsNcx', style='iconAndTextVertical', image1='icons/maxTools/normal.png', label='Normal',ann='Create reshift normal AOVs')
    rsMVITCB = max.iconTextCheckBox('rsMVcx', style='iconAndTextVertical', image1='icons/maxTools/motionblur.png', label='MotionV',ann='Create reshift motion vector AOVs')
    rsAllITCB = max.iconTextCheckBox('rsAllcx', style='iconAndTextVertical', image1='icons/maxTools/all.png', label=' SelectAll',cc=chooseAllRedShift,ann='Select all or clear all!')
    max.setParent( '..' )
    max.setParent( '..' )
    
    suITCB = max.iconTextCheckBox('sucx',w=250, h=25,style='iconAndTextVertical', image1='icons/maxTools/selectUsualIcon.png',cc=selectUsualIcon,ann='Select usual icon')
    max.setParent( '..' )
    max.setParent( '..' )
   
    max.frameLayout (l="Render parameters",cll=1,cl = 0, w=255)
    max.columnLayout()
    max.rowColumnLayout( numberOfRows=5 )
    picFormatMenu = max.optionMenuGrp('pFormat',cc=formats ,cw2 = (75, 300),w=300, label = "Image Format:", ann = "The image format for the render will be:")
    max.menuItem(label = "PNG")
    max.menuItem(label = "Maya IFF")
    #max.menuItem(label = "Alias PIX")
    #max.menuItem(label = "Cineon")
    #max.menuItem(label = "EPS")
    #max.menuItem(label = "GIF")
    max.menuItem(label = "JPEG")  
    max.menuItem(label = "Maya16 IFF")
    #max.menuItem(label = "Quantel")
    #max.menuItem(label = "RLA")
    #max.menuItem(label = "SGI")
    #max.menuItem(label = "SGI16")
    #max.menuItem(label = "SoftImage")    
    max.menuItem(label = "PSD")
    max.menuItem(label = "OpenEXR")
    max.menuItem(label = "Targa")
    max.menuItem(label = "Tiff")
    #max.menuItem(label = "Tiff16")
    #max.menuItem(label = "Windows Bitmap")
    
    max.columnLayout( adjustableColumn=True )
    cam = max.listCameras()
    camMenu = max.optionMenuGrp('camlist',cc=frameAnimationExt ,cw2 = (75, 300),w=300, label = "Camera:", ann = "select camera:")
    for a in range(len(cam)):
        max.menuItem(label = cam[a])
    max.setParent( '..' )
   
    max.columnLayout( adjustableColumn=True )
    picFormatMenu = max.optionMenuGrp(cc=frameAnimationExt ,cw2 = (75, 300),w=300, label = "AnimationExt:", ann = "Set Frame & Animation ext:")
    max.menuItem(label = "name_#.ext")
    max.menuItem(label = "name.ext(Single Frame)        ")    
    max.setParent( '..' )
   
    max.columnLayout( adjustableColumn=True )
    picFormatMenu = max.optionMenuGrp(cc=imageSize ,cw2 = (75, 300),w=300, label = "Image Size:", ann = "The image size for the render will be:")
    max.menuItem(label = "HD 1080                                 ")
    max.menuItem(label = "320x240")
    max.menuItem(label = "640x480")
    max.menuItem(label = "1k Square")
    max.menuItem(label = "2k Square")
    max.menuItem(label = "3k Square")
    max.menuItem(label = "4k Square")
    max.menuItem(label = "8k Square")
    max.menuItem(label = "Full 1024")
    max.menuItem(label = "Full 1280/Screen")
    max.menuItem(label = "HD 720")    
    max.menuItem(label = "NTSC 4d")
    max.menuItem(label = "PAL 768")
    max.menuItem(label = "PAL 780")
    max.setParent( '..' )
     
    picBitMenu = max.optionMenuGrp("dateType",cc=imagebit ,cw2 = (75, 300),w=300, label = "Date Type:", ann = "The image bit for the render will be:")
    max.menuItem(label = "RGBA(Byte) 4x8 Bit                ")
    max.menuItem(label = "RGB(Byte) 3x8 Bit")
    max.menuItem(label = "RGB(Short) 3x16 Bit")
    max.menuItem(label = "RGB(Half) 3x16 Bit")
    max.menuItem(label = "RGB(Float) 3x32 Bit")
    max.menuItem(label = "RGBE(Byte) 4x8 Bit")
    max.menuItem(label = "RGBA(Short) 4x16 Bit")
    max.menuItem("RGBAHalf4x16Bit",label = "RGBA(Half) 4x16 Bit")
    max.menuItem("RGBAFloat4x32Bit",label = "RGBA(Float) 4x32 Bit")  
    max.menuItem(label = "Alpha(Byte) 1x8 Bit")
    max.menuItem(label = "Alpha(Short) 1x16 Bit")
    max.menuItem(label = "Alpha(Half) 1x16 Bit")
    max.menuItem(label = "Alpha(Float) 1x32 Bit")
    max.menuItem(label = "Depth(Float) 1x32 Bit")
    max.menuItem(label = "Coverage(Float) 1x32 Bit")
    max.menuItem(label = "Normal(Float) 3x32 Bit")
    max.menuItem(label = "Motion(Float) 3x32 Bit")
    max.menuItem(label = "label(Integer) 1x32 Bit")
    max.menuItem(label = "Bit 1 Bit")
    max.setParent( '..' )
    
    max.rowColumnLayout( numberOfRows=2)
    txtFieldWidth = max.textFieldGrp('wh',l='Width:',tx='1920',cw2=[35,60],editable=True,ann='image width',cc=imageWidth)
    txtFieldHight = max.textFieldGrp('hh',l='Hight:',tx='1080',cw2=[35,60],editable=True,ann='image hight',cc=imageHight)
    txtFieldStartF = max.textFieldGrp('sf',l='Start frame:',tx='1',cw2=[60,65],editable=True,ann='Frame Range',cc=SF)
    txtFieldEndF = max.textFieldGrp('ef',l='End frame:',tx='10',cw2=[60,65],editable=True,ann='Frame Range',cc=EF)
    max.setParent( '..' )
    max.setParent( '..' )
    #max.rowColumnLayout( numberOfRows=2,w=255)
    #max.text(align='left',l="  Render view batch save path:",w=255)
    #renderPath = max.textFieldGrp ('RP',tx= "D:/" ,cw2=[0,255])
    #max.setParent( '..' )
    max.setParent( '..' )
    
    #max.rowColumnLayout( numberOfRows=1)
    #max.button(l='Set',w=245,c=imageWHSE)
    #max.setParent( '..' )
    #max.setParent( '..' )
    max.rowColumnLayout( numberOfRows=7)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/auto load mentalray.png', ann='load Mentalray' ,w=230,c=loadMentalRayPlugin)
    #max.iconTextButton( style='iconOnly', image1='icons/maxTools/auto load arnold.png', ann='load Arnold' ,w=230,c=loadArnoldPlugin)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/create render layer.png', ann='create render layer',c=gl)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/batchviewrender.png', ann='create Bacth View Render layer',c=Frender)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/cmdbatchrender.png', ann='create CMD batch render',c=CMD_Batch_Render)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/batch render.png', ann='Batch render',c=batchRendergo)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/cannel batch render.png', ann='Cannel batch render',c=cancelBatchRender)
    max.iconTextButton( style='iconOnly', image1='icons/maxTools/get batchrender command.png', ann='Get batch render command',c=batchRenderCommand)
    #max.iconTextButton( style='iconOnly', image1='icons/maxTools/cannel batch render.png', ann='Auto close computer for over batch render',c=check_exsit)
    #max.iconTextButton( style='iconOnly', image1='icons/maxTools/create mask.png', label='Create Mask' )
    max.setParent( '..' )
    max.rowColumnLayout( numberOfColumns=6, columnWidth=[(1, 41.66), (2, 41.66), (3, 41.66),(4, 41.66), (5, 41.66), (6, 41.66)] )
    itbred=max.iconTextButton( style='iconOnly', image1='icons/maxTools/red.png', ann='Mask: red',c=getMaskR)
    itbgreen=max.iconTextButton( style='iconOnly', image1='icons/maxTools/green.png', ann='Mask: green',c=getMaskG)
    itbblue=max.iconTextButton( style='iconOnly', image1='icons/maxTools/blue.png', ann='Mask: blue',c=getMaskB)
    itbwhite=max.iconTextButton( style='iconOnly', image1='icons/maxTools/white.png', ann='Mask: white',c=getMaskWhite)
    itbblack=max.iconTextButton( style='iconOnly', image1='icons/maxTools/black.png', ann='Mask: black',c=getMaskBlack)
    itbbackground=max.iconTextButton( style='iconOnly', image1='icons/maxTools/background.png', ann='Mask: background',c=getMaskUBG)
    max.setParent( '..' )
   
    #max.text(l='   ',fn='fixedWidthFont')
    #max.text(l='Welcome your guidance \nBy Max @2013',fn='fixedWidthFont',w=250)
    max.setParent( '..' )  

def C04(*arg):
    max.columnLayout()
    max.setParent( '..' ) 
    max.setParent( '..' ) 
   
def UIC(*arg):
    #if max.dockControl('dockControlA',ex=1):
        #max.deleteUI('dockControlA',control=True)
    if max.window(window2,ex=1):
        max.deleteUI(window2,wnd=1)  
        max.deleteUI(dockControlA,control=True)
    if max.window('windowssfm',ex=1):
       max.deleteUI('windowssfm')    
         
    window1 = max.window(t='maxTools2015',mnb =True ,mxb = False,sizeable =0)
   
    mainLayout=max.columnLayout(w=285)
    max.symbolButton(enable=1, command=wed,image="icons/maxTools/ideaNodeforpy.jpg",ann='Visit the home page')
    max.text (align='left',l='                          Maizhijian@foxmail.com',h=13,w=285,fn='boldLabelFont',bgc=(0.15,0.15,0.15))
    max.columnLayout( adjustableColumn=True )
    menuBarLayout = max.menuBarLayout()
    max.menu( label='File' )
    max.menuItem( label='Batch import scenes',c=importSomeFile )
    max.menuItem( label='Batch reference scenes',c=referenceSomeFile )
    max.menuItem( label='Batch render setting',c=BatchRenderSetting )
    max.menu( label='Help', helpMenu=True )
    max.menuItem( label='About...',c=aboutInfo )
    max.menu( label='Windows', helpMenu=True )
    max.menuItem( label='Dock control',c=UIB )
    max.menu( label='Language', helpMenu=True )
    max.menuItem( label='Chinese',c=Chinese ,ann="Only provide source code version")
    max.setParent( '..' )
   
    form = max.formLayout()
    tabs = max.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
   
   
    #Model
    child1 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0,)
    C01()
    max.setParent( '..' )    
    
    #Animation
    child2 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C02()
    max.setParent( '..' )
    
    #Rendering
    child3 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C03() 
    
    #Dynamics
    child4 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C04()  
    
    
    max.tabLayout( tabs, edit=True, tabLabel=((child1, 'Model'), (child2, 'Animation'), (child3, 'Rendering'), (child4, 'Dynamics'),) )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
   
    mainLayout=max.columnLayout(w=285)
    imagePathB=max.symbolButton(enable=1, command=mail,image="icons/maxTools/ideaNodeforpy_B.jpg",ann='Visit the home page')
    #imagePathB=max.internalVar(upd=1)+"icons/maxTools/ideaNodeforpy_B.jpg"
    b2=max.image(w=285,image=imagePathB)
    #max.setParent( '..' )
   
    allowedAreas = ['right', 'left']
    #dockControlA=
    #dockControlA = max.dockControl('dockControlA',l="maxTools2015",area='right', content = window1,allowedArea = allowedAreas )    
    max.showWindow()
    if max.dockControl(dockControlA,ex=1):
        max.deleteUI(dockControlA,control=True)
   

def UIB(*arg):
    if max.window(window1,ex=1):
        max.deleteUI(window1,wnd=1)
        #max.deleteUI(window1,wnd=True)
    if max.window('windowssfm',ex=1):
       max.deleteUI('windowssfm')    
    global window2              
    window2 = max.window(t='maxTools2015',mnb =False ,mxb = False,sizeable =0)
   
    mainLayout=max.columnLayout(w=285)
    max.symbolButton(enable=1, command=wed,image="icons/maxTools/ideaNodeforpy.jpg",ann='Visit the home page')
    max.text (align='left',l='                          Maizhijian@foxmail.com',h=13,w=285,fn='boldLabelFont',bgc=(0.15,0.15,0.15))
    max.columnLayout( adjustableColumn=True )
    menuBarLayout = max.menuBarLayout()
    max.menu( label='File' )
    max.menuItem( label='Batch import scenes',c=importSomeFile )
    max.menuItem( label='Batch reference scenes',c=referenceSomeFile )
    max.menuItem( label='Batch render setting',c=BatchRenderSetting )
    max.menu( label='Help', helpMenu=True )
    max.menuItem( label='About...',c=aboutInfo )
    max.menu( label='Windows', helpMenu=True )
    max.menuItem( label='Tab control',c=UIC )
    max.menu( label='Language', helpMenu=True )
    max.menuItem( label='Chinese',c=Chinese ,ann="Only provide source code version")
    max.setParent( '..' )
       
    form = max.formLayout()
    tabs = max.tabLayout(innerMarginWidth=5, innerMarginHeight=5)    
   
    #Model
    child1 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0,)
    C01()
    max.setParent( '..' )    
    
    #Animation
    child2 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C02()
    max.setParent( '..' )
    
    #Rendering
    child3 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C03() 
    
    #Dynamics
    child4 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
    C04()      
    
    max.tabLayout( tabs, edit=True, tabLabel=((child1, 'Model'), (child2, 'Animation'), (child3, 'Rendering'), (child4, 'Dynamics'),) )
    max.setParent( '..' )
    max.setParent( '..' )
    max.setParent( '..' )
   
    mainLayout=max.columnLayout(w=285)
    imagePathB=max.symbolButton(enable=1, command=mail,image="icons/maxTools/ideaNodeforpy_B.jpg",ann='Visit the home page')
    #imagePathB=max.internalVar(upd=1)+"icons/maxTools/ideaNodeforpy_B.jpg"
    b2=max.image(w=285,image=imagePathB)
    #max.setParent( '..' )
   
    allowedAreas = ['right', 'left']
    global dockControlA
    dockControlA = max.dockControl('dl',l="maxTools2015",area='right', content = window2,allowedArea = allowedAreas )    
    #max.showWindow()
   
#def UI(*arg):
if max.window("window1",ex=1):
   max.deleteUI("window1")
if max.dockControl("dl",ex=1):
    max.deleteUI("dl")
if max.window('windowssfm',ex=1):
       max.deleteUI('windowssfm')          
global window1      
window1 = max.window(t='maxTools2015',mnb =True ,mxb = False,sizeable =0)

mainLayout=max.columnLayout(w=250)
max.symbolButton(enable=1, command=wed,image="icons/maxTools/ideaNodeforpy.jpg",ann='Visit the home page')
max.text (l='Maizhijian@foxmail.com',h=13,w=285,fn='boldLabelFont',bgc=(0.15,0.15,0.15))#
max.columnLayout( adjustableColumn=True )
menuBarLayout = max.menuBarLayout()
max.menu( label='File' )
max.menuItem( label='Batch import scenes',c=importSomeFile )
max.menuItem( label='Batch reference scenes',c=referenceSomeFile )
max.menuItem( label='Batch render setting',c=BatchRenderSetting )
max.menu( label='Help', helpMenu=True )
max.menuItem( label='About...',c=aboutInfo )
max.menu( label='Windows', helpMenu=True )
max.menuItem( label='Dock control',c=UIB )
max.menu( label='Language', helpMenu=True )
max.menuItem( label='Chinese',c=Chinese ,ann="Only provide source code version")    
max.setParent( '..' )
form = max.formLayout()
tabs = max.tabLayout(innerMarginWidth=5, innerMarginHeight=5)

#Model
child1 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0,)
C01()
max.setParent( '..' )    

#Animation
child2 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
C02()
max.setParent( '..' )

#Rendering
child3 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
C03() 

#Dynamics
child4 = max.scrollLayout(w=280,h=520,horizontalScrollBarThickness=0)
C04()  


max.tabLayout( tabs, edit=True, tabLabel=((child1, 'Model'), (child2, 'Animation'), (child3, 'Rendering'), (child4, 'Dynamics'),) )
max.setParent( '..' )
max.setParent( '..' )
max.setParent( '..' )
   
mainLayout=max.columnLayout(w=285)
imagePathB=max.symbolButton(enable=1, command=mail,image="icons/maxTools/ideaNodeforpy_B.jpg",ann='Visit the home page')
#imagePathB=max.internalVar(upd=1)+"icons/maxTools/ideaNodeforpy_B.jpg"
b2=max.image(w=285,image=imagePathB)
max.setParent( '..' )

allowedAreas = ['right', 'left']
#dockControlA=
#dockControlA = max.dockControl('dockControlA',l="maxTools2015",area='right', content = window1,allowedArea = allowedAreas )    
max.showWindow()            